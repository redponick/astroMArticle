%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: MA_QES_Effective-2.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Vadim Naumov
%%CreationDate: 2/11/2013
%%BoundingBox: 0 0 399 433
%%HiResBoundingBox: 0 0 398.1470 432.7706
%%CropBox: 0 0 398.1470 432.7706
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1200 GradRes=300 Text=0 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2013-02-11T15:18:28+04:00</xap:CreateDate>
         <xap:ModifyDate>2013-02-11T15:18:28+04:00</xap:ModifyDate>
         <xap:MetadataDate>2013-02-11T15:18:28+04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>236</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADsAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7PqOm+X729vJ/OUOpxxw&#xA;3Mgtbue4uItOWENxR0FpIsMKhQKvOFYn9og4qmWsXNx5R8ja5rmk3Tataafp8uo2FvfTvOOMEbzO&#xA;BdH1JpEdAOHMsa/tUOyqG/MH8wr7y3q+l6daWsciXEUt9qN7ccvRgs7ee3gkPwHnUtdr8QVuP8pr&#xA;sqoaTb6fqUF9Nf3OsPqB1HU4VkgudWht1SG/nihVfQdLdVSNFXbw33rmJrSY4ZyiakIyI94DOG8g&#xA;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&#xA;k69CAwo2+Kq+h/lL5U0O9tr3TLKaG4tHmlgZr68lHO5iSGUukszrJySJB8YNKAjffFW738stMv7/&#xA;AFKW9iMlpqU9tqBjjllt5ob+1jEIuIZ4HjkQmJIx8JB2O55YqoXv5NeSb29mvJ9MkE08RglWK8u4&#xA;YvTa1FkQIYpkjWtsixkha0GKopvyt8sSNMZrKScXGmro06T3d1Mj2KfZiZJJWUkVJ5051JPKpOKo&#xA;O9/JfyZe+ibmzumeCIwrIupagkjI0qzn1XS4VpWMkaNyck/Cu/wrRVERfljplrNYR6fCLXTrXUZd&#xA;ZuLbnJIZbx0ZUPKR34IrSF+K7cgKACuKquuflf5b1zWI9Y1G1nbUoVVYbiG9u7Yp6YcIyrbzRKrq&#xA;JnAcDkOR3xVBRfkt5KiijijsblIYufpxDUb8IDLb/VZGC/WOPJ4TxZup69d8VROg/lP5V0G/gv8A&#xA;SrOeG6tvX9JnvryZf9K4euWSWZ0YyGJCxYHdQeoGKoPUvyR8kaleXl5eWV3JPfyzTXdNT1FEd7hV&#xA;Sb92lyqAOkaIVApxVV6ADFV8/wCS/kue+nv5bG5N7c19W5Go36yVLpISjLcAoS8aklKficVTbQfy&#xA;/wBB0C6uLnSbH6tLcgK49WR0RAa8IY5HZIVJ3KxhQe+KsmkS6+qcLd0iuAFCvIhkQUpWqq0ZO3+V&#xA;irzr0db/AOV38frdt9a/wzX1fq0np+n9f+z6fr15V/a5/R3xV6XirsVdirFvIK2AtdSMNv6d2dU1&#xA;X6zP6DJ6n+5O54/vSoWSg8GNMVZTirsVdirsVQ2qf8cy7/4wyf8AEDluH64+8IPJE5Ul2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvKvT8vf8AK7qfo79x/h+vpfUZf96Pr/8Ae+n6&#xA;Ven+7KU98Veq4q7FXYqxvyK12dOvVkjjW3Gqat6MiyFnb/cnc8uSFFC07UY4qyRiFBJrQb7Ak/cM&#xA;VQ639szFFLMy/aUI5I+YpiqpFcwy19NqlftLuCPmDviqn9ftvU9Orep/Jwev3UxVRv7mCTT7xFb4&#xA;xDJVCCrfYPY0OW4frj7wg8kTPdwQf3pKg9+LEfeBTKkrWvrZU5sWCfzFHA396YqumuoIVDSEhTuG&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:4FEC6D303C74E21184C48EDC2BFF965C</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:50EC6D303C74E21184C48EDC2BFF965C</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:4EEC6D303C74E21184C48EDC2BFF965C</stRef:instanceID>
            <stRef:documentID>uuid:4DEC6D303C74E21184C48EDC2BFF965C</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>True</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Euclid-Italic</stFnt:fontName>
                  <stFnt:fontFamily>Euclid</stFnt:fontFamily>
                  <stFnt:fontFace>Italic</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>February 1999; version 1.5</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>euclidi.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Euclid</stFnt:fontName>
                  <stFnt:fontFamily>Euclid</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>February 1999; version 1.5</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>euclid.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Euclid-Bold</stFnt:fontName>
                  <stFnt:fontFamily>Euclid</stFnt:fontFamily>
                  <stFnt:fontFace>Bold</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>February 1999; version 1.5</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>euclidb.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -432.771 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 432.771 li
398.147 432.771 li
398.147 0 li
cp
clp
[1 0 0 1 0 0 ]ct
380.331 320.598 mo
129.33 320.598 li
129.33 298.593 li
380.331 298.593 li
380.331 320.598 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.929412 .929412 .929412 rgb
f
322.497 117.594 mo
115.497 117.594 li
115.497 95.598 li
322.497 95.598 li
322.497 117.594 li
1 .974164 .751972 rgb
f
51.894 10.611 mo
43.398 10.611 li
43.398 10.863 li
51.894 10.863 li
51.894 10.611 li
51.894 10.611 mo
43.398 10.611 li
43.398 10.863 li
51.894 10.863 li
51.894 10.611 li
47.646 20.106 mo
43.398 20.106 li
43.398 20.358 li
47.646 20.358 li
47.646 20.106 li
47.646 29.61 mo
43.398 29.61 li
43.398 29.862 li
47.646 29.862 li
47.646 29.61 li
47.646 39.357 mo
43.398 39.357 li
43.398 39.609 li
47.646 39.609 li
47.646 39.357 li
47.646 48.861 mo
43.398 48.861 li
43.398 49.113 li
47.646 49.113 li
47.646 48.861 li
47.646 58.356 mo
43.398 58.356 li
43.398 58.608 li
47.646 58.608 li
47.646 58.356 li
47.646 67.86 mo
43.398 67.86 li
43.398 68.112 li
47.646 68.112 li
47.646 67.86 li
47.646 77.355 mo
43.398 77.355 li
43.398 77.607 li
47.646 77.607 li
47.646 77.355 li
51.894 87.111 mo
43.398 87.111 li
43.398 87.363 li
51.894 87.363 li
51.894 87.111 li
47.646 96.606 mo
43.398 96.606 li
43.398 96.858 li
47.646 96.858 li
47.646 96.606 li
47.646 106.11 mo
43.398 106.11 li
43.398 106.362 li
47.646 106.362 li
47.646 106.11 li
47.646 115.605 mo
43.398 115.605 li
43.398 115.857 li
47.646 115.857 li
47.646 115.605 li
47.646 125.361 mo
43.398 125.361 li
43.398 125.613 li
47.646 125.613 li
47.646 125.361 li
47.646 134.856 mo
43.398 134.856 li
43.398 135.108 li
47.646 135.108 li
47.646 134.856 li
47.646 144.36 mo
43.398 144.36 li
43.398 144.612 li
47.646 144.612 li
47.646 144.36 li
47.646 153.855 mo
43.398 153.855 li
43.398 154.107 li
47.646 154.107 li
47.646 153.855 li
51.894 163.359 mo
43.398 163.359 li
43.398 163.611 li
51.894 163.611 li
51.894 163.359 li
47.646 173.106 mo
43.398 173.106 li
43.398 173.358 li
47.646 173.358 li
47.646 173.106 li
47.646 182.61 mo
43.398 182.61 li
43.398 182.862 li
47.646 182.862 li
47.646 182.61 li
47.646 192.105 mo
43.398 192.105 li
43.398 192.357 li
47.646 192.357 li
47.646 192.105 li
47.646 201.609 mo
43.398 201.609 li
43.398 201.861 li
47.646 201.861 li
47.646 201.609 li
47.646 211.113 mo
43.398 211.113 li
43.398 211.356 li
47.646 211.356 li
47.646 211.113 li
47.646 220.86 mo
43.398 220.86 li
43.398 221.112 li
47.646 221.112 li
47.646 220.86 li
47.646 230.355 mo
43.398 230.355 li
43.398 230.607 li
47.646 230.607 li
47.646 230.355 li
51.894 239.859 mo
43.398 239.859 li
43.398 240.111 li
51.894 240.111 li
51.894 239.859 li
47.646 249.363 mo
43.398 249.363 li
43.398 249.606 li
47.646 249.606 li
47.646 249.363 li
47.646 259.11 mo
43.398 259.11 li
43.398 259.362 li
47.646 259.362 li
47.646 259.11 li
47.646 268.605 mo
43.398 268.605 li
43.398 268.857 li
47.646 268.857 li
47.646 268.605 li
47.646 278.109 mo
43.398 278.109 li
43.398 278.361 li
47.646 278.361 li
47.646 278.109 li
47.646 287.613 mo
43.398 287.613 li
43.398 287.856 li
47.646 287.856 li
47.646 287.613 li
47.646 297.108 mo
43.398 297.108 li
43.398 297.36 li
47.646 297.36 li
47.646 297.108 li
47.646 306.855 mo
43.398 306.855 li
43.398 307.107 li
47.646 307.107 li
47.646 306.855 li
51.894 316.359 mo
43.398 316.359 li
43.398 316.611 li
51.894 316.611 li
51.894 316.359 li
47.646 325.863 mo
43.398 325.863 li
43.398 326.106 li
47.646 326.106 li
47.646 325.863 li
47.646 335.358 mo
43.398 335.358 li
43.398 335.61 li
47.646 335.61 li
47.646 335.358 li
47.646 344.862 mo
43.398 344.862 li
43.398 345.105 li
47.646 345.105 li
47.646 344.862 li
47.646 354.609 mo
43.398 354.609 li
43.398 354.861 li
47.646 354.861 li
47.646 354.609 li
47.646 364.113 mo
43.398 364.113 li
43.398 364.356 li
47.646 364.356 li
47.646 364.113 li
47.646 373.608 mo
43.398 373.608 li
43.398 373.86 li
47.646 373.86 li
47.646 373.608 li
47.646 383.112 mo
43.398 383.112 li
43.398 383.355 li
47.646 383.355 li
47.646 383.112 li
51.894 392.859 mo
43.398 392.859 li
43.398 393.111 li
51.894 393.111 li
51.894 392.859 li
43.524 392.985 mo
43.524 2.988 li
43.272 2.988 li
43.272 392.985 li
43.524 392.985 li
0 0 0 rgb
f
%ADOBeginSubsetFont: Euclid Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /Euclid def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
def
/FontBBox {-40 -252 1026 898} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
8 dict dup begin
/.notdef <1C60D8A8C9B5EE31F4> |-
/period <1C60D8A8C9B854D0F4777D328417EA82068F344C48BCA1F161AD7F0
E5F62D79DBEEEB35B8A910A912A4AB4CA9EDA9D4BE5A8388DAF40ECCA50C47B8
1BE330CA3BED4A25870F5> |-
/zero <1C60D8A8C9B7A73DB6EC90BAC169A0E3792238491ED9BF3959CB85FDB
F53DDB4A738239EF7E5EB5E723086C65A976FEFE61B3D79BB5150CBBA50EFAC2
44B23BD3AE36AA7FDF5832319531F29066A3AE2BFF7D6028E22DACDD11BC1A91
AC554381BC726955D5BF306B56768CF9ACD8A6A2A1E5FD66FF7699CEFD54F1AC
53E25187E990DF1725151F6EAB4EC8EDC4A80ED5A05052CE869A7E418E8F7A94
DEBF81756017B9B5BB480DFAFEEC1B4DD3F29B224B666FBE992CED3BE3A256ED
AF18CB1379F18D7F5C61FF99462FB766EC528A5916D5DC7A92DE139A7C686A29
A84EF7D6FADB6EBA78EAF08335216ADE01A2AC7C03A9FFBC82B7D1473C727D65
5DFBD858E9AE46EF5F5E1F663ED4E5E42F91823D8C0AC7A4B48CB90CDC75671D
DE802024561EA86830BDF7C67E36037> |-
/one <1C60D8A8C9B7A73DA4217147C01B74641ED7307F7D83D0E936BF23653D
097C8457820104F05F123D7B325D5CF2B91834DD3EF06A8A9816387770936FAC
01C1452DB378C5F031556EC097EBBFC6467829A38952439CE57E96A98287A99C
C28F8345FF9A4887C8F25AF95DC6B780A11427C2B22F856912F681971CC552A5
4C25A8C83ACC3DB0470DEBA3835172CC74D0EC02479BE9205A9ABFB6> |-
/two <1C60D8A8C9B7A73DB682F81EA478F19F283935D6A3DA24FE5C201A04B3
4042C554464363E51769CEC3D1EA7CE117AE44CBDBFEB4E5F2D49F35D3BABEE7
BF21227CD02A4038BB735E6C67287E26C465F39465F81369069A3B9918D10392
FF7353DD32753D1E5A3B1B489AA772B911CF8557B3B675659A96E1C0176B7320
C2DCA7EEBC3E4ABABC44656EDFF847401B568F2316889DD55F82833D80EF3C4B
1E908AF7A042B1C642DF1F87FA0F14D7045E9B441F1CEEABF72D11638858DC5F
E1FB5DB378C883C03FB86EFE136BB0AC6AEB9BB71FC5A17176075AF13D382509
95C114FFE4756CDBC0D194FB0824FDA6F1D2FBC2CA2B3033DB316EE11970414C
F97CCFE058C162D9FC2C6F8D4E5FA4AB2852CE1D16E118DBF5E0FD0BA4B12C30
168FF56D14F275F261BD04128245FFE716CE71FB> |-
/four <1C60D8A8C9B7A73DB6BC45BDB48C550A3AFDF03C5A2228EF36973384C
D743BB2CD60CF8B9B9E7E2F94D5063061AF3EBFC8460CA5A5F391B35D1F8358A
1BB810DE5F7894BB445F44358E89B704B505ABCDF22CA7A824240BC1E7063AFB
041736B72282D853DF2744616D78A6F8C9EA747786C36ED25253FE235FF4DDC5
B1A231D89A7A7> |-
/six <1C60D8A8C9B7A73DB6F55FEA080E51BA6F96629EF653F477337BB383A8
F5DACA978AE894883DD60C855EE84F2D538B0B1C92F2550F2C499BA81040E6C5
651CDBB4CE8FCEAA14CAF2E9CF28CF35A3976CE00D16A7B689DD4FADA90C4516
4F2B438D7AC86E47C6C0A7C7803966A229FEE29A6BEC7A7A9D2F692F766B8880
0CAE9065C5FF0681DD650F51998866C366D18AC5C6831DB3458E61F3C2BAE2A0
7E7A9B44218889DC094E31F8E0A518254F8F668C6FACF2EB418B204610BE199C
AC48BEF6D06BBCA518972AFDDF770635107BF4297DAF87D37647D56C26A98D8E
1BA0A2754C2341E55C88FCBAD27E9C1689F7A91D540BDC0E57CE3A640D291C75
4D5EE15212E0F8C0AF3491C9C258A9568009C2E4F9938CF097BF67C3EAD4DC1D
FC96D9C4DD38E9ED3A48B782BDDA01C06F6AFBD5021697D7381913B6582A0915
272B4B65C1191922EAE8A130AEAD53C353AD7CC6B61CBD52124EE01E7ECCE32D
BF5EF745B811CE99F8> |-
/eight <1C60D8A8C9B7A73DB6F69F00C4D80551E41D8AE22F1078D4EBED9827
92973B7AA3D9BAE260FA49704145307FC1D4B625969B178EC8277D18478D90C0
3AB610DACE6F9904F0CB2B359894B02816537DEDD9D1F0A69F427E973BE7D52C
3A8A74C1462E4AA2F6C2B35CB08F23CC9158A44967DD876C446D22705763CE79
E48015B64BC5EA84769FE111B21271F1ACAB187E768E14ABD9607607F63C10C5
CA39AB450ABBB4FE061FADDB071547EFF8B1E54E76E93F6E14880500F6496767
0ABDE5496CF483523762DDBF9752FBC58086B43DE535493E3689C2A6E573570A
ACDC5198FA96FA06329BC7826CB086C8C089F1224E3578BA96815E1C78412C2F
22D5E701FFF6B69CAD70E9C51731299AA4982B39E4A9B307B858B93CE81C171B
E69074F23A72BE7C9EEE0E3F38ADD45F7125175A1A66873AA66982308C5FE78C
53DA71E2A9D657F7CE8E95CEDC411FB285F2EB53E3BECF9B2793DE98E0E2D0B5
5725894DE425EDC3289EFF22CBC7A38FCA47E7D3B163DFB23CAC84016D2EDC6C
9F8AB038F448C7AFE06EDA162ADB84EA58CDB557CFEB> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/NDGFLL+Euclid /Euclid findfont ct_VMDictPut
/NDGFLL+Euclid*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four 
/.notdef /six /.notdef /eight 199{/.notdef}rp]
NDGFLL+Euclid nf
NDGFLL+Euclid*1 [14 0 0 -14 0 0 ]msf
22.6372 397.485 mo
(0.6)
[7 3.89209 0 ]xsh
22.6372 321.235 mo
(0.8)
[7 3.89209 0 ]xsh
32.7153 244.735 mo
(1)sh
22.6372 168.232 mo
(1.2)
[7 3.89209 0 ]xsh
22.6372 91.7324 mo
(1.4)
[7 3.89209 0 ]xsh
22.6372 15.4824 mo
(1.6)
[7 3.89209 0 ]xsh
.25 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
91.647 384.484 mo
91.647 392.984 li
84.397 388.734 mo
84.397 392.984 li
76.147 388.734 mo
76.147 392.984 li
66.897 388.734 mo
66.897 392.984 li
56.147 388.734 mo
56.147 392.984 li
43.397 388.734 mo
43.397 392.984 li
43.397 392.984 mo
397.647 392.984 li
@
NDGFLL+Euclid*1 [14 0 0 -14 0 0 ]msf
88.0532 411.732 mo
(1)sh
252.397 384.484 mo
252.397 392.984 li
245.147 388.734 mo
245.147 392.984 li
236.897 388.734 mo
236.897 392.984 li
227.647 388.734 mo
227.647 392.984 li
216.897 388.734 mo
216.897 392.984 li
204.147 388.734 mo
204.147 392.984 li
188.647 388.734 mo
188.647 392.984 li
168.397 388.734 mo
168.397 392.984 li
140.147 388.734 mo
140.147 392.984 li
@
NDGFLL+Euclid*1 [14 0 0 -14 0 0 ]msf
245.215 411.732 mo
(10)
[7 0 ]xsh
388.521 7.236 mo
388.521 2.988 li
388.269 2.988 li
388.269 7.236 li
388.521 7.236 li
377.775 7.236 mo
377.775 2.988 li
377.523 2.988 li
377.523 7.236 li
377.775 7.236 li
365.022 7.236 mo
365.022 2.988 li
364.77 2.988 li
364.77 7.236 li
365.022 7.236 li
349.524 7.236 mo
349.524 2.988 li
349.272 2.988 li
349.272 7.236 li
349.524 7.236 li
329.274 7.236 mo
329.274 2.988 li
329.022 2.988 li
329.022 7.236 li
329.274 7.236 li
301.023 7.236 mo
301.023 2.988 li
300.771 2.988 li
300.771 7.236 li
301.023 7.236 li
252.522 11.484 mo
252.522 2.988 li
252.27 2.988 li
252.27 11.484 li
252.522 11.484 li
245.268 7.236 mo
245.268 2.988 li
245.025 2.988 li
245.025 7.236 li
245.268 7.236 li
237.024 7.236 mo
237.024 2.988 li
236.772 2.988 li
236.772 7.236 li
237.024 7.236 li
227.772 7.236 mo
227.772 2.988 li
227.52 2.988 li
227.52 7.236 li
227.772 7.236 li
217.026 7.236 mo
217.026 2.988 li
216.774 2.988 li
216.774 7.236 li
217.026 7.236 li
204.273 7.236 mo
204.273 2.988 li
204.021 2.988 li
204.021 7.236 li
204.273 7.236 li
188.775 7.236 mo
188.775 2.988 li
188.523 2.988 li
188.523 7.236 li
188.775 7.236 li
168.525 7.236 mo
168.525 2.988 li
168.273 2.988 li
168.273 7.236 li
168.525 7.236 li
140.274 7.236 mo
140.274 2.988 li
140.022 2.988 li
140.022 7.236 li
140.274 7.236 li
91.773 11.484 mo
91.773 2.988 li
91.521 2.988 li
91.521 11.484 li
91.773 11.484 li
84.519 7.236 mo
84.519 2.988 li
84.276 2.988 li
84.276 7.236 li
84.519 7.236 li
76.275 7.236 mo
76.275 2.988 li
76.023 2.988 li
76.023 7.236 li
76.275 7.236 li
67.023 7.236 mo
67.023 2.988 li
66.771 2.988 li
66.771 7.236 li
67.023 7.236 li
56.268 7.236 mo
56.268 2.988 li
56.025 2.988 li
56.025 7.236 li
56.268 7.236 li
43.524 7.236 mo
43.524 2.988 li
43.272 2.988 li
43.272 7.236 li
43.524 7.236 li
43.398 3.105 mo
397.647 3.105 li
397.647 2.862 li
43.398 2.862 li
43.398 3.105 li
389.151 10.863 mo
397.647 10.863 li
397.647 10.611 li
389.151 10.611 li
389.151 10.863 li
389.151 10.863 mo
397.647 10.863 li
397.647 10.611 li
389.151 10.611 li
389.151 10.863 li
393.399 20.358 mo
397.647 20.358 li
397.647 20.106 li
393.399 20.106 li
393.399 20.358 li
393.399 29.862 mo
397.647 29.862 li
397.647 29.61 li
393.399 29.61 li
393.399 29.862 li
393.399 39.609 mo
397.647 39.609 li
397.647 39.357 li
393.399 39.357 li
393.399 39.609 li
393.399 49.113 mo
397.647 49.113 li
397.647 48.861 li
393.399 48.861 li
393.399 49.113 li
393.399 58.608 mo
397.647 58.608 li
397.647 58.356 li
393.399 58.356 li
393.399 58.608 li
393.399 68.112 mo
397.647 68.112 li
397.647 67.86 li
393.399 67.86 li
393.399 68.112 li
393.399 77.607 mo
397.647 77.607 li
397.647 77.355 li
393.399 77.355 li
393.399 77.607 li
389.151 87.363 mo
397.647 87.363 li
397.647 87.111 li
389.151 87.111 li
389.151 87.363 li
393.399 96.858 mo
397.647 96.858 li
397.647 96.606 li
393.399 96.606 li
393.399 96.858 li
393.399 106.362 mo
397.647 106.362 li
397.647 106.11 li
393.399 106.11 li
393.399 106.362 li
393.399 115.857 mo
397.647 115.857 li
397.647 115.605 li
393.399 115.605 li
393.399 115.857 li
393.399 125.613 mo
397.647 125.613 li
397.647 125.361 li
393.399 125.361 li
393.399 125.613 li
393.399 135.108 mo
397.647 135.108 li
397.647 134.856 li
393.399 134.856 li
393.399 135.108 li
393.399 144.612 mo
397.647 144.612 li
397.647 144.36 li
393.399 144.36 li
393.399 144.612 li
393.399 154.107 mo
397.647 154.107 li
397.647 153.855 li
393.399 153.855 li
393.399 154.107 li
389.151 163.611 mo
397.647 163.611 li
397.647 163.359 li
389.151 163.359 li
389.151 163.611 li
393.399 173.358 mo
397.647 173.358 li
397.647 173.106 li
393.399 173.106 li
393.399 173.358 li
393.399 182.862 mo
397.647 182.862 li
397.647 182.61 li
393.399 182.61 li
393.399 182.862 li
393.399 192.357 mo
397.647 192.357 li
397.647 192.105 li
393.399 192.105 li
393.399 192.357 li
393.399 201.861 mo
397.647 201.861 li
397.647 201.609 li
393.399 201.609 li
393.399 201.861 li
393.399 211.356 mo
397.647 211.356 li
397.647 211.113 li
393.399 211.113 li
393.399 211.356 li
393.399 221.112 mo
397.647 221.112 li
397.647 220.86 li
393.399 220.86 li
393.399 221.112 li
393.399 230.607 mo
397.647 230.607 li
397.647 230.355 li
393.399 230.355 li
393.399 230.607 li
389.151 240.111 mo
397.647 240.111 li
397.647 239.859 li
389.151 239.859 li
389.151 240.111 li
393.399 249.606 mo
397.647 249.606 li
397.647 249.363 li
393.399 249.363 li
393.399 249.606 li
393.399 259.362 mo
397.647 259.362 li
397.647 259.11 li
393.399 259.11 li
393.399 259.362 li
393.399 268.857 mo
397.647 268.857 li
397.647 268.605 li
393.399 268.605 li
393.399 268.857 li
393.399 278.361 mo
397.647 278.361 li
397.647 278.109 li
393.399 278.109 li
393.399 278.361 li
393.399 287.856 mo
397.647 287.856 li
397.647 287.613 li
393.399 287.613 li
393.399 287.856 li
393.399 297.36 mo
397.647 297.36 li
397.647 297.108 li
393.399 297.108 li
393.399 297.36 li
393.399 307.107 mo
397.647 307.107 li
397.647 306.855 li
393.399 306.855 li
393.399 307.107 li
389.151 316.611 mo
397.647 316.611 li
397.647 316.359 li
389.151 316.359 li
389.151 316.611 li
393.399 326.106 mo
397.647 326.106 li
397.647 325.863 li
393.399 325.863 li
393.399 326.106 li
393.399 335.61 mo
397.647 335.61 li
397.647 335.358 li
393.399 335.358 li
393.399 335.61 li
393.399 345.105 mo
397.647 345.105 li
397.647 344.862 li
393.399 344.862 li
393.399 345.105 li
393.399 354.861 mo
397.647 354.861 li
397.647 354.609 li
393.399 354.609 li
393.399 354.861 li
393.399 364.356 mo
397.647 364.356 li
397.647 364.113 li
393.399 364.113 li
393.399 364.356 li
393.399 373.86 mo
397.647 373.86 li
397.647 373.608 li
393.399 373.608 li
393.399 373.86 li
393.399 383.355 mo
397.647 383.355 li
397.647 383.112 li
393.399 383.112 li
393.399 383.355 li
389.151 393.111 mo
397.647 393.111 li
397.647 392.859 li
389.151 392.859 li
389.151 393.111 li
397.773 392.985 mo
397.773 2.988 li
397.521 2.988 li
397.521 392.985 li
397.773 392.985 li
388.269 388.737 mo
388.269 392.985 li
388.521 392.985 li
388.521 388.737 li
388.269 388.737 li
377.523 388.737 mo
377.523 392.985 li
377.775 392.985 li
377.775 388.737 li
377.523 388.737 li
364.77 388.737 mo
364.77 392.985 li
365.022 392.985 li
365.022 388.737 li
364.77 388.737 li
349.272 388.737 mo
349.272 392.985 li
349.524 392.985 li
349.524 388.737 li
349.272 388.737 li
329.022 388.737 mo
329.022 392.985 li
329.274 392.985 li
329.274 388.737 li
329.022 388.737 li
300.771 388.737 mo
300.771 392.985 li
301.023 392.985 li
301.023 388.737 li
300.771 388.737 li
f
gsave
43.398 392.985 mo
43.398 2.988 li
397.647 2.988 li
397.647 392.985 li
43.398 392.985 li
clp
43.398 281.232 mo
43.398 236.988 li
397.647 236.988 li
397.647 281.232 li
43.398 281.232 li
.917647 .917647 .917647 rgb
ef
43.398 281.232 mo
43.893 281.232 li
43.893 237.483 li
397.143 237.483 li
397.143 280.737 li
43.398 280.737 li
43.398 281.232 li
43.893 281.232 li
43.398 281.232 li
43.398 281.736 li
398.151 281.736 li
398.151 236.484 li
42.894 236.484 li
42.894 281.736 li
43.398 281.736 li
43.398 281.232 li
0 .2 .4 rgb
f
43.398 281.232 mo
43.524 281.232 li
43.524 237.105 li
397.521 237.105 li
397.521 281.106 li
43.398 281.106 li
43.398 281.232 li
43.524 281.232 li
43.398 281.232 li
43.398 281.358 li
397.773 281.358 li
397.773 236.862 li
43.272 236.862 li
43.272 281.358 li
43.398 281.358 li
43.398 281.232 li
.917647 .917647 .917647 rgb
f
247.383 236.484 mo
115.334 236.484 li
115.299 236.439 li
111.807 231.453 li
108.324 226.215 li
104.58 219.987 li
101.097 213.264 li
97.605 205.776 li
93.861 197.541 li
90.369 188.316 li
86.868 178.074 li
83.124 166.842 li
79.632 154.107 li
76.131 140.112 li
72.387 124.623 li
68.886 107.388 li
65.385 88.146 li
61.641 66.654 li
58.14 43.164 li
54.639 16.668 li
52.9361 3.483 li
56.025 3.483 li
56.025 7.236 li
56.268 7.236 li
56.268 3.483 li
60.75 3.483 li
64.404 18.828 li
67.905 40.572 li
71.406 60.084 li
75.159 77.589 li
78.66 93.6 li
82.161 107.865 li
85.914 120.627 li
89.424 132.39 li
92.925 142.659 li
96.687 152.172 li
100.188 160.686 li
103.698 168.21 li
107.46 175.23 li
110.97 181.242 li
114.48 187.011 li
117.999 192.042 li
121.77 196.56 li
125.28 200.574 li
128.799 204.093 li
132.561 207.603 li
136.089 210.627 li
139.617 213.147 li
143.388 215.658 li
146.898 217.665 li
150.417 219.681 li
154.179 221.436 li
157.698 223.191 li
161.235 224.46 li
164.988 225.711 li
168.498 226.962 li
172.017 227.97 li
175.779 228.969 li
179.289 229.725 li
182.799 230.472 li
186.543 231.228 li
190.062 231.975 li
193.572 232.479 li
197.082 232.983 li
200.844 233.478 li
204.345 233.73 li
207.846 234.234 li
211.608 234.486 li
215.109 234.729 li
218.619 234.981 li
222.363 235.233 li
225.864 235.485 li
229.365 235.737 li
233.127 235.98 li
236.628 235.98 li
240.129 236.232 li
243.882 236.232 li
247.383 236.484 li
1 1 .321569 rgb
f
56.268 7.236 mo
56.025 7.236 li
56.025 3.483 li
56.268 3.483 li
56.268 7.236 li
.678431 .678431 0 rgb
f
397.143 280.737 mo
304.668 280.737 li
301.167 280.485 li
275.913 280.485 li
272.412 280.233 li
258.165 280.233 li
254.664 279.981 li
247.419 279.981 li
243.918 279.738 li
240.165 279.738 li
236.664 279.486 li
233.163 279.486 li
229.428 279.234 li
225.918 278.982 li
222.417 278.982 li
218.691 278.739 li
215.181 278.487 li
211.68 278.235 li
207.945 277.983 li
204.453 277.488 li
200.952 277.236 li
197.217 276.741 li
193.716 276.237 li
190.215 275.742 li
186.714 275.238 li
182.979 274.743 li
179.505 273.996 li
176.004 273.249 li
172.269 272.502 li
168.786 271.503 li
165.276 270.504 li
161.55 269.505 li
158.076 268.272 li
154.584 266.769 li
150.849 265.275 li
147.384 263.547 li
143.892 261.549 li
140.157 259.56 li
136.692 257.076 li
133.2 254.583 li
129.474 251.604 li
125.991 248.373 li
122.508 244.89 li
118.773 240.912 li
116.11 237.483 li
333.378 237.483 li
397.143 237.483 li
397.143 280.737 li
.972549 .972549 .294118 rgb
f
333.378 237.483 mo
116.11 237.483 li
115.816 237.105 li
284.817 237.105 li
286.632 237.231 li
329.634 237.231 li
333.378 237.483 li
267.129 236.862 mo
115.628 236.862 li
115.334 236.484 li
247.383 236.484 li
254.628 236.484 li
258.129 236.736 li
265.383 236.736 li
267.129 236.862 li
.678431 .741176 .129412 rgb
f
284.817 237.105 mo
115.816 237.105 li
115.628 236.862 li
267.129 236.862 li
268.875 236.988 li
283.131 236.988 li
284.817 237.105 li
.972549 .972549 .294118 rgb
f
333.414 236.484 mo
247.383 236.484 li
243.882 236.232 li
240.129 236.232 li
236.628 235.98 li
233.127 235.98 li
229.365 235.737 li
225.864 235.485 li
222.363 235.233 li
218.619 234.981 li
215.109 234.729 li
211.608 234.486 li
207.846 234.234 li
204.345 233.73 li
200.844 233.478 li
197.082 232.983 li
193.572 232.479 li
190.062 231.975 li
186.543 231.228 li
182.799 230.472 li
179.289 229.725 li
175.779 228.969 li
172.017 227.97 li
168.498 226.962 li
164.988 225.711 li
161.235 224.46 li
157.698 223.191 li
154.179 221.436 li
150.417 219.681 li
146.898 217.665 li
143.388 215.658 li
139.617 213.147 li
136.089 210.627 li
132.561 207.603 li
128.799 204.093 li
125.28 200.574 li
121.77 196.56 li
117.999 192.042 li
114.48 187.011 li
110.97 181.242 li
107.46 175.23 li
103.698 168.21 li
100.188 160.686 li
96.687 152.172 li
92.925 142.659 li
89.424 132.39 li
85.914 120.627 li
82.161 107.865 li
78.66 93.6 li
75.159 77.589 li
71.406 60.084 li
67.905 40.572 li
64.404 18.828 li
60.75 3.483 li
56.268 3.483 li
56.268 3.105 li
61.6897 3.105 li
65.385 18.639 li
68.886 40.401 li
72.387 59.886 li
76.14 77.382 li
79.632 93.375 li
83.133 107.604 li
86.877 120.348 li
90.369 132.084 li
93.87 142.308 li
97.614 151.794 li
101.106 160.281 li
104.598 167.76 li
108.333 174.744 li
111.825 180.729 li
115.317 186.462 li
118.791 191.43 li
122.526 195.912 li
126.009 199.89 li
129.492 203.373 li
133.227 206.865 li
136.71 209.844 li
140.184 212.319 li
143.91 214.812 li
147.393 216.801 li
150.876 218.79 li
154.611 220.536 li
158.094 222.273 li
161.559 223.515 li
165.312 224.757 li
168.804 226.008 li
172.278 226.998 li
176.013 227.997 li
179.505 228.744 li
182.997 229.491 li
186.75 230.247 li
190.233 230.994 li
193.716 231.489 li
197.217 231.993 li
200.952 232.488 li
204.453 232.74 li
207.945 233.235 li
211.68 233.487 li
215.181 233.739 li
218.682 233.982 li
222.435 234.234 li
225.936 234.486 li
229.428 234.738 li
233.163 234.981 li
236.664 234.981 li
240.165 235.233 li
243.918 235.233 li
247.419 235.485 li
254.664 235.485 li
258.165 235.737 li
265.419 235.737 li
268.911 235.98 li
283.167 235.98 li
286.668 236.232 li
329.661 236.232 li
333.414 236.484 li
115.334 236.484 mo
114.114 236.484 li
110.988 232.02 li
107.478 226.755 li
103.707 220.482 li
100.197 213.705 li
96.696 206.19 li
92.934 197.928 li
89.424 188.658 li
85.923 178.398 li
82.17 167.13 li
78.66 154.359 li
75.159 140.355 li
71.406 124.839 li
67.905 107.577 li
64.404 88.326 li
60.651 66.816 li
57.15 43.308 li
53.649 16.803 li
51.9256 3.483 li
43.524 3.483 li
43.524 3.105 li
56.025 3.105 li
56.025 3.483 li
52.9361 3.483 li
54.639 16.668 li
58.14 43.164 li
61.641 66.654 li
65.385 88.146 li
68.886 107.388 li
72.387 124.623 li
76.131 140.112 li
79.632 154.107 li
83.124 166.842 li
86.868 178.074 li
90.369 188.316 li
93.861 197.541 li
97.605 205.776 li
101.097 213.264 li
104.58 219.987 li
108.324 226.215 li
111.807 231.453 li
115.299 236.439 li
115.334 236.484 li
1 .864314 .321569 rgb
f
56.268 3.483 mo
56.025 3.483 li
56.025 3.105 li
43.524 3.105 li
43.524 3.483 li
43.398 3.483 li
43.398 2.988 li
61.6619 2.988 li
61.6897 3.105 li
56.268 3.105 li
56.268 3.483 li
.678431 .541176 0 rgb
f
397.647 281.736 mo
304.632 281.736 li
301.131 281.484 li
275.877 281.484 li
274.126 281.358 li
397.647 281.358 li
397.647 281.736 li
397.647 236.862 mo
267.129 236.862 li
265.383 236.736 li
258.129 236.736 li
254.628 236.484 li
247.383 236.484 li
333.414 236.484 li
397.647 236.484 li
397.647 236.862 li
.678431 .607843 .129412 rgb
f
397.647 281.358 mo
274.126 281.358 li
272.376 281.232 li
258.129 281.232 li
256.379 281.106 li
397.521 281.106 li
397.521 237.105 li
284.817 237.105 li
283.131 236.988 li
268.875 236.988 li
267.129 236.862 li
397.647 236.862 li
397.647 281.358 li
.972549 .839216 .294118 rgb
f
304.668 280.737 mo
240.129 280.737 li
236.628 280.485 li
233.127 280.485 li
229.365 280.233 li
225.882 279.981 li
222.381 279.981 li
218.61 279.729 li
215.109 279.486 li
211.617 279.234 li
207.846 278.982 li
204.345 278.478 li
200.844 278.235 li
197.082 277.731 li
193.572 277.227 li
190.08 276.732 li
186.579 276.228 li
182.808 275.724 li
179.289 274.977 li
175.797 274.221 li
172.026 273.474 li
168.507 272.466 li
165.015 271.467 li
161.244 270.459 li
157.716 269.199 li
154.206 267.696 li
150.444 266.193 li
146.907 264.429 li
143.406 262.422 li
139.635 260.406 li
136.107 257.895 li
132.597 255.384 li
128.817 252.36 li
125.298 249.093 li
121.788 245.583 li
118.017 241.56 li
114.848 237.483 li
116.11 237.483 li
118.773 240.912 li
122.508 244.89 li
125.991 248.373 li
129.474 251.604 li
133.2 254.583 li
136.692 257.076 li
140.157 259.56 li
143.892 261.549 li
147.384 263.547 li
150.849 265.275 li
154.584 266.769 li
158.076 268.272 li
161.55 269.505 li
165.276 270.504 li
168.786 271.503 li
172.269 272.502 li
176.004 273.249 li
179.505 273.996 li
182.979 274.743 li
186.714 275.238 li
190.215 275.742 li
193.716 276.237 li
197.217 276.741 li
200.952 277.236 li
204.453 277.488 li
207.945 277.983 li
211.68 278.235 li
215.181 278.487 li
218.691 278.739 li
222.417 278.982 li
225.918 278.982 li
229.428 279.234 li
233.163 279.486 li
236.664 279.486 li
240.165 279.738 li
243.918 279.738 li
247.419 279.981 li
254.664 279.981 li
258.165 280.233 li
272.412 280.233 li
275.913 280.485 li
301.167 280.485 li
304.668 280.737 li
f
397.521 281.106 mo
256.379 281.106 li
254.628 280.98 li
247.383 280.98 li
243.882 280.737 li
240.129 280.737 li
304.668 280.737 li
397.143 280.737 li
397.143 237.483 li
333.378 237.483 li
329.634 237.231 li
286.632 237.231 li
284.817 237.105 li
397.521 237.105 li
397.521 281.106 li
116.11 237.483 mo
114.848 237.483 li
114.554 237.105 li
115.816 237.105 li
116.11 237.483 li
115.628 236.862 mo
114.378 236.862 li
114.114 236.484 li
115.334 236.484 li
115.628 236.862 li
.678431 .607843 .129412 rgb
f
115.816 237.105 mo
114.554 237.105 li
114.498 237.033 li
114.378 236.862 li
115.628 236.862 li
115.816 237.105 li
.972549 .839216 .294118 rgb
f
43.397 2.98438 mo
61.147 2.98438 li
64.897 18.7344 li
68.397 40.4844 li
71.897 59.9844 li
75.647 77.4844 li
79.147 93.4844 li
82.647 107.734 li
86.397 120.484 li
89.897 132.234 li
93.397 142.484 li
97.147 151.984 li
100.647 160.484 li
104.147 167.984 li
107.897 174.984 li
111.397 180.984 li
114.897 186.734 li
118.397 191.734 li
122.147 196.234 li
125.647 200.234 li
129.147 203.734 li
132.897 207.234 li
136.397 210.234 li
139.897 212.734 li
143.647 215.234 li
147.147 217.234 li
150.647 219.234 li
154.397 220.984 li
157.897 222.734 li
161.397 223.984 li
165.147 225.234 li
168.647 226.484 li
172.147 227.484 li
175.897 228.484 li
179.397 229.234 li
182.897 229.984 li
186.647 230.734 li
190.147 231.484 li
193.647 231.984 li
197.147 232.484 li
200.897 232.984 li
204.397 233.234 li
207.897 233.734 li
211.647 233.984 li
215.147 234.234 li
218.647 234.484 li
222.397 234.734 li
225.897 234.984 li
229.397 235.234 li
233.147 235.484 li
236.647 235.484 li
240.147 235.734 li
243.897 235.734 li
247.397 235.984 li
254.647 235.984 li
258.147 236.234 li
265.397 236.234 li
268.897 236.484 li
283.147 236.484 li
286.647 236.734 li
329.647 236.734 li
333.397 236.984 li
397.647 236.984 li
397.647 281.234 li
304.647 281.234 li
301.147 280.984 li
275.897 280.984 li
272.397 280.734 li
258.147 280.734 li
254.647 280.484 li
247.397 280.484 li
243.897 280.234 li
240.147 280.234 li
236.647 279.984 li
233.147 279.984 li
229.397 279.734 li
225.897 279.484 li
222.397 279.484 li
218.647 279.234 li
215.147 278.984 li
211.647 278.734 li
207.897 278.484 li
204.397 277.984 li
200.897 277.734 li
197.147 277.234 li
193.647 276.734 li
190.147 276.234 li
186.647 275.734 li
182.897 275.234 li
179.397 274.484 li
175.897 273.734 li
172.147 272.984 li
168.647 271.984 li
165.147 270.984 li
161.397 269.984 li
157.897 268.734 li
154.397 267.234 li
150.647 265.734 li
147.147 263.984 li
143.647 261.984 li
139.897 259.984 li
136.397 257.484 li
132.897 254.984 li
129.147 251.984 li
125.647 248.734 li
122.147 245.234 li
118.397 241.234 li
114.897 236.734 li
111.397 231.734 li
107.897 226.484 li
104.147 220.234 li
100.647 213.484 li
97.147 205.984 li
93.397 197.734 li
89.897 188.484 li
86.397 178.234 li
82.647 166.984 li
79.147 154.234 li
75.647 140.234 li
71.897 124.734 li
68.397 107.484 li
64.897 88.2344 li
61.147 66.7344 li
57.647 43.2344 li
54.147 16.7344 li
50.397 -12.2656 li
46.897 -44.7656 li
43.397 -80.7656 li
43.397 2.98438 li
cp
1 1 0 rgb
@
2 lw
43.397 -126.516 mo
46.897 -88.2656 li
50.397 -53.5156 li
54.147 -22.5156 li
57.647 5.48438 li
61.147 30.7344 li
64.897 53.4844 li
68.397 73.9844 li
71.897 92.2344 li
75.647 108.984 li
79.147 123.984 li
82.647 137.234 li
86.397 149.484 li
89.897 160.234 li
93.397 170.234 li
97.147 178.984 li
100.647 186.984 li
104.147 194.234 li
107.897 200.734 li
111.397 206.484 li
114.897 211.734 li
118.397 216.484 li
122.147 220.734 li
125.647 224.484 li
129.147 227.984 li
132.897 230.984 li
136.397 233.734 li
139.897 236.234 li
143.647 238.484 li
147.147 240.734 li
150.647 242.484 li
154.397 244.234 li
157.897 245.734 li
161.397 246.984 li
165.147 248.234 li
168.647 249.234 li
172.147 250.234 li
175.897 251.234 li
179.397 251.984 li
182.897 252.734 li
186.647 253.234 li
190.147 253.984 li
193.647 254.484 li
197.147 254.734 li
200.897 255.234 li
204.397 255.734 li
207.897 255.984 li
211.647 256.234 li
215.147 256.484 li
218.647 256.734 li
222.397 256.984 li
225.897 257.234 li
229.397 257.484 li
233.147 257.734 li
236.647 257.734 li
240.147 257.984 li
243.897 257.984 li
247.397 258.234 li
254.647 258.234 li
258.147 258.484 li
268.897 258.484 li
272.397 258.734 li
290.397 258.734 li
293.897 258.984 li
397.647 258.984 li
1 0 0 rgb
@
grestore
87.897 224.734 mo
95.647 224.734 li
87.897 293.484 mo
95.647 293.484 li
91.647 255.234 mo
91.647 224.734 li
91.647 293.484 mo
91.647 262.984 li
@
87.772 257.942 mo
95.522 257.942 li
89.252 262.498 li
91.647 255.127 li
94.042 262.498 li
87.772 257.942 li
cp
f
120.647 191.484 mo
128.397 191.484 li
120.647 234.984 mo
128.397 234.984 li
124.647 209.484 mo
124.647 191.484 li
124.647 234.984 mo
124.647 216.984 li
@
120.772 211.943 mo
128.522 211.943 li
122.252 216.498 li
124.647 209.127 li
127.042 216.498 li
120.772 211.943 li
cp
f
330.647 174.984 mo
338.147 174.984 li
330.647 281.984 mo
338.147 281.984 li
334.397 216.984 mo
334.397 174.984 li
334.397 281.984 mo
334.397 224.734 li
@
330.522 219.693 mo
338.272 219.693 li
332.002 224.248 li
334.397 216.877 li
336.792 224.248 li
330.522 219.693 li
cp
f
366.147 236.234 mo
373.647 236.234 li
366.147 289.734 mo
373.647 289.734 li
369.897 259.234 mo
369.897 236.234 li
369.897 289.734 mo
369.897 266.734 li
@
366.022 261.692 mo
373.772 261.692 li
367.502 266.248 li
369.897 258.877 li
372.292 266.248 li
366.022 261.692 li
cp
f
120.647 178.984 mo
128.397 178.984 li
120.647 239.984 mo
128.397 239.984 li
124.647 205.734 mo
124.647 178.984 li
124.647 239.984 mo
124.647 213.234 li
@
120.772 208.193 mo
128.522 208.193 li
122.252 212.748 li
124.647 205.377 li
127.042 212.748 li
120.772 208.193 li
cp
f
87.897 224.734 mo
95.647 224.734 li
87.897 293.484 mo
95.647 293.484 li
91.647 255.234 mo
91.647 224.734 li
91.647 293.484 mo
91.647 262.984 li
@
87.772 257.942 mo
95.522 257.942 li
89.252 262.498 li
91.647 255.127 li
94.042 262.498 li
87.772 257.942 li
cp
f
120.647 191.484 mo
128.397 191.484 li
120.647 234.984 mo
128.397 234.984 li
124.647 209.484 mo
124.647 191.484 li
124.647 234.984 mo
124.647 216.984 li
@
120.772 211.943 mo
128.522 211.943 li
122.252 216.498 li
124.647 209.127 li
127.042 216.498 li
120.772 211.943 li
cp
f
330.647 174.984 mo
338.147 174.984 li
330.647 281.984 mo
338.147 281.984 li
334.397 216.984 mo
334.397 174.984 li
334.397 281.984 mo
334.397 224.734 li
@
330.522 219.693 mo
338.272 219.693 li
332.002 224.248 li
334.397 216.877 li
336.792 224.248 li
330.522 219.693 li
cp
f
366.147 236.234 mo
373.647 236.234 li
366.147 289.734 mo
373.647 289.734 li
369.897 259.234 mo
369.897 236.234 li
369.897 289.734 mo
369.897 266.734 li
@
366.022 261.692 mo
373.772 261.692 li
367.502 266.248 li
369.897 258.877 li
372.292 266.248 li
366.022 261.692 li
cp
f
120.647 178.984 mo
128.397 178.984 li
120.647 239.984 mo
128.397 239.984 li
124.647 205.734 mo
124.647 178.984 li
124.647 239.984 mo
124.647 213.234 li
@
120.772 208.193 mo
128.522 208.193 li
122.252 212.748 li
124.647 205.377 li
127.042 212.748 li
120.772 208.193 li
cp
f
71.397 41.2344 mo
78.897 41.2344 li
71.397 171.234 mo
78.897 171.234 li
75.147 102.484 mo
75.147 41.2344 li
75.147 171.234 mo
75.147 109.984 li
1 0 0 rgb
@
78.9619 106.194 mo
78.9619 104.055 77.2261 102.319 75.0869 102.319 cv
72.9478 102.319 71.2119 104.055 71.2119 106.194 cv
71.2119 108.333 72.9478 110.069 75.0869 110.069 cv
77.2261 110.069 78.9619 108.333 78.9619 106.194 cv
ef
59.397 29.7344 mo
67.147 29.7344 li
59.397 60.4844 mo
67.147 60.4844 li
63.147 41.2344 mo
63.147 29.7344 li
63.147 60.4844 mo
63.147 48.9844 li
@
66.9619 44.9941 mo
66.9619 42.8555 65.2261 41.1191 63.0869 41.1191 cv
60.9478 41.1191 59.2119 42.8555 59.2119 44.9941 cv
59.2119 47.1333 60.9478 48.8691 63.0869 48.8691 cv
65.2261 48.8691 66.9619 47.1333 66.9619 44.9941 cv
ef
310.647 187.484 mo
318.397 187.484 li
310.647 243.734 mo
318.397 243.734 li
314.397 216.984 mo
314.397 187.484 li
314.397 243.734 mo
314.397 224.734 li
@
318.242 220.914 mo
318.242 218.775 316.506 217.04 314.367 217.04 cv
312.228 217.04 310.492 218.775 310.492 220.914 cv
310.492 223.054 312.228 224.789 314.367 224.789 cv
316.506 224.789 318.242 223.054 318.242 220.914 cv
ef
71.397 41.2344 mo
78.897 41.2344 li
71.397 171.234 mo
78.897 171.234 li
75.147 102.484 mo
75.147 41.2344 li
75.147 171.234 mo
75.147 109.984 li
@
78.9619 106.194 mo
78.9619 104.055 77.2261 102.319 75.0869 102.319 cv
72.9478 102.319 71.2119 104.055 71.2119 106.194 cv
71.2119 108.333 72.9478 110.069 75.0869 110.069 cv
77.2261 110.069 78.9619 108.333 78.9619 106.194 cv
ef
59.397 29.7344 mo
67.147 29.7344 li
59.397 60.4844 mo
67.147 60.4844 li
63.147 41.2344 mo
63.147 29.7344 li
63.147 60.4844 mo
63.147 48.9844 li
@
66.9619 44.9941 mo
66.9619 42.8555 65.2261 41.1191 63.0869 41.1191 cv
60.9478 41.1191 59.2119 42.8555 59.2119 44.9941 cv
59.2119 47.1333 60.9478 48.8691 63.0869 48.8691 cv
65.2261 48.8691 66.9619 47.1333 66.9619 44.9941 cv
ef
310.647 187.484 mo
318.397 187.484 li
310.647 243.734 mo
318.397 243.734 li
314.397 216.984 mo
314.397 187.484 li
314.397 243.734 mo
314.397 224.734 li
@
gsave
43.398 392.985 mo
43.398 2.988 li
397.647 2.988 li
397.647 392.985 li
43.398 392.985 li
clp
318.242 220.914 mo
318.242 218.775 316.506 217.04 314.367 217.04 cv
312.228 217.04 310.492 218.775 310.492 220.914 cv
310.492 223.054 312.228 224.789 314.367 224.789 cv
316.506 224.789 318.242 223.054 318.242 220.914 cv
ef
116.147 278.234 mo
123.897 278.234 li
116.147 392.984 mo
123.897 392.984 li
0 0 1 rgb
@
grestore
116.147 144.484 mo
123.897 144.484 li
116.147 373.734 mo
123.897 373.734 li
120.147 274.484 mo
120.147 144.484 li
0 0 1 rgb
@
gsave
43.398 392.985 mo
43.398 2.988 li
397.647 2.988 li
397.647 392.985 li
43.398 392.985 li
clp
120.147 274.359 mo
116.272 274.359 li
116.272 282.109 li
124.022 282.109 li
124.022 274.359 li
120.147 274.359 li
cp
ef
116.147 278.234 mo
123.897 278.234 li
116.147 392.984 mo
123.897 392.984 li
@
grestore
116.147 144.484 mo
123.897 144.484 li
116.147 373.734 mo
123.897 373.734 li
120.147 274.484 mo
120.147 144.484 li
120.147 373.734 mo
120.147 281.984 li
@
120.147 274.359 mo
116.272 274.359 li
116.272 282.109 li
124.022 282.109 li
124.022 274.359 li
120.147 274.359 li
cp
ef
217.647 224.734 mo
225.147 224.734 li
217.647 255.234 mo
225.147 255.234 li
221.397 236.234 mo
221.397 224.734 li
221.397 255.234 mo
221.397 243.734 li
0 1 0 rgb
@
221.397 236.109 mo
217.522 243.859 li
225.272 243.859 li
221.397 236.109 li
cp
ef
116.147 144.484 mo
123.897 144.484 li
116.147 297.234 mo
123.897 297.234 li
120.147 216.984 mo
120.147 144.484 li
120.147 297.234 mo
120.147 224.734 li
@
120.147 217.109 mo
116.272 224.859 li
124.022 224.859 li
120.147 217.109 li
cp
ef
241.397 159.734 mo
248.897 159.734 li
241.397 274.484 mo
248.897 274.484 li
245.147 213.234 mo
245.147 159.734 li
245.147 274.484 mo
245.147 220.984 li
@
245.147 213.109 mo
241.272 220.859 li
249.022 220.859 li
245.147 213.109 li
cp
ef
217.647 224.734 mo
225.147 224.734 li
217.647 255.234 mo
225.147 255.234 li
221.397 236.234 mo
221.397 224.734 li
221.397 255.234 mo
221.397 243.734 li
@
221.397 236.109 mo
217.522 243.859 li
225.272 243.859 li
221.397 236.109 li
cp
ef
116.147 144.484 mo
123.897 144.484 li
116.147 297.234 mo
123.897 297.234 li
120.147 216.984 mo
120.147 144.484 li
120.147 297.234 mo
120.147 224.734 li
@
120.147 217.109 mo
116.272 224.859 li
124.022 224.859 li
120.147 217.109 li
cp
ef
241.397 159.734 mo
248.897 159.734 li
241.397 274.484 mo
248.897 274.484 li
245.147 213.234 mo
245.147 159.734 li
245.147 274.484 mo
245.147 220.984 li
@
245.147 213.109 mo
241.272 220.859 li
249.022 220.859 li
245.147 213.109 li
cp
ef
43.397 392.984 mo
43.397 2.98438 li
397.647 2.98438 li
397.647 392.984 li
43.397 392.984 li
cp
388.397 7.23438 mo
388.397 2.98438 li
377.647 7.23438 mo
377.647 2.98438 li
364.897 7.23438 mo
364.897 2.98438 li
349.397 7.23438 mo
349.397 2.98438 li
329.147 7.23438 mo
329.147 2.98438 li
300.897 7.23438 mo
300.897 2.98438 li
252.397 11.4844 mo
252.397 2.98438 li
245.147 7.23438 mo
245.147 2.98438 li
236.897 7.23438 mo
236.897 2.98438 li
227.647 7.23438 mo
227.647 2.98438 li
216.897 7.23438 mo
216.897 2.98438 li
204.147 7.23438 mo
204.147 2.98438 li
188.647 7.23438 mo
188.647 2.98438 li
168.397 7.23438 mo
168.397 2.98438 li
140.147 7.23438 mo
140.147 2.98438 li
91.647 11.4844 mo
91.647 2.98438 li
84.397 7.23438 mo
84.397 2.98438 li
76.147 7.23438 mo
76.147 2.98438 li
66.897 7.23438 mo
66.897 2.98438 li
56.147 7.23438 mo
56.147 2.98438 li
43.397 7.23438 mo
43.397 2.98438 li
43.397 2.98438 mo
397.647 2.98438 li
389.147 10.7344 mo
397.647 10.7344 li
389.147 10.7344 mo
397.647 10.7344 li
393.397 20.2344 mo
397.647 20.2344 li
393.397 29.7344 mo
397.647 29.7344 li
393.397 39.4844 mo
397.647 39.4844 li
393.397 48.9844 mo
397.647 48.9844 li
393.397 58.4844 mo
397.647 58.4844 li
393.397 67.9844 mo
397.647 67.9844 li
393.397 77.4844 mo
397.647 77.4844 li
389.147 87.2344 mo
397.647 87.2344 li
393.397 96.7344 mo
397.647 96.7344 li
393.397 106.234 mo
397.647 106.234 li
393.397 115.734 mo
397.647 115.734 li
393.397 125.234 mo
397.647 125.234 li
393.397 134.984 mo
397.647 134.984 li
393.397 144.484 mo
397.647 144.484 li
393.397 153.984 mo
397.647 153.984 li
389.147 163.484 mo
397.647 163.484 li
393.397 173.234 mo
397.647 173.234 li
393.397 182.734 mo
397.647 182.734 li
393.397 192.234 mo
397.647 192.234 li
393.397 201.734 mo
397.647 201.734 li
393.397 211.234 mo
397.647 211.234 li
393.397 220.984 mo
397.647 220.984 li
393.397 230.484 mo
397.647 230.484 li
389.147 239.984 mo
397.647 239.984 li
393.397 249.484 mo
397.647 249.484 li
393.397 258.984 mo
397.647 258.984 li
393.397 268.734 mo
397.647 268.734 li
393.397 278.234 mo
397.647 278.234 li
393.397 287.734 mo
397.647 287.734 li
393.397 297.234 mo
397.647 297.234 li
393.397 306.984 mo
397.647 306.984 li
389.147 316.484 mo
397.647 316.484 li
393.397 325.984 mo
397.647 325.984 li
393.397 335.484 mo
397.647 335.484 li
393.397 344.984 mo
397.647 344.984 li
393.397 354.734 mo
397.647 354.734 li
393.397 364.234 mo
397.647 364.234 li
393.397 373.734 mo
397.647 373.734 li
393.397 383.234 mo
397.647 383.234 li
389.147 392.734 mo
397.647 392.734 li
397.647 392.734 mo
397.647 2.98438 li
388.397 388.484 mo
388.397 392.734 li
377.647 388.484 mo
377.647 392.734 li
364.897 388.484 mo
364.897 392.734 li
349.397 388.484 mo
349.397 392.734 li
329.147 388.484 mo
329.147 392.734 li
300.897 388.484 mo
300.897 392.734 li
252.397 384.234 mo
252.397 392.734 li
245.147 388.484 mo
245.147 392.734 li
236.897 388.484 mo
236.897 392.734 li
227.647 388.484 mo
227.647 392.734 li
216.897 388.484 mo
216.897 392.734 li
204.147 388.484 mo
204.147 392.734 li
188.647 388.484 mo
188.647 392.734 li
168.397 388.484 mo
168.397 392.734 li
140.147 388.484 mo
140.147 392.734 li
91.647 384.234 mo
91.647 392.734 li
84.397 388.484 mo
84.397 392.734 li
76.147 388.484 mo
76.147 392.734 li
66.897 388.484 mo
66.897 392.734 li
56.147 388.484 mo
56.147 392.734 li
43.397 388.484 mo
43.397 392.734 li
43.397 392.734 mo
397.647 392.734 li
51.897 10.7344 mo
43.397 10.7344 li
51.897 10.7344 mo
43.397 10.7344 li
47.647 20.2344 mo
43.397 20.2344 li
47.647 29.7344 mo
43.397 29.7344 li
47.647 39.4844 mo
43.397 39.4844 li
47.647 48.9844 mo
43.397 48.9844 li
47.647 58.4844 mo
43.397 58.4844 li
47.647 67.9844 mo
43.397 67.9844 li
47.647 77.4844 mo
43.397 77.4844 li
51.897 87.2344 mo
43.397 87.2344 li
47.647 96.7344 mo
43.397 96.7344 li
47.647 106.234 mo
43.397 106.234 li
47.647 115.734 mo
43.397 115.734 li
47.647 125.234 mo
43.397 125.234 li
47.647 134.984 mo
43.397 134.984 li
47.647 144.484 mo
43.397 144.484 li
47.647 153.984 mo
43.397 153.984 li
51.897 163.484 mo
43.397 163.484 li
47.647 173.234 mo
43.397 173.234 li
47.647 182.734 mo
43.397 182.734 li
47.647 192.234 mo
43.397 192.234 li
47.647 201.734 mo
43.397 201.734 li
47.647 211.234 mo
43.397 211.234 li
47.647 220.984 mo
43.397 220.984 li
47.647 230.484 mo
43.397 230.484 li
51.897 239.984 mo
43.397 239.984 li
47.647 249.484 mo
43.397 249.484 li
47.647 258.984 mo
43.397 258.984 li
47.647 268.734 mo
43.397 268.734 li
47.647 278.234 mo
43.397 278.234 li
47.647 287.734 mo
43.397 287.734 li
47.647 297.234 mo
43.397 297.234 li
47.647 306.984 mo
43.397 306.984 li
51.897 316.484 mo
43.397 316.484 li
47.647 325.984 mo
43.397 325.984 li
47.647 335.484 mo
43.397 335.484 li
47.647 344.984 mo
43.397 344.984 li
47.647 354.734 mo
43.397 354.734 li
47.647 364.234 mo
43.397 364.234 li
47.647 373.734 mo
43.397 373.734 li
47.647 383.234 mo
43.397 383.234 li
51.897 392.734 mo
43.397 392.734 li
43.397 392.734 mo
43.397 2.98438 li
0 0 0 rgb
@
2 lw
43.397 259.234 mo
397.647 259.234 li
0 0 .533333 rgb
@
1 lw
43.397 392.734 mo
43.397 2.98438 li
397.647 2.98438 li
397.647 392.734 li
43.397 392.734 li
cp
0 0 0 rgb
@
0 0 0 rgb
%ADOBeginSubsetFont: Euclid AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
NDGFLL+Euclid dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B81F2CC3> |-
/parenleft <1C60D8A8C9B7361F026C90415150EF73EECFB0F5D1859D81A957
34A88F918A757D6658CD63D670E6F96F46CB32F26F4B913D0ABF1C26A72A7BF7
EFA0B0847CD7F8E9BCD53DB080D1BDE25062D12FC483F59F1D61CA37F4AB8D77
7F4342DECE0641880E7189E6A84097D60F2FBF31A46C96B6F5DE1E0A62D1D5E9
2AD63466852A0EFBC940CCECEE998385455C7B10514CB2DFC712D2FE37D7C401
D24C97BC6FC3E24FD582C0E743013324C4BB17A590B67F54D30767812C> |-
/parenright <1C60D8A8C9B7361F021858F9E5B069E8CC96BD5F64E200E47B8
50B721C1CD244D2FF5E3B6A434A87E1C56DF9FDF2975A7B782219354D400590C
03D6E3954934871364E55D05A249B0B731086E76CAEFDBD8C63DD39B280EF248
F4A26E70CEABE6E2C41313CE7B9D305AF14325C6BAF30942CCAA5830F2D8E874
8228234E4EA1DE7DC8A5DFCBB6C47C51BB75B4FAE6BD76D28EC4393CE1FD138F
AF511CC3D64B0504CE02032E0EB40A7FEDFAD15FA496540CB87C5AC9346C1503
DE8> |-
/G <1C60D8A8C9B6C4F514245DF35784DB3310403290DD960BE2305E9808AF1D
54E976BDC5F9E7DAA64C6CD2A88354B48A548B0231ED912DBC6C566EC147884F
43CD92EF05A8D916551BB94C921ED141550CCC356EF8F421151350D1422FB0EA
55BA555179C0C6566A34396DCE28D3435542487AB9A9FE6032032CED6CD85F22
AAEF72D5297144FBA7B0D7EC358BF9BA125E31A8D2957A8E5E4E2199B98027D8
BE5D0AC45A4BC50C8621B38BECF1F02E3F800F78B6FCD2F973B761F32E66E63F
8C12FA7544664868CF5E3E38F11D17A0D9511A9544EE58D4C41046FD7324552F
EAED544FCB4DE979B2F89589908843C0311D10E78BFB00D77CC2553755539EB5
FB9E29683CB9D9C4CF35A5BCFA20392C96B2F906C80833BD78D0A8BD45D7E23D
F9CE8238E99D6B39F182C9A162D374DBA7E1AB6721EF46472D5F318348BCFED3
586370ECD8B3014F151F469647AE81B7B2ADC7FAA76C2CFC4809D56E99ED49AB
A93D6B6CB00B0C06430A753DE7011041746BB8BC1C4CBB3E48C615C58CB7FFD1
9B2FC436F8> |-
/M <1C60D8A8C9B5BA43D8345AB05FC465ECF5A2C16BF2EA6824A9E4A821CB11
FBDBC5E269DE2A35C3AF1437274CBF003A6BB4ED9CEA26CBD0B305B0E50DF644
866F9B0F6E7C9AF4051517518137C82B7DA7DCE4A4BE3D1E52F0DAC1DA9F910C
4B1B0536A7B14895D1D2DA6727B5783A514749AA6EAA365B34D5A3946056EF77
013429EEFE7E8ADAC32BE67EC642E7FC6C61FAF296718E9AD86128659D0FA8BA
D3058308849821C399099883FA3E22F9CAA6907D8B25621DABDB2664E8C9F921
4CE919924C926921B128F186CBEFA340D19CA48EDEFDFD1C71E427F9E75079CF
1F131977A22E9DCC41726F822C2A8EC0ED15EFC27A097EC266027727356FEFC6
ED77341F2AFBF464EBB704C42A0EB792E5D623B9063120D466CADD0F05AF4F> |-
/V <1C60D8A8C9B6E3FA514E1C8CD95D048F05185CD0FA4C6B78C6D45CF490EF
0B6D342E731EFB574671019FED42A1B09F005AB6EA98FF8E73BDACD9420774C3
10E44911BE164695BC810B3A3D8C859AB81B54ECA4536C06DC5E514D419BF26F
47A2CED4993A2C59FBDCB3D1C0CABDECE065F03B96221400F888E372A27B662C
63D768AD379B0E28148ADBA2437EF4C19343E67AE570D09114D8DDDF5FE8061C
3C2BB565B8E39361CA4ED0DE849DB7F5673BFB7B41674D7736B01E> |-
/a <1C60D8A8C9B7A73DB6C056B34302904348CB649E4CA9A06D864BA9EAA4CD
3500E463CDF01E59521B9B39B024903EE9BF0B54D0E5581CB210EFC939C37638
9D1CEDB9856BCB9147B59BDE6804396772257B17BD28931099E46CC74343D26E
A0938A2C3AEDF56C4F2C006230C2637B354FD561ADEAABF114E734B0199D3CEA
81302F9D6545F290AA778F91107D2E8B0BC3D7163BC2019C0AC011398929D6B8
1F7800D13662702A4B6A77F4E790A95F187131A7C9DFAFCE8C145B101341A6C7
0147B91C29851EBB946A2C10638AABD7151588A6C70BFB5E7FE19D15E1BF9244
8D5656E687412D73E912487215278B09BE13FB8DCDBE91B6F70AAD807599B6A9
0CAEB01FA17BC8B11B632B423BEC13CFFC66AE8FB0CA0D7E20DA3A7B3981CE02
515E5D48A7933F20F76DB10E0E968D148FD13175E468569C0B86E5218B9B5F07
27CE44D411BD790BEF6A53014D31211627F35AE8F1838114A6469D400E4AFECA
9252694C3D25804452FCF6686EDCA87274E94E450DFE937A55238840BFFCED6A
C2B7D6B9F175> |-
/e <1C60D8A8C9B77FE2C1821A026C58ABF2B567E0B00879C337C2BDCE00286E
62420AB29662430388D503E83190757EE9DC0B1806BC1E5E1DE8A092421E50B6
BF478162AC393B84D271E29E01537B22CD34C084A214F78E595F4E118EDADC3B
2E22E50A698CC1E2AAA7947753A98561270689ECA8326FAA8D234006E1A8CE10
061EE53E71911DF1E560509DC8C5B8428B98C1B8B1E344D1FAF1F192DB89FE21
28494DF2A953F3D2A9CFD87B00264C223F5E00AB3201AC33EF160430B96A6B8B
4293FB496DA48FDDD0C656B5E8A331D590176C57686C6A582A57C8825E409EFE
48D90775405E7F8219580C7D102D41C7FC9FA21835312A9F3B26F28D3CC46132
271E0F2603B9D916401A6849FF76439A> |-
/g <1C60D8A8C9B7A73DB6D5232061D94D66C0B60A005525C6CE0653122A6DA1
BB094CE0A9497EC50E26710589D5A4C4FC2DFB326F58B4B6D35FC00C49080ED2
05D5338D60A02E5FDD9BC1DF723694529888AFB189322346912DC7E201F7695A
E4EA0F9F6F57760C6BEEFD6EE879515908D4A1598C8B84F1BA751A6AB8F1ED08
4582909A6A5F5ECA9E45C0617496D67780F6AD6474314A0523FA4F818CCFA2FD
223FAF8C08525D0537B7E85DFEC50BBA14FA46BBDC7244DC18B3F64E7F41F1A7
9D53A80738FE917C2E9E1C0744F2E948188B3A28B56C85EA626E9A74DF68BAE0
865B27BF3847A55498CE35E057CCE812693F8DE873FAB1D3448AD04BB8A437C6
5C0CB3BB1D214EBA7F17916256D918030D9DC10F4A1AB9F97BA2650BD7109509
BC06663F5E81C8CC05708FBB368651C0AD700C058CD5429BB78D74A72F7B310A
6015F9E86E1F4F1D7FE82B9855F66BADD20FB92E5A78C9AF5D61385ABE8CE80A
4DA29347F120F3D7B520FB8A3D18FB38484EED82B53790D11036DCE315959697
C7B2DDD6C16DF80CCC8A179C4E5A99FFCB6474B72FDC47D822AB234920C50448
67476EDD20E9E28FE81C1DA01B2007B138705AEB1A5FB1E95648ECD849F4E5A2
3AA7C69F16611700F6EC8D41A57E68A42CB6AA15F289DA1CD81492FB833234F0
F14AF79588FD44D5CA3492498DBBEFC2DCCDB24675C149B8414B7C41A2B1A8B4
39C3F4946E90AAF97D360BA75CF948605AE9F70E7F9A8EA19EC2B4368794E0DB
6E7F37520BEFA68695055AE9148E8174310CF6FFF1F02E416E03> |-
/i <1C60D8A8C9B854D0F409CB6CAA9D7B27CF04620905608196D31FB9E6C145
2952E18FF7826C07DCDB422109C43295E82554D6B602F849C6BF15530BBCF65D
AA56362CE8809CA8AFE734B98790FC8336596C75DF73D3C6CE2D88AF7D72BC08
08C15304C9C518671E679CB5788CDD30DCEDFE9CFCC36317A61BDA056C38024F
152A8102047E245290FAD9288A2AA7FEF8B4F2FA92669DCD3102EE8211F4F5EB
54A058BA87D881A45B5661F88632690B4560820D86AE4060316A> |-
/n <1C60D8A8C9B790A84ECC5DE8DB9433FFA3508474A30F12CE952E122513B3
7F1D3EEAFED6483B32FE4E4D7BAA9E2A028EB609AC76EF1543D3A50DEF0B9177
403A8F916F707A7226F19D645B852D2323206B57569119BCEDAFD978C7DBECC1
EDE5B1A61CFF8C5166C0709E9743F9E7E6025489AC3BFE453AD83AEC67F6B80C
D329321DE9218A07FB7261A731980DD1C07715238BECD0BBBF9679CE23F83587
3D9C033C2AEC27DDE9F78AB4CE4E6B011D97918C88B78273AE2EF525E1544F6A
80F373F609359EB0506A1CA47DA5B9C91730AA57560D488D22A12D837AD68502
599A1A4D5FBEC18ADFFC48F7396120C680CE9129A13E312BBA537C3FAADCDE91
A3F17B63797C579CBC5FE46E3786C72C82D307E8B1F95A573108D0C2FA804F80
075CC12074C564B18D22980D05479A7220423A52CD57767084D69933903685B0
22C0FD> |-
/o <1C60D8A8C9B7A73DB6E04DA22DC3887E107FB9BDFC252BD45EA9A6CCD743
82FF0132EF21D25B722C75D2E33383CA764680024EEB414BCB7ADD86F7ED9B7C
AA4B3C73C0FF931A5F957D4E732C018DBAC0448B49ECFCA9E44D7D60E3057C64
1C9F43A44C02717B9874E79F25F328F02390E1E2848262CF95EEF6A8FF5EC287
CB252D5295F9A0B55B2C0979A1B9BF1E1C9721D84CC71A414CF2D7FEA85AC228
1A9E3CA28F6645880AFF587D944E49C65C2DB73AF767B55AC5D0E13CAA2CA5DB
23586D082F2BF5FB10FEC76AAA1ADE699536A27A1A55FFB1A1A49F25E79A5DD0
43A38E998376023D82B21C0FFF40E3F32FC19A7C76AC> |-
/r <1C60D8A8C9B733AACD71AA61712FB3877FD4C3C5B42816FFE1389A249324
DD496757EDA62D25A51340B0EE334976FAF9403C8FBA84D76CEDEB4301ED1249
0CC5449596E7CB651D69EF81E54DA8CC7282F229A021D49601BF0DA567C0A4B3
A60DE3AC9F02126F663450FB3E3F30DFC747B0257034F99530FF4E1253E594F6
0FD0552A63FC0E78847DE24CE84E4B101BC97130E8E6F2D7D4168BE017D16FC7
54CBBE3836930DF3FDDCB5B3D705BEE4C25C362C07B9D9766E70505E90223E85
3CE68321A8A478C2A345045130A7ECB2EF34DC1CE5FF950FE7FA3CBA87E735F7
C4B239D11850F200C4B1B2D3B363EE> |-
/t <1C60D8A8C9B7361F0268E40953E58C7BBC290FBA797B35D723DF44EA35D0
228BC3EC766F15AF64F3C24B0FEEE8644C9F85D47819AFE65026CD54C254F1D7
CE7F2BF2376AA7AA8D0968EF355DD56748453CF1F86822D10E28504BF3D5E11B
2698187CEA6FC0AAD95A8067771976831D5A97155C091F14C2C7661DF709D653
FB9227D70E75ED8A490A96461BE369B941B9FEBF7A7F16A288ADF72CF190B045
D0951AFFBC51E84A66989F7DFBD332F6767A> |-
/u <1C60D8A8C9B790A84EEC21FCA044BA62C44C4FB5840969C6B45A6B8FEBA5
6791BFF4767403F33A6F1C5D0EA3648801B1C371627702F27BFB3C64974B88F9
6FA8F53F9E318F41F01703A431660CA2A49AB020DE6318204EF879AFE22B214C
1E774D659108297A42C0443FDB3D575F2D13B5DB10200B0A762AF03AC7A99B08
381DB4BB94DDCE4C597A9F323F4CBC32835FF4530CA0C25D9D19878467531E8E
8262D796596B5D80E247F84B69A6E85E2E1BFA80F9A24BBD89895284DB10561D
8D5EEC806F1BEA51776D0B9DD50E6B238EE2DA599A7D649DFD6D639B31398AF5
504B> |-
/y <1C60D8A8C9B78B91DE706810329F3E0772483AAA6DDBA8A1819665A3DF5E
E8A346CFA9B27BED872836AF597B634A90631A79EC8AFCCDBC74310C94D8D109
9BEF8B946D3D3A9C9724611E6FF8699BA343886775BC348CC603DB704907510E
83DCBA2513D161C9B7C917BA82EB68433065C8220D97CD7AA17899E898EF3BCE
1CA04AE634E76844F02E7C0FD2FE24F34845424D60EEEB17863FEFD9C17C70CB
DB806F92DF441D88A30CA53B374823643D21367CFAF0F86F0486DE5AFA381CB2
F81B8F30FC2C5B7D6F7ACB2D60C73E348090A1D819C36BF53EE4C9C4F9DB9A0D
E44A8762478AE3D91D9E958795BDC14307505B17CB986BC61D1C68672EE696B5
0D9281A20942F7E20D853794D6BF0E9D96470357C615B46C6BF4E59F3C3D7093
997002135820FBD7507572C2662288081C34ADCAA90F297BDF74D1B96F93DC0C
A369FAAF0B62C9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NDGFLL+Euclid /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 71 /G put
dup 77 /M put
dup 86 /V put
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 116 /t put
dup 117 /u put
dup 121 /y put
pop
%ADOEndSubsetFont
/NDGFLL+Euclid*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /.notdef 
/zero /one /two /.notdef /four /.notdef /six /.notdef 
/eight 14{/.notdef}rp /G 5{/.notdef}rp /M 8{/.notdef}rp /V 10{/.notdef}rp 
/a 3{/.notdef}rp /e /.notdef /g /.notdef /i 4{/.notdef}rp 
/n /o 2{/.notdef}rp /r /.notdef /t /u 3{/.notdef}rp 
/y 134{/.notdef}rp]
NDGFLL+Euclid nf
NDGFLL+Euclid*1 [18 0 0 -18 0 0 ]msf
124.647 428.234 mo
(Mean \(anti\)neutrino energy \(GeV\))
[16.4878 7.9917 9 9.98975 5.99414 7.00146 9 9.50439 7.00146 5.00439 7.00146 9.99023 
7.9917 9.98975 7.00195 7.05566 5.00439 9.98975 9 5.99365 7.9917 9.99023 7.9917 7.05566 
9 9.50439 5.99365 7.00195 14.1294 7.99219 13.5 0 ]xsh
%ADOBeginSubsetFont: Euclid-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /Euclid-Bold def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 82 /R put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
def
/FontBBox {-63 -308 1026 909} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
23 dict dup begin
/.notdef <1C60D8A8C9B5EE31F4> |-
/space <1C60D8A8C9B81F2CC3> |-
/parenleft <1C60D8A8C9B7361F026A35BF94C5C5B632A14B43CE8752807651
12D033EFC91B6A6A5E796692D973B08E8AFD9C3FF4AC6C04D2691D28D4D806D2
68EE14532F955FD645D407B6EB0A7FF80CE4AABC9D21E1F98258846A685ABA4C
D5FDBA729DCE850DA558C535C35EC622024BC7A76F1B1EA5D355EA217BAD0DD3
2D81191E03A970582C7AB164C9023F83164ADF4D6E31C68BA155FF41D06FC161
661A3A02DBE7BF1144F0B7B4EBEBC1009C30E4F22BED1412C00B4310BA5A6D22
74> |-
/parenright <1C60D8A8C9B7361F021E728F871F513AE7B0BC8EF97F8020A10
0EAEA8EA06C7E242066060C7552EFA7179AB3A6E71006FC9E2BE1C929C9C1FA0
B41936F8DAD6160BBA5BC41C23CF01570ECA5906E98C37105E7BD6B3DE7C7471
A3D3F4C9B4EAAA29A1598B6E8962CD4BEA749302C7DE4D0D30BCD358D009902D
86075F9CBCBE4ED86D4D65B128431957C6027F4FFF8AFAA95857EEB9A3BF4931
3E7B779FA348E0F14ED074BD50572390F50897EB1C62FF9C7559E3D9ACB7AEB4
121> |-
/E <1C60D8A8C9B64228CF1E6C2A2D2182FCFE800EAB9F2732857D4E75D3CF87
400456312DAC90E1857EA26D49BC5F6EDB36A5FDDB93A22DB941D4B2DE9173A6
E76FF6DB78297A039A0582DD23DB1CDCC6411AC6BC25D3148F6378600FCC87D3
B9FAE607410552273066FD31F293D4166FF2B99C3306A948C1805B40B20AD33C
ACD27481411AFB37B69D4455A1656C95D9EDBFCE13D3C14735AA94AD2136DF84
A9FCFA4A93B87F65A27A13DC92761145807A8EAB6399CDA97D59D3787D95198F
3EF3E1AAE41A4E84F6> |-
/F <1C60D8A8C9B6699559338A191AE5F817E8592D0E0794B45CA0D62FEEEE32
2A9699C4DE6C290566E0A5C28E8B75ACB791304FC724ED90EBA8E1CF83486715
EABE14C2BF08D3C2F88A642548FDC23B449FBC3D96CB222A7761672063B43B47
A42541984029724623F5A6D2CAB446E04C8EF18BF028C075AD8BB940FB4B789E
6194CF14E95C190AB47AFC6C1BC406C34E351EA18F9B2424D9869A2DFE75AAE4
C24A89F2E37F08B4D14BC9> |-
/G <1C60D8A8C9B6C76920453AAC218129D77B805889D2A216B43A99D7D5C580
168CE46F8B11D5E2F18F02EFCD6621B740011CAE3B3ACED791BD33A39EC12A31
7C9FB7E7FDCE8C92FE1260CA7CDF3A086E5BDEAB6B73BDDAF446D14B98DF8B3D
6C1C83AE22B2F6E96F1395540A90031687191D4B4580998EBDF7FA388365948D
7BBD3852AE796910BDA76783BBA01233AFEC4CF064A15F05442981C436C4D955
BDB743C5857EC425575CF598643ED28DDC42B6A92DF5011794FF1E8B5AE6723F
9A05B77FAEB20CD7949D77143BDF00B75F824D60EC50773910D191BEC7DD65C9
E4CE45E008BBCD3F47713AD96FA21F50FC5D16B043DC343F92C9F92EEC502007
86620DA1A6010F074F4864B8678EA2EB65BACF59F5E922E1CDBE10F30C6F052F
8A2350E86EF4DD645D7389E085C709CDC261B8D65C660610966E3C0CF425> |-
/R <1C60D8A8C9B6ED05DB632B50386977AEE557822BAFFC7ABAB83B3C9B60B4
5D8010E209D88D5DE0FE8080FDDB42B8FEF1CB0E85444F89814D5FED61BBFC45
0B6F38DC70799E98DBD66D6FB7940B923812D9BF01EE4998FEC9C268EBC010AB
1933CDC85FB65F28459F9CE15609898E442855DA55268883674EEC5E1D07CA91
9ABFB98676E4C1D17E4C19E0E8084C5153FEF06F00CDD7A47629E938D4B1D888
EE3126BCCB62B96EC99D8F341B9BABBE4276F62BD30351D32BE5F00CC23B9E15
85F2F7CBB522BC80BBD16C1DF739EC3D8FA0FC9715D4934C0004AE487C8FD762
36039B5355EA3F28DEAABFA19A48EC0EFDD16DACE8D5DED93B01A2141F344D8D
78555FFFFDA681247A9E537456F2038BDCE602D323A90C5DE4D72AA2869870BD
3CABD5AA32BA35939E9C42D67ADB635AA41750F48A131D9E22274CD7E952> |-
/a <1C60D8A8C9B7551CC4D8A172B637613A8F412AF2706347ADBCE9436CDED2
81DF1C8E73BF9C7BEEB19B09B5205761B7E05FD5D69DCF3D50DF9888486867B2
8461F37B20B5BAC17297B9C48282A877F28FCE557A47EBA8D2052F5E9B2A79CF
17CF7E9447DDBF45BE7637B353F2C9090F9E46CD8240DEDCE115F3F1EA96F35B
DAF5F97205395243868B9C23EB8B1299A84BB57CF44441EEDDCBC559DFF057E6
92C9E8D1A807074445065E4B3446B0F8BC9AAEA8EDF5F10556ABBC1D97CF690D
229B655526453060F4E16F55D616DC8358F250AB518F4CB9EF45463C92CB25BD
8A613E9F20436D90114EECA826D9F9C98D32769B884A1547ED8ABA00BA52C0F7
4B87669A0BC2085CA11F6E4C655C66DA54808017A918FC566B62551DF474E6DB
63D2F12760B4112679290E95A524E8F153DA61511379F822F7E7F411EAD6DD7F
4B5C1635512CF49B57F4A98B06B048F6DEAE5F35CE8BEDDF4FCA6D7CD80EBFF8
209C798C8BA7F422BB2612FC94830F580C65D64E0F02CE2FFEE503AB186FDE> |-
/c <1C60D8A8C9B77FE2C1821A026C5F0593CBF2D8AC485B705DF295B1D2B9B8
2C72E316C2DC5C7CF14883E93C24870871F9B1122388B92A54AB2FEDB0E56CB1
9E0B853DE81E975D2C3B9DABEB30F074AB990BCA6F11BAF849F3D851B959FCEE
550AAA01E5D809B9F990D758A887A291D2CAA16F4946EBDA5A67FBCED4C0C4D0
62B19D78D48C595A7D4A05A90E2DB57FF25FB1FB4A559708E6A4120B220B2D86
003511F5AA7E4A1EA0366EC39ECDC321480E23900E627928E688004953EC14B9
4D2B0776D878E461B6AE5E8D2217C94396070884A992934297804519BEF2823D
CC880387757E98B033B8FA8458B61A05CBA7FA0CC69475F203C47CA0FAD7092A
882BE681C887103E73> |-
/d <1C60D8A8C9B790A8418F49E924FEF2513FF521B349C9B71893A61B0F98A4
724A01DF6FACA490083D5962BB7B988E34793387FC6C0D1669A2BBBBE10E4F08
63B33B1934C9D060D4859BB2ED76AC7EC65347D9A27CD4096C49A6E18C4F1FB1
F3ABC667C048F9F14304041E17075253BE27A8AA4F11527C2EDE0CB13603A3A4
E10790F21A1730F3F2145787381A375E02C637B3BB98EC3F8F420AE207748266
46967474285BF6BA7F8D9672F8F62ECC66BB0051439DE2C3DA9ACBC4402360EE
EB2E8B25368B5BAE8E77701607BC7D3F0DC05356DEEF38EB52E8721DA2336DBF
8510378DEB38939AF250E98D3AE57F151FD4ECBC0DEC769C843FCFD7E37CB496
B9E09DE6CC6F> |-
/e <1C60D8A8C9B7489B35A943345954310B9E200F2A86302E990E3D90216A2D
F3C8A2195DAD5A1A912A77BD88AD0E3D508D30EF2AEE7815618C9F1CE6C27D25
CA5D98A836699DC4D8B12F79B5618C1BF2431E0C05A8BBB5D825E0D1DABA3E5F
0E8B9C4AF0526C20AEA61DD0A636A410912E8DBED6998D22C4639C64A23B4F7C
3C3084B9BF8243BB29635ABC52B7CD87069996F711125F7F8AD1F2CA74182631
9EA357E403F3FB841CB7EB623696047A1C8BAE81E6D97289A50F4E7D0069ED7C
C258707E63B4C0DD80343C7312B244FE764919A1A0179B34AB895242C823DABD
3BFBD644869B4C0CBCF268ED6284955D350FFADA2DCF38EF8247A2731E85C8AC
C77D955CE1E9E86EC79D231ABB2D> |-
/f <1C60D8A8C9B83BB86C2CB375E38AD5C9F459540F716A29CCE4A9A8F1ACC6
F85E92F64D371E024B985FEECC72E77F766F33CEE68E34613534783B51EA841A
B221DCB620125B64B357D189F6C1B55FBFE4E43A128257130D4529529460F6CA
46F26BB94B320960654DBD642711207681A21BB155098C5E4FE786BC81F397FD
B711867D1DFDF907D5518613861265502D7470E1D9C50CFEF3F19367E2C232DC
85DE31D8A828D5AF9EA9FF34A01B92644BA5C07D8ADD448F669A8A> |-
/i <1C60D8A8C9B854D0F4620F02E9EF38DB1786F324CB76BFBAEDF7019C327F
FA7924CF134D6EF8758FB7211BDA79B88D1035BCA1880B5048AD1EF190F8C130
D687051B264F146C1413AEA25CC952C305EB06E3802CC7C3C411A31296C1042D
0DA8F7FF9D72C3707AC7AFFEDEE37C10333EE1FA70E51566A7D9C3E9A387AE10
ECEB440D8236DC9E2B514792> |-
/l <1C60D8A8C9B854D0F41B39C0D2D202631B2990EE1BDCE34D8C13B1FF2BB2
88AA789A537D9171FB097A5FE238B29B79B88BCACC977EA4CFD43D9E2829CD76
E5EF7F59F82D46839D49AC89CD18> |-
/m <1C60D8A8C9B6B41CB5CEFA9E0AFB76E5944CD09216A1A59AF1CFA66955ED
E82B88F6D48B9E453F2D2F35FC92DBC40804D9F7D8971FC74A770EE666D6166A
814D8F7DD3797E961EED36822BC1D9BF86D865CB741EA4224A5E2EB49782DDD6
0E3D29AF7B1859D02557110C1F29E37447C7824EF73F5654122DECBC8EF7B6C4
0755B8232F4B69A5AE8E8987FAFF2B498A12ABC0D00C7E45961CA07C242CA7F8
6FFD764B93C3B3FCCD596F0833E8F66234AFD94FB37A1DDAD59962D43A5CB8FA
5EF77499D5740EE354BE7252AAF9EA7EE95B3DAB6B1D771C09030AE01ADD4B69
AECC7907FCE69A9813CAE4FC9229302FDF134EDAC842153C9BED9C4046645427
3ED1A3C604397BAE6515650607A8957516388E49A0FCCE9FF53D449932026833
B9AA99680D73C89F65ECB35A3E15227D31848436DE2D691445F1618074CD> |-
/n <1C60D8A8C9B790A84ECAB9E288EDD5EBEB02FE1084B08B5B5FFE105DE340
469A1A07F7842E17FA34DDD3C2AF2848D979AB313A4F358B0102CE0DE7704763
1E1FD0D62FD1B8ACEA500B31D838CC744896A259856D1B27C87B8C7A94CB8D1B
1B4C720C6B252CC77DF9F69C0EAF49CF6614696834FCD03A22594F89E12FA479
376F4F05EBEA945D3BC5D0D58B18D5233FD4D167A4593F69DE21433E3A788670
79B8865438B0196C0F263B8BDF50CE5344A21645807F678F2B3E74675BFCAD57
0CBD69E122B2C626B6E6BCEA8EC2> |-
/r <1C60D8A8C9B76F05A7836B75692FAB9AAF15F1AAFF7740ED423301DE98B1
3E67CD5684D66AEAD5C531D960229C8523D58B0B661CA5CF63D3A315B5CA4173
75AE04C82C9B20A9BB3E78B0FDCED3633B6C8B5A213742BE63E7B071DCEF3AE1
C4287FFAD0D402E7249C7682329BD5C6BF1F2B34E93F8ADFDBAE2980B96BE5DC
15BFD0AFECA8480C8BE33ECF0876F0FDEFBB8A8D5ACA08AD87C032D0524D78BF
B03B99AF9B7AA447EE4599748CBD0500102DF3713E98531595306C7C99784DF7
E0> |-
/s <1C60D8A8C9B7310761502A49BDEBE557AB10ED937FF009114D49466C800B
114558CCA560469057FBBAB8265167788937F26F471778A2888ADDA3779C6E35
64DEBD25996E5079D82F66757BBCED44B42504B5D229A5E3B9EF0D6C4C6919C4
0C1D0EC295EEBA646ECFE169E410875DA9EDBD7AFB65DE661BBAB53462950DAB
8D02E08D187B7097D9F51B9C1491113B65445AA8906A0CF5E154DBE919CEE316
2DA90D876EBF993878F2DFE93FB4C0B716BDE24DE695F750AF852B7F5215DB5B
23697CD0F31EF5581F4B970DB5A4C79F449E630045649157585FAB809AD566EE
DD332B7C8CC78BD7A8FE4B283347B89DB9C0AF92AFA0A7453A0EC1E989344F2E
5E2C880F2C828BEFF5BF6F6CB69C23FBD2BDA699E919FC3D738A47439CEEF5B5
F48F76ADB6315D9E7EE7FF136A100196D93579AAC725C5ED7C99A9A0C5AC2B63
ABA722C0D5250E5D51AF6F12B9198B6A84F1> |-
/t <1C60D8A8C9B73549CFCD6B31D6B9B4BE30142679B60596010EA3F519A81B
453B6EA7D5829109A8B85F03447F3A1975EA018ACF047962F02B7E49FE803BC8
64EC149D45554B848BAD5312D4EC7774A70307C2CAB7CB39CFF59582EB2D516D
77423000183CA6A6DE208681AD4DA7F6540BD2AABF637612192917AA4BA917B4
66EF3A9443503A226F8F70FC5B44266A16C96B9FCC1B5585791CBC8A17C75177
F28AF752> |-
/u <1C60D8A8C9B790A84EFF76FCD9D7B2B964EB0F39E6560E982A723FBB3A71
79255ACE4AB2F3EC88B72F4036A957E9C07968292C921156456159D2CCC2E848
0010CDD96B8F037FF57487B076DB379F0F960E68F8010165E12E78B6B08622D4
F7524C9ED0C693A8C8DC04F14F0F768D50FCCE6FE3EB6209B0BFF640B5663DA2
1B24BFD5AAE24CCF36D0076C37CF099642397D977DED718489972AD027D7F99F
9198A30E320F378463682B5BD3DC4A2621500F68F7E4CB6986AB66484F2E4B0A
77678545D95BACC9B856D1D4ABD2E19490B6348D7B18D1A511C4298E7D2FA890
77D9> |-
/v <1C60D8A8C9B78B91DE769E7D1FD091654E4EE32B3C776EBC301B465CD0FB
29629FD7B14B9288AE3A94D5240B97B7162A461D63A748CA7C78E7718AF020CA
EF93BE152EC93607099A526442655D9B9597810DA37B4EE56507637EF3E66276
2295D89EAD69DE01BF23DA3EE74AE3FBB81BEB41B74EEA4F2106F27785395371
00F04B7881E2EE2028B07A9AEB8E9491387B97D4FF3EC3CC1F0DDF90D47D7BCC
3661766B22581CFB89FCB92ED339CD40> |-
/x <1C60D8A8C9B78B91DE280FEAA578B66AF640BBBF729101F8BB59A74A0C66
0F445FFB31E60DE9731E150D23B778597C68EB1A61403668A7394D284B86C8BD
15FA49B017FD6DDFF6323E36243FF83B50223F89CDACDA36688B5265F6914800
99A4ADCDF04D189E1A7E30047C5488C599F2F794992F3C7C01E75370F8DD48D0
F9C5FDEE0403970EFA5A9998EA5B9DC6020DC76D8F818E6C7C26F5DC60CBB018
8C1D0DE6D470F7F6BC210C03ED9E62A67F75FD344D28EBCBD08E62DE1B1FDB35
F8FE9E2EDAE2D8E3DE211D48539E259B48B89EC12948D7B04FFCFE69F5B6D46F
C8EF3CCF97CEEEC1178B6BA4AE50F05C2DDD716184A65403EC7A589D2A1511D8
ED43042E8A4F6B8E65623A681F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/NDGFLM+Euclid-Bold /Euclid-Bold findfont ct_VMDictPut
/NDGFLM+Euclid-Bold*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 27{/.notdef}rp /E /F 
/G 10{/.notdef}rp /R 14{/.notdef}rp /a /.notdef /c /d 
/e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /m /n 
3{/.notdef}rp /r /s /t /u /v /.notdef /x 
135{/.notdef}rp]
NDGFLM+Euclid-Bold nf
NDGFLM+Euclid-Bold*1 [16 0 0 -16 0 0 ]msf
123.801 110.874 mo
(Effective \(RFG\) axial mass)
[10.48 4.87988 4.87988 7.47217 7.10352 6.24023 4.44775 8.01611 7.47168 5.32813 6.22363 12.1602 
9.61621 12.5757 6.22412 5.32764 7.77588 8.44824 4.44775 7.77588 4.44824 5.32764 13.3276 7.77637 
6.30371 0 ]xsh
135.965 313.875 mo
(Fundamental \(current\) axial mass)
[8.71973 8.87988 8.87988 8.87988 7.77637 13.3271 7.47266 8.44727 6.24023 7.77637 4.44824 5.32715 
6.22363 7.10449 8.87988 6.84766 6.84766 7.47266 8.44727 6.24023 6.22363 5.32813 7.77637 8.44727 
4.44824 7.77637 4.44727 5.32813 13.3281 7.77539 6.30469 0 ]xsh
%ADOBeginSubsetFont: Euclid-Italic Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /Euclid-Italic def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 65 /A put
dup 77 /M put
def
/FontBBox {-28 -252 1126 899} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/.notdef <1C60D8A8C9B5EE31F4> |-
/space <1C60D8A8C9B81F2CC3> |-
/A <1C60D8A8C9B61AE94F3B04B50CDDAB130F5B54D75D38E71C1807E3E08F67
DE71D1D5F3C6876532AD0423BA8B2AD38AE6B19ABFB515A7285715CD543E6D11
F62ED915851482F4E07331860E57D9561D0F4B10D0781E0C3930F0688486A85F
AC24366683723733B1C771E219E515733E73418E7FBC677F5D9B4EDC843504CB
F6BE203FFB34B73A5150BA6309E4D1944C3015A0FF9A654BEE2C897F812C2171
1CCEA20C91FE18B7B1217C92FC85B88EDF1AF3C4F5F06D02D74AE10B77605737
E2F8EDA9BF13C0A34480499F90EE9D7A1B41989A8352BFA2B768D77C54E26ACB
67401B7A01F62B8469C70C5793C19BB6590E672A35C0A20344E0C470B198DE17
EA67BC120C87E867> |-
/M <1C60D8A8C9B58652260AA07E6DCBB9FE539586273D2F4D763E760B770FAE
C0781338437875B4235DA3900626C9DE6670A7C493925A93F058EB796883F77F
74F773EDB0B4A0D643E2C115A096E8FB6DF4E1AB658635A2AE5AE578B85B0366
EDBB056B5AC1D96D486B1DF2E9830FB1EDBA2371D70871B3241A3EDEE6980DEE
1A387652E8764B8785000B6E4DB1A8348A86B5D6563E75AFFF9025324A658DDE
0BFA6D5EF596D50795D5E7DA58E022130B20067383F85D01477049002CCE7C05
6B9A277BAE3E3DCE377DAFC65E2450116662FDBDA9A0304611F66E893A4E37FB
83B95D2BD35F8869A30AD210BC2DBC8629C16DA17C75ED5FFB239660DE564921
AE51B2248A8B23B3B37FD74FAF41AED7DB859A829F098B79A9A52CF180C66FDB
40D48B6469DBB5551ACBA7BEF3E2BFE338DC279A3DA25502A1214625EC6B1D13
605661967571E50B7674B2825E805DA5437885D42830000035C7F7C15EE21BBA
D36171FB524473E3B88081113832B76426C039F8> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/NDGFLN+Euclid-Italic /Euclid-Italic findfont ct_VMDictPut
/NDGFLN+Euclid-Italic*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A 11{/.notdef}rp /M 178{/.notdef}rp]
NDGFLN+Euclid-Italic nf
NDGFLN+Euclid-Italic*1 [0 -18 -18 0 0 0 ]msf
15.147 83.7344 mo
(M   )
[-16.1279 -5.99365 -5.99414 0 ]ysh
NDGFLL+Euclid*1 [0 -18 -18 0 0 0 ]msf
15.147 49.625 mo
(\(GeV\))
[-7.00195 -14.1299 -7.9917 -13.5 0 ]ysh
NDGFLN+Euclid-Italic*1 [0 -14 -14 0 0 0 ]msf
21.147 67.7344 mo
(A)sh
174.546 297.695 mo
145.522 274.478 li
150.391 275.691 li
134.467 266.154 li
147.268 279.596 li
145.014 275.111 li
174.04 298.329 li
174.546 297.695 li
cp
.137255 .121569 .12549 rgb
f
125.692 117.587 mo
103.988 147.761 li
104.951 142.834 li
96.2407 159.226 li
109.01 145.754 li
104.647 148.234 li
126.351 118.061 li
125.692 117.587 li
cp
f
0 0 0 rgb
%ADOBeginSubsetFont: Euclid AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
NDGFLL+Euclid dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/comma <1C60D8A8C9B854D0F46A497749B0B7269A67C7DA85FF191721E084A0
80872B52B5ED62F23A29EAEFD2C4139ED43359ADE987C64B0B31C310CC8AF0B2
32BB9245C2FE5F942F541E9B0F4E59C5DD470FD93588C12404C2AA441714665A
35B88AADF7216E7BED9CA63F47D875179CDC6FCAEB3E45F165153E4A4B11B083
448011893A4FE7AC6A53A1A9> |-
/three <1C60D8A8C9B7A73DB6F69CBFF99412D27D61142A94F56062854C4E4B
D6CFE1C9F093D20383958F1E3C32B3B55950FE1DC448E9D2A6F6F44B68DC87D8
E780960609504F5EC7C3A4C92BE934CDD0A0BD47A445359B46244F60A4A12FE8
A16777566C277CE4CB817010B1E503E3ED7674DAA3600D83DF941E99455C27E0
E100D56D20BAD069C5F9C0ECE26E4ABBE62F8E99521A1770A46C4CF22D0DCA33
9A5600C0DFBFA55A9DCC5A4E77CEC0FC7F51BEF0648545B16D519441953860A7
AD97690CBADC939CD44F6C0166A334CBDC10A80101820615836569EB5FD7448E
DB43D05503618256A09CC67B17C0D06F5A0B0E12C16A0676D1789E76D5FDB65B
E5FF4E3D00445029E518C96157D44D037970283C9116099F7C5FA9A757655D07
0E2A1A38A223177F168547D87630C367D6575A640EF17C28C6C01C5D8FE4CA16
56F2673F0303484C99F732B6416FED6C010118A1CDC120C554C40B56DD49415E
51FC9224EC0FB6C6444EEC97E7EB2A079EB9E694D3B710BC8EDEF2056E6BC90B
BF8BC32843A07ABC4DFA7E165135742187F0A3F448A80373A8D7DFC7F9488454
8FDF325F68BB12D0FAA562445C82DCC1B287E66706AF384579565E05E7D7298E
9C49312C653B> |-
/A <1C60D8A8C9B6E3FA50E15AE8E318761CE973251BDE222B65ADE35813B2EE
56657E752C940F2083DAE75AFB1D713E425BA440F13EDC70FAFDFE49AD800E55
78B00C7243D35CB89AC47DBBF39FAF9DABF44EAA2190E05256ED0AFA126B3AD3
B429200556A4A1348F7A2282891C6D60B4882987005E4E767BF14B55E504B686
9BCE395C78EF23CD5440298862BF5B84C381326E4F5E0196D2AC93566E92617F
1C71A06B3A33D1E261BA679AC49914E9A492EFE4D32964E2C2BCD4534FEC5683
7A57F9FF0B17AEEE31ED866B8F0068BE> |-
/B <1C60D8A8C9B639EE88DDD010DC4FC67CE81B7EC330F1DA34AD1625AF9109
0973F8726591248244AF9EDB3D825BF08E3D9C5376B21D78108AB98A5A4617D9
78060FF75330F51BD524709F13ADFAAD667D79BDF0A363035DAD918050C9A8E2
1CFD9156FA8D4A7CE0B347987C7A9500F454C24E67D0FE30AE0CDFEC21B9339F
D40AF25D45DB0A0F0C1CB3D8ECB3033EB97992C669F641EB2C574C8385DE9B98
8B3DFF7CBDDEF996A1571F486523736AD9858193AF29277ECB30065089CFB6BA
70F8DB7F66E7AC93A047AEB449672936825A04C23ECE159CE296EDA21732C58A
ADB8AF2240106C125B1DB1A1018B667864BFEA339AF509DDCFF2CE55D47DEED2
00415F06858292B906FEE655C80BB5F9F4F3D5CDEF66E4FB9693846983A37120
06AF2CE66E595D3AF480C4E8F0AA374E82ACD76B808C58CBE18BEEFEE1BA34E6
254CE576DCBA66DC3AD754297386ED2C43C26B7532E1C3EE63B4DD5CCF8C7A7D
61C3B7023ED50B832F65F85B770E7AC2CEA81E2463A5> |-
/D <1C60D8A8C9B6F14C358FEC14AC9A026A34C4EA8E32A59B5BA6D60DA04701
2C0A53E33F1411DBCA3A9948F3E813D506E824F805FCE94ADB5FB5B161223F73
3195BB14E052A84D5D3B553BAE669C7C7933C5F10C18ADC396006C8CE925D098
3D841F20A2FB29D7F0CFE578CC16341C99B91BCC9A3F84FF67441B24D4B346D6
39796579FB62757445B21E31B5A9A65FB33F1B24A7A573DDBE5F0C1295029D80
84EB8E40D02C55032E9B0254FBCE22F45BD5F723050AE8DE30A80B5E171BE9F9
8AFA987F94E684E82CC115D1D88660D0C1E2EFEA4C237874A7535C58F2859C5E
8D8C4DAB01421671832F33FA0C50BF7D6E2BB436EF1A035151CD452153DA5C6F
12E2DF7582ABABFD1BF3> |-
/E <1C60D8A8C9B65DE77B50C53FDA689ABE673A5D349F7E6283518B69F7BF38
66CC69EB0D8F4BA32123AACEFD6A4F1D2FF0275B2FD2C778900A204D2FF910E0
946C8C0460F2959F221DEA1469F53C8480451CAB3C4422A338FF437EB6AF6DC5
63FE49F8AC6EE06682D119FD5F26C8DDD1A8730D028FDBCA564544BEFD8F6104
4CC1DF2E4BF1BB455E84AFDBD4C6449D8A5DC4CEE8B56D28715F4B05BCCAB594
6885259034FBA4C3093BFE0DDAAE731C732865AC55ACD93741927208AD5D2780
8E187CDDC552BA6E87BB6EB2CAC91526D861582C8E52F99BA9425A9918DA46C8
451EA83DF92CD5C51F88835CB6AB3DF8EDEE6A094ED550BE03BBDB146D3850C4
8B5BC8EBF77D16B5837C1B57761DF4BAB7FF1095A157BA4DCC71F016C47A0ADA
8F792608683E23FA455D35155BA66AE7E0C38782D207F1D249CAB8B667101FA0
AD07B3E7F02D8083A14FB678E64FFFC7ADFF> |-
/N <1C60D8A8C9B6E3FA5133D9B079A4A9E92518C516C794D3ED3D811A0DD901
1073A9801590AD61F4073F5B084DCA1EE496200D8F84BDB5E820731D66D0C49A
A124D85DBD74E6DA6C5EB24164E86860C1FA193AA1F4E7E081D2A8EBC660AE7B
4298DC914F4F6B209F97AD2B0BE78A9EF4693CB8CBD6C74408F9ED02AA7613C3
60DE6A31D91749E47450D004B5974FC3C1D340B3F79F4F8969CA5B98229FDFF3
A1F40D6DF4192E153AE8057E4C159355E97649B7E389085E3FD8F58E9D443D94
71121F3CE272D946C6599695CD91C1CF1D00521B13> |-
/O <1C60D8A8C9B6FF86FB89917CAFAFA7F0C34324B0009F64016F01553AC5E8
C49CB02F4FEA4FD3D7FE4A1F4E5E46FB158006A6D39CB0132B5F95F4C9943105
DF3B3667ACB0FCD5FDDE334961067381725A2919514C647AC30C81C5C2040FD3
91FD161C1C77FFE89FFED2EB6ADF33916DE0630321BDE33C039773B878BB726D
34018DE08B489B9F4A441AFCFBE3BD3F3C8E7A2ED625741B2813B27C358980B0
C8DE1F4259C73075CCD13BA6E51AE008D1BFACDA9E80CD0D508D71673E9A17CC
B8AEA5E5C2D84213CCF52A198EF72358DFE1072603061B6141225C1A30BFE79A
535F36ACFF18FDE3A79E580EB0B07C59FDB6ABF95F24> |-
/b <1C60D8A8C9B790A84E7F4A2C78ACD4DEB72F3F52D082BF36B9364555A7A4
2B04173F4D49E80AE1316979B63D118F55930B8278654AFAD5031677B24C6016
E026EA6D496399945BB425132D5273AF303E220577342A1BE8A6854239CB9784
C455929C33642FB632548E93E3D5467CCB97B12B0DEEC1A58EB0D8364E434DBA
820FF3FC4C4769B4EF665672228A4E7819AC0F95BC065E48BC8A193CF7179B57
D75D985F34E160FB00A201C47DD966EAC052FC49D21EE3150A19AFC800053E37
AED89FE6FACB562000209EC643461D8C1B909FC33F3E8974A07E1726AA183D7C
EDE5552A418D8C6E587E81227B05> |-
/m <1C60D8A8C9B6B41CB5D4C48B9681EC1D908196CE01698BC081C2044431C2
852C122398FD6E3FF379E4D497D355FFB9C3BF6EC3E1ACFFD62C3515856B0C32
F014644C67610B406774FC731A8D279963191160DA845CCF3F76E33D9A4A3C8C
134431A6F65AF22BB0CF81FF71FF14041BE0EC7A0030427815E450000BC95D95
1CF2C1125D1E7EB4DE5EBC53745220924C3312DB253D21782B630BBB36D0A26E
A49598EBDDC45ECD54C962D52828EFFA95B6E2C8A2C8A79F2723C94FE1C247ED
8D4DDD907BDD98654C056FF090132E8C6FB20624A439829AAF55EBF17C6E48DC
6EB09500EF591E5DC211D812012FAF711BA1633CFEAA24229F8C38824F91E60E
46A8CE170A0D1B5E430A4D7D8591A4EE257D9C75183B73EC88E2C219C27F07C4
C580368D52E78D6CA67714583AC5AEB37877CD36A0D0C5D8683A0785F9120736
AA0F95DD81847E14FC4BF639D7DBC0AEF7C43AD2814D8FE80A35D005F904BA47
1F01C391D65E66F10D984DAC2CC28F766C2F43FEEB21F52A1375FD6EACECAAF1
5E35C34EA91C81203BEB9176AEB2BC964F2C3C2395E3C0F39C6544CD083E6592
4F13E8C2BABBA295AE91B6218085BD65C3C5272F558D2259A5B422B472C4A53F
CA8DC1C93BC70D258ECF6102754B911BCE2C190C10E15147D7FDFBF0ACA74149
709C7C8263CBC26E826244AB4CA8C8A41952C80849> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NDGFLL+Euclid /Encoding get
dup 44 /comma put
dup 51 /three put
dup 65 /A put
dup 66 /B put
dup 68 /D put
dup 69 /E put
dup 78 /N put
dup 79 /O put
dup 98 /b put
dup 109 /m put
pop
%ADOEndSubsetFont
/NDGFLL+Euclid*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef 
/period /.notdef /zero /one /two /three /four /.notdef 
/six /.notdef /eight 8{/.notdef}rp /A /B /.notdef /D 
/E /.notdef /G 5{/.notdef}rp /M /N /O 6{/.notdef}rp 
/V 10{/.notdef}rp /a /b 2{/.notdef}rp /e /.notdef /g 
/.notdef /i 3{/.notdef}rp /m /n /o 2{/.notdef}rp /r 
/.notdef /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
NDGFLL+Euclid nf
NDGFLL+Euclid*1 [12 0 0 -12 0 0 ]msf
79.647 54.2344 mo
(MiniBooNE \(neutrino beam, 2011\))
[10.9917 3.33594 6.66016 3.33594 8.49609 6.32373 6 9 8.16016 3.99561 4.66797 6.65967 
5.32813 6.65967 4.66797 4.7041 3.33594 6.66016 6 3.99561 6.98389 5.32764 6 9.99609 
3.33594 3.99609 6 6 6 6 0 ]xsh
72.647 30.2344 mo
(MiniBooNE \(antineutrino beam, 2013\))
[10.9917 3.33594 6.66016 3.33594 8.49609 6.32373 6 9 8.16016 3.99561 4.66797 6 
6.33594 4.66797 3.33594 6.66016 5.32764 6.66016 4.66748 4.7041 3.33594 6.66016 6 3.99561 
6.98389 5.32813 6 9.99561 3.33594 3.99609 6 6 6 6 0 ]xsh
209.647 143.234 mo
(NOMAD \(neutrino beam, 2008\))
[9 9.33594 10.9917 9 9.16797 3.99609 4.66797 6.65967 5.32813 6.65967 4.66797 4.7041 
3.33594 6.65967 6 3.99609 6.98389 5.32764 6 9.99609 3.33594 3.99609 6 6 
6 6 0 ]xsh
285.885 148.468 mo
301.782 182.065 li
297.936 178.838 li
308.062 194.395 li
302.457 176.7 li
302.514 181.719 li
286.619 148.12 li
285.885 148.468 li
cp
.137255 .121569 .12549 rgb
f
.866667 .866667 .866667 rgb
%ADOBeginSubsetFont: Euclid-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
NDGFLM+Euclid-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/A <1C60D8A8C9B6E66E6CDE186071BB077B78B5D473635225B56D2D319C5B2C
A3B403E86BFC57FC1EBC6388D3A7E6D78647F1B4ADF8A499342EDC09DCA504C7
3BB6231D4C04EBA9F5E24B382FDD188526A0779A14E3E98B6D06D102362F5B64
B010D644D4BA2DE70DFEB972A112CE2CA506FF59AA10F2798094EA660E942514
4EBA440354A4FA54D6683149B28B31482A134AFD9D38015FDAFFB8DBCB7ED4BB
6765381C022F806BBB31C4F8AC1256DBB0CC109528CA> |-
/I <1C60D8A8C9B70EDCCC4CE56148AFF823711DE6433113183EA440AE268A0E
2949355CDC88D3F2137A75B922A52AC18D26C86DD9F8AF7E73D778F2E38C734A
A555> |-
/L <1C60D8A8C9B7C3C9ED8B636513B8ADC05BA494A7228555713A5460DEA4D9
C9733BC8526F03A83641F39FE9618E2863CC0FB666EE5510EA3ADBAAC1297D01
348C94415769D91A98995B621031E7AAB3EFE2> |-
/M <1C60D8A8C9B5D87314C7E4732BBA6685A8F32B7887531E303E0C2EC74F1D
FB3E16FD576F3CD043FD1BE53D5EBDDA28F5D1524D1FD914CCFD67A8B4F9D5C5
AEE10F238385F1AC27F7B6E1539CAAACD701E32EB7615AC128999C73F053B306
87980D095451E78AD4A3AAB08291AB8242517CE93896EFB4949A44AE99BC8A43
CE2CD4D7BFF71839C59370F4F8B07800FF8E4689E97485456512A45C22AFDF4B
64B9142EC027AA62F7E5817853C924B99EDAA841D885EC9444FCD481> |-
/N <1C60D8A8C9B6C2567A0941589B4F999B826DA1EF85D4661ED404B3AD8CDE
15504A4533E6FC3A41F1AA42D0761380883041ADE96BDF201EA964BEC4149B7E
9E1DBB6E22BDCA52119A7FEAD7F49C9264C72E641B8B4D57296A841BE00E8712
76013E1A8B8F420B866A35F5DD2CF9347948C0BB480CDFFA18A1D7C35348CD3A
98414A550FFAE0278E50FBCC81613F7D9C864D6ECE11382AE7B233395CFFB47A
87C45E3FA13EBFD7F94EAD272B944BA2AD745F8D0BC7F26D465ADBFCF357F074
CDC6F9491821812F1EAF45845ED88BF69CE8CDAD56A26B279F563214434F2C67> |-
/P <1C60D8A8C9B65EB406315173198F2908D982BDD7F1AB6806C4FADADEBF13
466B0E695E665C9681B2FF980148E13559FC249CF46FF05A97B9BFDA23CB6F2F
3C83738D8DAF6B58213080127337F05D00EA8F95B97DDDA332B3D359D9FC0B1F
9B94B251C77BB93FD98D49EFDBDD8643E96F6884383EFB7DAF12512C42E37114
CC7EA65D97F67B1D5D6EA974200D6FD95366605CD71146DDEAFF88F865A84AB8
9C5B68061493AC4D9486374981677807AD6C6DA5BC263980E1C4EA9CC16ED447
6B18D5A6B4381A9F983BC023C8B7DD7C> |-
/Y <1C60D8A8C9B6E66E6D882107AAC0A650D3656C548C62621DE04959A26420
00558597D41CFCBE4D00488B4AC4FD39E4CA1C987D558C1E31CA5D38AB47908F
B9844D85F1B6CA3C3D030F8C9364785D500092EF2C5FAA53BFB73F563EC23FCC
B9AEF61421AD9DBDCFD0DA2C70FC25E774F4F18D19C0BFD9CA3EC0CD4F9FD408
0DE150D1B6993E3259E032B9A1F0A29F06CF4510B69B6CAA36D027DE73FDD3DF
6803095E0A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NDGFLM+Euclid-Bold /Encoding get
dup 65 /A put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 80 /P put
dup 89 /Y put
pop
%ADOEndSubsetFont
/NDGFLM+Euclid-Bold*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 23{/.notdef}rp /A 3{/.notdef}rp 
/E /F /G /.notdef /I 2{/.notdef}rp /L /M 
/N /.notdef /P /.notdef /R 6{/.notdef}rp /Y 7{/.notdef}rp 
/a /.notdef /c /d /e /f 2{/.notdef}rp /i 
2{/.notdef}rp /l /m /n 3{/.notdef}rp /r /s /t 
/u /v /.notdef /x 135{/.notdef}rp]
NDGFLM+Euclid-Bold nf
NDGFLM+Euclid-Bold*1 [42 0 0 -42 0 0 ]msf
64.647 377.234 mo
(PRELIMINARY)
[28.686 31.9194 27.5103 25.1997 16.6733 39.8999 16.6733 32.8857 31.7095 28.4341 0 ]xsh
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/NDGFLL+Euclid*1 uf
/NDGFLL+Euclid uf
/Euclid uf
/NDGFLM+Euclid-Bold*1 uf
/NDGFLM+Euclid-Bold uf
/Euclid-Bold uf
/NDGFLN+Euclid-Italic*1 uf
/NDGFLN+Euclid-Italic uf
/Euclid-Italic uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 13.0.0
%%For: (Vadim Naumov) ()
%%Title: (MA_QES_Effective-2.eps)
%%CreationDate: 2/11/2013 3:18 PM
%AI9_DataStream
%Gb"/LB7&CCZLIU:T)8gSNk6mJ(Yc4Fh;]iK\5O#?Ce9j?.D%S^mVdSf:e4DGamQ]dh^<&4&cigX#(rlt!A5p6r-l9+B\,$=?^m4Q
%W01VjP+a:eWL+e,=BO3o>^5'jTS-oj#ait5blMK<@0!s&:c2P!:-$)EDgCa,=l>X[DE$l?rLgbOA\Yiol,9\iM^s5KRSEfX.FWC^
%Ddo>jhsLM]^0bb9.bLuFIW$4ugh*<$X314^MV.a1hrus:?KH)k!Yb>*!DHm"lG,g!?;F0pr0$g0oY,TFof7G.84l46A;VrKe,/"l
%COt6>IqN`+Ul9mM]K'X+;ZP)G3,LLdK4_IIm0.CR%iE/<JE:YhfW)f5p8I+kh8PW^*&\rIE<*`96DNc[r1N0F,U5T*2+lY((Pm^_
%_r%QpTNuI//)D/FSQ?uQG=d_c9F@+mY6SP;hoM$8p+i?bCe?JYDu'CLX#7tg)LhR'"[R\CFO3[aj3e,s#'f(@A`QY4X1J7AO&@2k
%;"1g#,1-^hG-Ii:HC6IK6N32%J$c$(@0Q[L6c&dm@)KbK[jl*T:<,@VbMa9f"YaLZ2kX;b*L*5uY\':7M**>8X\R@4GsnPef`W&<
%*!?5$IWJ=f)le4-6;_<i;bgH+%#X?6[)SF!KP!4SlObS=pT<EQ\LHomDT*"9>,R#0A`H"ZVC(N=jf#9WU>PTpX*+S&LXnJ-0i%Y(
%f;+>H\egef0!E>=ni)1L\j=U,U&HnG\/(Q!+)h&)D]QII]qEO\3mX]EY?ge($)&<,W_&Lji>S[R+\u!114lZ%Q7]0]a,&QV1Il6>
%nsk7NSd(0XUV4e6ZC^fB7O8[B99j>i(SO!#$\'/qLQMiUme+4NVcclhZR6>3=\bJlii)Zr-0r%%o;E3.)%c9qaF;UAZ.>j=g&ORV
%oAPc-%tA7fo"FMd]ImT.HBMbb_0UM#O9s$V5O]sfP6Hc*g\$_0=IVdLelGDM%]jE?dquniabj<'GlddIg6:Vf!+JfBH@I5&?I5bM
%rN=nX,VR>Yi4"oXI\TJR2n`rZH(('6h4V9_!q;?0^s[N^*0PjC!c9F[Tsg<[g(h)$:O4V`:Tr0IGY(a)MUukNYkQ9-^nA'@mj0K5
%Y6h)#+Xr/0r*!fZ!R/&(-+b0O2PAECZJ5rlY?h,;"Z'9gr&:fbE^@,KdnXrYAD-F!B/kN9eS@%rNAbmfe0OOu;0JFG^R)$On'o$o
%1*C`G3`_Cq[u=hu>@EYW*O**$ZenLNrq*gN?s:GYP.c2"H""fHpNp5PeHb3cP,,6YL@lqH^cFBB9c#MZmAL7$e8i1_IZmT=gXu;X
%G6@&]5O33n9#k>)>tK%cA=CRATM!ZFe&#js.=]h*m*dqFA3-@,1(oaqdQO!GSH2Aikai=^*Di[:3lHRLEtH4LHhHG91*E5MV&`<F
%LJsna.Ac8cm+2<Nh<6]1-Vq?KP_gnSTe"jm9'CX;pA.B#Mfh5aC%8u)[6`<R8XBqRo(fd^DjLt$L.GRd%bF@>3BK@Wh4rW9W&(+;
%_L;q$eY#_J@>IAYirM6qF?lIMqj]!?khn7YY[=6sXaq4O)1C5H:Ij]jkimkN^=23c@E*LtrS`fHSsi"+n@@0T_nRXK!C:2/J/F`&
%]Bl<Mhis^He.]hkpISDLA.@%e([jPLhI*[7?`=n7^#JdHpVVWgW,"'k$\r=OaZ/oW5mYJVn[L4r!m=.IDH6i&@*^P')$jE,fT%U*
%dUk_92>bb1(\msS6+cE3pg]]p@a^\!X$cLeG-\_(YrZ'QBG[U1DLCK0$+J;bR=b##H`Q3d)r4PN:ojtQc[r/6J3q(?:J7lt)'Z+m
%<Y>;Alo07I/?$k@EsD$\2P"j7n(+>0ml*TX)$"FZ-P'VimIRM!,Qo/G!&X\%O_7r*$V3;[H8Pd(M"Ye\0n![P(8@\AM_L8;r*.-i
%B+jD`=g_*@a.'phL3rh[`kdA/2VJ^p913bDcMO^RB%PIBh<eT-65B^F=m1XB#Z<TI2Fq]!%;Dj"&JcLj!@KAQ\3XaSeS;[42ipQt
%LmqMD1Dd.KJ@-SD&R#:]VJ$i+2Q#2%LULWWdehn>e1u=!pA\rmP-g(![=&lGq8I2rdQ03l2B\@W_KK'CKte7X@[Xe26+lR*MIVek
%\jA3fKPeU+X:[[7>suK7\(g@R3eUkD;"pl`9./0dUF]D/5hcHr]EKsOUqG@Vn;!6]e\E9%Lk\IGQqFkfqhHT0BA)n:F:uMsR;rFc
%Ju$kHXA_l]QE=p0q&p\88XPUY+jK6nR=R,B#"0@pJco5D/lZI9,TmqSiS\@F+/!t"97jD+p-6X0_7b^^LgSF_&NSgC5:51+J2F\i
%_fM[t';j#Nnshr-p0b]PSs-egQPGF<1(s$[heC(#rBB:4;O"#Q=BtPR<5uTe7?Kn>,YaP+%Le*V%,t$c-_UsNTFd*uY*i2Y_K23p
%ElY:](mHQt1LM]/A]TAX=Im=p\fJOE#R>?WQdnBrSid!VQ7JLqK%9+eWpDYH<jdXg9BgoOQS)N:l5K]m#-e6QU^gM]5jC6M.j8[H
%;+!#]#UEb'h[M&5))jhcaTW0r;Dhtk7#`2e6s]X^_M$?UGDF4uFn,>lOok?i^P4(!"r&<odTql8Ol_\[(jJ;X^@;Y!2a<Br/m.VK
%2e<%2>gi[(\Gse]3[eF3kZ=Pe(Q,]1?[`*oU`/n7P@,=P@rBVV8f5a70Tn\:2utKTaRBiRHmrD[\ucc?-gP4[L1ZBM,Z*)jZQDqB
%NT37jpGtS.YDuG3e=6WA![(U#G.6M[]nonmWDkeh5"!k#HTY>/UjFSm8AS9`^oP[?ZNsNeXlC:cN?X1YPcloiDQ2$"oY*hrcGabD
%C)jkQ>2QGJADhYu0c;__a`J*(lo1m4V:XLHH[tA50=src1L1't]8qM,^jVQ%>RXYL0=i9V3-<dWdS]^jMH:Z](H>"$(N8I[;6I]N
%@,f]iq/jA3DEV"acnFpkka83j1cY@(AbP&t2KCK>KfJ)rIJ7jRIVnuEo?rqO]7-\1So/(:_-X1V=_l>((?X27Qa.&ZdJ[T^mH;ai
%c.(;#cAB9IH2OmgOp_%sX,pCYlifi0k@M2nHd1*lj\MkXVo3=bHbIm&FcY#t%$TC+SdRO-@4tR65<hn[leZ3]nTh%&9-fg<6Xq-<
%^;>D$Y->-Eh<jlUYE'S"DIYicnrLEIK?ISLD9&18(NTAMS'5Yhkluma<TV-H88OnLVeTM0h`mopfu3RY;+8">a40feiA%an9siJl
%lO3[.nm8."_[q83?Cjsi\a&47Q"d+a\!toA]pGj*G=mf=08mBHEr;N_hHd^dLk+],p8RcH_lq&Rgd1%00!f!$IS*sbbdT#5[r/#Q
%_`4jCCZTrs3+'t^p#iIEoRaN]QMIicZBiWc>nsYOIs'rNE5'%d0"Z&sX0Ito*nTZ'MO\djT^h8XZgi->aYXfWQSsH'LOT*pEq(.t
%Y`d^$XD9MK\TRk<9"2u:XgQJ&>=kmgn@;t1a_k*O#NZ&!m;5c.;3l9Yh.tr=[H(ILRU"N^A<SVsZ?#M]H"5[R1p+)"S\s(>KiIbR
%Hi>A,mMHd0jUU_'q&M!O5HSd0=7/#tdek?+]@1):.IEM'o=-@Gk)FZC7TSnehH%i0-D8tU@p+)I5KP5-mDZrtg0K6HR+UmrYRh?_
%7P9*Ocq.Y_Vm+EpD;XE8."$2$s$Eui?e#7?i*1JDB.(Hsk&tO4)5<VHgKTrp02H+96](p%Bu])K!*&)7,iLI%6!=27JP_q5lAW8I
%m[::@kB1uko?M_8Vi/+;[9PS7oU^9_V,%u8FER#A/_j[/:U?Iq>kPDmSpGnA`(g,frjDMp)1#prmde]Hg3#m"9qN2AY;ae\`iGN_
%WjW[XKktm3!?U[A=Oop[Ns;sEhciV8e)SuR6>iW?7(L3\9iV0^T[uc*YO,Z.mrV/`VX:7hMS5)8iaK#T4LkLT$Cp%4E?!,A<0s7D
%Vces,o66IRRej>'S!+3j.?2Ebp<.V&#;WTr^6\;[Vnr%`1KRgd^)0gsG3dsJi=jL+AC]Z/?MaIo+`ap&f%G?u/6@lFBmI=8VlkDn
%g8:+Q3F_\8*3ZTZfNH>Ic&9(/g2WhuaXcSk=.^>!bBsHs2$M^a>(k#BY@MGAI+R(%?X9J048!3)*R=AJf.l>.p[T9h-"k`53,dYN
%(;oP!8S&?ic&S"2*.NAU75"ZVi:alg<D]:".][pmaftR4c3c(7c)j=X\5V"&p0KGQO/<-Q.T[#RS7-!QNRMZPHP4L#of<sJQ[J&!
%AmThL<i4Qap=%"Wm3f\hZkakLjOa>`C12,"\kc[4lV#UlEA:t+*S6_D>fg!4p._43Y>^XP^V8Oe(*,k(H7Wfb<:09/gA@4A8[%$I
%Y85::38A!>U3PS&?^i"h`4ABd!JcL3r'P`ko=!Fg'Xmb#A\lmR?*(U]>JR]RVH]0UrVZ6LpRB7q%()`o0DDOd&EmC0!SB&@>6it6
%f^JCDO\tu"qt0!n@@";^l'KonIPq3L0@sSBNYaLo?2lp5fe;Vf.fi,/"uWM^:u5HQ9-u-'o'?#;Bsqk]8++$;fXjr$8'A"sr)Lk[
%7nP(%IiX":m(fgZ*N4$X@\$E?O<-B?#jS^e8'A:kn+d=*<h(u"M07u+:dc"%VZ:\J(\$`J7mRu2LCFn0Leo9>1/'2WLdN:LluDf$
%aY@fa9h6;@!^r,YkY):T,\n]I8a@3O1+tBkFs#dC8G(i=a4lP7J</"<ITP`^fK7mnW2j5!lTQn@PDm9SPi@YW4r9SO=aIRLKk#C#
%8'Jq\ii=q_I=H>n#$)od7\/;oquTb6r;@+<<K&.:/h0bm+l\,A%hg[82R=qBR03E,;6nbT&S6Trbo#u<+<,NGa5X`UGo>`\Bct<P
%iYS.<@0YnN0P^e4a]BZ/_Q4Uc,GkoF*'1>*6QC)d"DstK^>Fd,MYQD6[l[Q-U*Y^N/S-#uV!u0Y;(BI?'>'qZLn[M]H=^lE!'eWo
%WBrt^IS2%986WP";(&B)[HpZq,?Yd?@ELF$dl@2]H-1W!.H*\Y>aHMk1#ZlYG^\'oUmAY;j8i7\oH-i>%GnF7>^/:)\lkD)9qY^S
%^!`e&,CkbL&C9Fo;E+2K[;=mf3L)84]e<:@-H$`jmqdB_,K:pC2^I4qCb;7K&5mSWNKmcf':p5G4@DptQB0/ZWU$Bl-X6%HguXQV
%hD=/U1=';'U7FA?>s8E<$uVQ6Q4b9ONMI>Z?f^A@p;TbA+)FZ#>e,VXot$>?Y8<B?F'[T5;G/<7Wo^nDr-f?#OT=[NmmOfsdFj/#
%.V*a4A-)KV-GWB_i)aXF2MC!hLMe&[o&SdRNJ(^?"gP^[pFFA/%%.J0TRJV@R3?Y1iF"(4)`TjH=N<2XVme(,Z($SXT<6#]_A`lP
%D@\NK_MqY4U&+dAnK@Wcca`ZjE^q!g#tA#GA^46KX-rR5`uYPPjhj7#)SmmX<?]f*@icq:#HsF4E=NWmA0+s,FF2oVDB9VCVcQA2
%p7S9^7O(OFjW'M]4/TP,lG6f(C"D]DD?.RBl+o'QhJ$lrD8?<;45\'FO#$W:n*P6]Q5jOS9E,XFHTWX1fj8.-AhSSc9W^VTg:L7s
%fKE55=*"jEB8`f3nEWf@Z8nT7^!13U%s+4*naeOQJ]@me3.Y*Qo6.DDM98t$%i&Xho7j0eS,.C_C'\BWhQ4)Q1+q*c/<_tJL$ee*
%,/dq*SfUtr$i+rfePfam=uMYLohW\VgF=9eB$S_#BBmXkee^ejs6E#Jr6+1ZVW>DKk#Go-p(q<+X^=,QO#r3\?MDqW#);:*3AC<e
%4Z!Q\8nK4]"SF9noAjMMN3FVsDS9EZR$F^Ip-:llg<&\ooR981euuZ+Z$!R+8ip6I)du*2InqoL1gA/,Vh0tbqh<RcFWF0-%4"4)
%Pr?.QMaHBJAZh&7ePb.uVfq@fHu3l0^3800Ds4hHE>NHacrS3d7d_s4I:89s/2qYG*=<^"EX^]=C93lg7H+s%T$9)detRT8a_EA'
%Jnb_IU0l/'\daj>5A]+B:m$7R%\T>#2aG0*4pTB'X0JPgAWN8_A5fbr^7Z3Cq0LUb++7-=F=f^!IAu9W/SCW4i:9B/kBH#mG(6)E
%V[\,n-UB["k\f/"B4KD;=nEQ3p<SniB&Z,XUmGp2Mnh#gbV*&kA,c:<i?$(Dc)'8Q:WoF>X,#+.2V@r7!6fBlcj/+lV;to,*n_,%
%I8<agk/*0p(dM4_-_8Gj5Gt1*[[-[Y:T(%%Lfh+4p/G,ajYciWXY2d!?j^gg)BZ3R[JA>GmaYe7T[gQu(tZ6Ro_IcT/U^K$/"k`M
%loeO?2l..C!=X*)T9Hg<qr:\85V<<Jf]qkI;<6KN`D;hSkP<*#\LOg7e$M?Ak73h[Q:].2=TK.Ae/$n+17XD0ePDP)&YnXL<\M&[
%[8jO_qE%rcc?&+sFoA;k$\pp#AZj:G^#K/@Kc-YQfSHpec,g4bHeSs!k]4eZm`B7P]%L1H5ClpT4^H-Wh-V0[\JUjA#/b7?qY(Ma
%TWV@u0BK=b!K\o%C#t?@]5<"rD)LnMrga+&dSSAY7cA?jeQZ<G\C]*[%*?qF(OXCtSVB)8k3ZLK9D3[U5X<u.O'qAs6L+:Q=R">I
%&2l:CEWS4JK+Hh\o90dPO8q^41<n.!p\jJao@Sj#A@@Rqo5hJ-jboaJI/IN*I-[]pp<J4R8s%-JT^86Gjc4C[9e,DVc2:FR/(5*J
%E^ngWE[o^\qIlR$C$W%p-!,4qP5.2C[lD0$k;??k67hWu2=9!k=-73:OU7d2;LF;A#I8L`"B!kJChf`@`-G#=MeUAF+S"N6Y'Sqn
%-V^]IUN_4%OA.sj$JADG@fOnijWNq9hpS8cd]9RNlf*J"fZs-mEkj<RInX_9GdWdl$(f7>k(mI:lH1SZ09E$:qQ+b7nR!9Zp0R?d
%[C0T4mA%FA^YAT'Y*K8m1Z-/'rc=0`f>Z6^[Fc:Wn!Jn/>iMK`OkTa(qBeVun5n$8=D2@#URP(uhpX&=MTE0?+3'USWL9i7:G86o
%Sh>%os0SEQJ*M2ul_QpsHf`_n'hIE;pIsmp`u#S\o8hhThX3o7[A>F,dF/mSL+=TleRAOSTNl=?Wd)m=I+_^PbT3O3q57Q%l3E.X
%EpJ5tXf^O!U"_oB\uS87`:Fq,(bFIVV4guLe*Up<<fOS7DJs1(K=JfRl-=/AqQ:dsh'srt<,OAjI6_RfS+F(\0TkS&76+iPQq1Fe
%?EoJtlNVs;^";nUP0kBkhgJ.7mr[\\V<$#9r2M"G7`sQ[4*0RWc_lb^UN870b(sI3'I!.KTGC$YWK2bnG.qe"@H`]hap<GJV6.q)
%!j';kZa?@-/rpkS\:8%M_m'V9Q!E'+=jt0q()Q.G;V@H0ZaC[K!9(Z*g]M[O[aVOn>;ul8HBIg\YCVg/m<@DIn@F[3Sk5bmmq\pp
%*^B4WA*rmHh4_V,E'o\SVNq!G1(EqBeAN^JenQ:$a2R11FZTll.dg<,m'"KuB!_(aOQR"7-FiVE^*IVMM=E_rC!q`Xe+N3u`]QHO
%Ojb-GEA+eMqHi+]e6>-_46CJ&0T5bt8+R<JS[kDT[kIF[,EVZuMdqoFDcL#"Micc0RSekt+t>PQqjgNE"ik$u"<(K'q6e\J2;mHB
%`[&'b'@=dp:G?l60ktA=-62t2[G<C8L]R>p[`e1JLq<MUrK;A2LkAjbl/"F_Tg[@dZhh=^^@E!pQnQS$r8onqFZEF[\X>:j@%,?)
%F^*%emCdBJ+/EfhQ4GpWZcZ:K]B*l^[U@Z&/)no;mk#/Y&duBWp>VsUT=.C`Rc#?Fq7Sk6pE9h7jfN:T$O.'F^R@e&4i1jU6um75
%j'?XW+W.sF'N-e"p<.oi10oi5Or4p.@$Ya513B9XOKs:t^0FIMg=00XZ!iHIk0*^acY7_NnI\,WF$Rg^5IJ1`r`6"cf2n$b[^DU\
%cdqP8+#*rrR+aaUSoR=kgE4>rc@aq,:+Ni4q:+!U'h"kKq3nCf^R)e#hn=R[Y'/50:#dR4P24klGNJO.mc[ILl(?:Dia.?h8sh)q
%a=N:DM8:rkhH(5/jfJ?F>AYY/6hW#e?(odU%G!o5jasg#X8"Fl?q.Sng3Sohb]gVP^gUPJ$!Z%L<6l?35,[ued.h)H-<JY<hdEF0
%.:FHbJt+GVju5u7!@D^W,Mam/Ft:=1WK`=1?_0mg_TQH(:>UGu*%[f^H@XB.l[7hH\+H-(/!oZnT_)Y!p,<?CMn+AOQ4_#mG.n7U
%F752-bbu8O:'(E)^Ep+fFR*4C?=.pMpPR:Y*:n9@E;DK]^3%q6dJQ`)l=oXKDh8UNh'e]RL/Qg=Z\qmuls:5F3Vh.\?[XSD(WtRU
%g^b4"bGKR!gd?qN2QtCU8Pn9Eolu?)/n(M/D[,D%]-P@$g0MX6j>o]IV@,//IZf&*9k4Idm8NN49VJQ"]3N2/\JpO`4K<&>e"=jC
%hJJaJ<U<[SDg.\E/j8?sR9lM%pPL/6r\.\]50DOBe"bG4Hr6dB1:5OM(bjB/>aoIT=;l/:,,2!1Hm)S&;odiFV7)CZ+fLRUDf^\T
%<B7MXILacK8R[J:Sq[,+qt)"LE#+6krgSnFoieqol`LTJ'"G=bVRW\sTq+M.UM2QITt@I0pJfDt0SS#];Mk:Ur:YG$="5a;kE`6>
%7e&!+$?-h$?R#XH(-n"=AMA$8]1Q67.WdSS>#+a3[J>SR'\.[#q%.CHfdQ/(1K@2+e$V<eC-?u[;$V/aPKeVT=pXKD]=AZeqRgg2
%4F)01cm0^u?/:8io5Smna>r..WPA'kk%e`?MP8kD?Oj6`>5i'WJZq9.$L6=/K3q`krh#_lr:SotQg=-pBE"'uAXUrXLiKZBk[htP
%YPEn@/goI]05-UH4g1?nQQ+7kL$-p"[HmJmJ_s')]g)JRm/i?:Y5Cu>U<d2&e.)Bejf"1eIbW3EJ$usA^0aRZfV_CA2fIWNj\]=*
%!H(#1'&]He^O=s_KblZqou'/>FWf7nL-B@Zq&?'.C.oRi!m1:4!t02Y,:aFQ[26@1UOe3WmN")nQ)kLA58[`O-!+/I)bgiMgcY1t
%NUeV?_kDREeRW&G(qEZJHd4_tIk`lf%fDLEUF5!1/rWr*+*^Y1>5'bTV&Su=/XYo7n)uX_+'>9UR*7C\r=)jc,EHJb_-_GHI;m%Z
%^2j3?<o_i5p1@4>\1.pOi%0fkIT7:Wks5IihP`?F5b.HW)38-pG/j"Dr"eV0I"1-U)ZA6Sj"$l9ZK!I^:1)fm`5_]U"$3b3)DH`K
%>,%Bj$b*k.>PCC0f'Uh.mi.j;5%=Yg#/1b#ie"N4hO2Vsd&@)u\W@\-q1CVj>fKOmN*k42e+5&`c^[Nja=NoPS,r9!X5PnI1J'Me
%cLkHSK&pG^QnI?SeR%'q.dX%#0"^44qQoUtV69\)EOounQY(sD@gaQU/X"mA2Fb^ip^rmHFO_[niU8Dd(IS,Vmn4ZT^Co0(O"N:5
%K-IG.NOI>MdsdH&($cJ@*$T%uB;M2\Lru==kWp$,Q's>mpDje1\9PJ[RG+?P^Ka9\&)'%IgShM)A9;??*\:hDW:m8(6&i%sDnk8q
%_Sg]$,E)iNje1!5jF5;k''Nd)oQc]><h"nN`XTW;,`sDdGMHlHrJ]\S3bpTfKZefNNKrDh>p*oqT]q]5ZC3o-.HeYsq7FhAgTJ%P
%AYr&:14dLYYn0lDdZg.[/II9)Afs\_-g#re.2E59`(h:H%)\02DU0iaqlNcND)>mfOTB5L=S_4$/.1DbaYr?IZ,U0%UD%Te!^6='
%r5G>V6E>:ic"JeVL[NC9$fT#L4$O;3MJdCq&1#QOnY-37dZ%>F4.Tu(5rcprH_>q/6EmGPE(kSBcBS9>djks-$7)L!RRS(G&7EFj
%3`Sco?s#s!q(`^FbN$Bq_\sVK9KoSH5J*G;Ku"1lR?f%X>/+.RPX+B@]u_EE_KEZ!KB]=/$:tf3qpstq^b<DrO;ii\4H/ShUbHs+
%R%.L$A*&Jp#m1K*3<#h3#D1]ZFRg1F-AMAG[h2AH9#Sj'A'uOb+Yh&I:6B*J`C2>UY`+-eVC=q(R\jhf=K3,u7n^[ZEQ.J%&A7:Z
%*8;GC5`MIDTLkCQT&%=k1g(da2>u/eb1!G.T[4AI0OC8&a.J'_J?s<U_Tsq3pk`J2D['8BN&Gf>6)"cG.5Xqt<!7bSUrq!c4%;OW
%Ac324cUOa4B7RFn,j]N$Fj](tK0b/N<i"/f.2OhTTn\P+D!]i8Kb))RbCanqLT4-kH3B*F]:NbUg68;#E\g7nr5rQmK1`ukC5L&c
%1SAZ\>`K$SQJJDS@[d`"D%cXIWmdITK2J:^]/u.O!7Zoq.&3T@ep9u2nT'M$5UCN[dt#S,(dO(T]*d4iV&<X2O[*3._YMtV"dGQq
%Jm@+m8Y<SN&ilRIM<8]MmF<='rAJZl?1<R8T&6+@e5XR9^7Dp'"Ft`<.phud;*P[%o7]*@BTmT?s6:l,n+?\mmWhO"*[(AUGuANT
%+M*ar5ThQT+5bY#N`1$\W!'nrI_._i3"RLIh$u([R/f.q*1'm('j87C>UC_PAAP`@9N7,qQ7m/OcQ6,_DsFjbZBaY#>tlC9NZJ@J
%Fe[qOG-fN=+mZ'5FF-aM:HEU`BHgLhSA>Mi0`e^]62i^qZW#8>SA6<s?'YcE8Q]Ic?itU='?qrgYnP+ki*L)f%,7/,3Y6\)X]c$0
%T+#'>o8j8"djP$dds^@$grO0>6M>c].D%>\:<1m:i=0@^[MqS);04/e]%p8Zf5`7,(PJVM_-fA_c@qV,p3mOU&t23@Jqh*j$#^rY
%iXu+h"2ejN6HCXDbdnnoLJ,i.0ToVXY`/r8JBFbDR3C^#J<Q]1ibZ:d?@jq8WMilF=s^95"B\d+?DA==r0Ub!!XjmFnbYQW31<sn
%&f[%DIgK@&gs.c7g;'8N;RCL)g>@Y$$g<df/nTY%M;(>FJ:i*&3t4;a/Ohog+n0`uEd*'))5&4sB)iF=4nang&)+QK@9t=[qX'-^
%9*2/5+)3PR=MfW6B_5db#UY-H,;]2d%Y3,BZ:>`r;0+R*__qRlcV^To1iWsG)$eU:LZRIM8c,,*i1LUMb,t+Gm9g(]pZc73=je9r
%MI3\HPjo*Iq[He8LY&?.HdSV#oZ355H<$U^>W?X^GX8p:)?plaX?A1apg]^W9?N-6ga:]5,j.P(hh<c$jorPW>C-&\hBJ?,J^^1)
%j^LeA@;%IRMl8^P_R(%V;B6dp#hbGG+9#([CQDO<$^I/iL6Z3AOd0DM.S`T:2+,>5mr:rT\Hh"k/`!(i:,o7_R+SM*Q>AP>Cc$,i
%\u$ikh680\_8&QA#fR>X`@I"'8jdU8b-:ca9!LHSh#HlaC7hS&LL3h+m1!>_M2pdq8Wfj5%uLD(Rj"c2MNpFDX"Y8ddJWLS-/KfK
%@poY!<H''`;DhHjL6Bmfb7X&6b!N_6LojJdg.XN`Q^!2I9-0ab<eq:ser(*86@c;2!?AHjc2u$-5XR%G1n&7$dBErY!d$bBL6Bmf
%&eOA&b!N^PM60Seg2o.-Q^!2I_\?=K,d`t/HsWlu2L3P&#,Xj?">mPNJ;.)1&<8r)K2tAO\uZ:a=;'=%/N-%$(>;b_Ck\&!VQ'+"
%Ub&n=U?l><2L4+Ti_s>%!Wl;W:Q8?[&0R6X*4/%_YQk<!<JV1gK$5\I#fhctPa%qd6[",`/.$0N*U?AA0h*"[.)&dr\nb?:3*%1f
%kZ3(_X?qFkbQ/]j6@^c7!?AI5J?T6rR8jM([Lo,[.1>N<XOS1rJgp#jm^,)4aQaKpeZr0Hd>P;7Ku'WJGU'Dl=ElbXhQfqYGk%8J
%#r6RZ+,X^,/XV']#c%!Lr$=du'TcE9ep@M+#4.s6'u=J>(+]A5reKFtOe`1$`A,%U\C`(WfAuBUKG!d-CmYa1\KVdgU7VL3qs[)f
%W.R+X/pM6<M')E$]pUiS7tVoDVE&@:XQ)N)4kZ!JH@EGfOA/palR4.Q+.;"oa+%WKatKrf%N6kX`R-o]DS5!o1G:5Dl7YrZ:k=Rt
%R3(hl:JO^cp$"L#/q.DYXQ)N*]ig=%`jgnjMhS[)Jm&8VA&51(SO9W+gb]SmU'$?>=AaaU*#]f<&7-,\lo5c-(lMnDC#NV(7YOr8
%eT_?c8n.B_VkV=A94UtR+-XWh]Mf\7n@r_'BQ>nDbuI+G=j2dJqeS:4iijuLBTPf>!43lW.],0008^<U>St>`#c#QEJ1_A@%UdXR
%?neZ!*NUYUQo`L-\?ta_W<,GKTbmQ.JJgfDcNqarrcu/p@.GF\3\1XidRfT?JZtjS@4F"2$HjWPA]71!AJ)ooUk0A8<^VnjDHIZ_
%+sY-%?7^plA:aGO2URW(XIV;*#s<.d3BV!j&pW8.F*Q+O-Le[-kO>9I8Dnc?R)9R;0nBiYGj7X>KY3(-KK2/G&/0:Hr@i^K!+PNE
%:dk+@6H#%2%RK]1dMsV&]T)+CUfBtBGrs:.8Sa^+o/<2TP?&iPkNt*U-`phJcJ-56SMZ8H4.UV\]+Y0!ET\aegmp]dM*$IuF*@[/
%-LM:ojmLb@-18F*kO,-G8DJJPc.ts,R(2`GT"C1e+`Z]4H76*si_CjBjmAjD9\OdT0Q/<M@a`OF_RuF)Le0[`YXRN1-1)k/.(lg\
%SO;nZSH&pe4)8JS417UM4)a/)4)#FmG00rRZ]dk$5\-X[SMZ624,4)_Foig6ll74nfa3>!Y]GUSB."7"_Tj;U;1rEc4,;`S3rom*
%G2DXTX\PAe@5:U%U6(4-Bi]mHO]g.1[T*_`ELV4>5,t00!,+Y9%OF+8.k*i:,R:Q/1!m.e"0dqD&4DuFRA1l[hFuoUet3\Ai?4![
%Y`^aQ6Et.n;],q8GUk?o_r276:kop=nIfckjh\B-Dgb#l&h.f#>#9skVMIIL63Lb;!lMlJb#$U'!GFb:NYseV.k/@J",C81AKY=;
%c-DEO(Dhpp6jO5"hP2K:qGVpSaN%eGTtIB(i=CaWg>SeMR=A:1#/_bbMbd1E;kq/NiV0_onYm+VKWa5lX&OHR6bcHV7@eg3M^ErG
%o3$Hr>hi$(/6eLW5Y9FY\ZeurVl<J`=He6[lYiJp)mPVlL4URW5ad,M>Gd?PaKjs,a;HZEWb.>.Kmq%0I>CQlR/D$_peV5a+jR[?
%gaSO)P@0*%UZ&Eg7A3btY^"6^fQ=%Di)'[i+a=dATfu$SbNR_`XJF419QrHO<@6bk[RNp6,HG6/3_J5XfMJTBJX6m/'-!^%/k]3d
%Wp%#6<bO>*d)-1lX/jI"Z4oo42-rc@TIUL(f^P*U'/eAV()*`0RCb*+ZpZ8fdl)j(87liMT&\0@pE;aAnsORQ$aOZp1$MJ4Lqp6H
%`lG=)%#:ZV!$qcP#UYG[L:kam_6.P5'K"POb=(hVS%EOf;.r?ga*%mFbZ@_c*"j?VJjs@Gfc'1WJLFu!AL0)RS$/,IXX."%!/41l
%-;g7%QUeA"(H#2?"U7WZBdf0sL/[)o)!D2n_pSld@oMCQXQaOn1+eW,b(gi;p^48og`DbaOT[1$fqHR3ZO749P>JPqg7&j/#"qR1
%.]DQI,l2A)U$RjR.:=DO'P=`i\me)m;/!@6[PbM?6A<^d91#F;/=H]Aa;0O5>;=-2,1j2XTpcQKhk3[GMkM$Ye^BD-jV01P[5CmE
%!mM.M674'H'HkX/"jUY(="&#e!]>nZ09K)U%Y[ujA!3rSU!.:G!k:_`ZD]@d4J5J45A'bhF."E0W,$BAeK`>9R]M;0``/LAK\R@,
%Oce!N@FTZATb.:JU)Do\eF%"D=_;7P"!L=E>+-=t7kt<$ZECtjc/aNh3<>N[m%e7XJe\a6Q^Lu5%&+aXC_AJPRM4@nRC`]9iFT0"
%g]]*B"hB7^q3l@@65+2-0"T=CL&)hr\[Ykl@kJ-UWOP`f6`7nnSk>+XQY>T!HA[Co$Sc&siJumd(6b+LPA^UQ#)u5L=n(i+2=a+#
%=([>f+9%qsLlgZ++91`KJ,AcnIf-Yss6[jVqsj\$5<`&oV$XYamuLX72eO1;`C-5>Yk7.M1GYIHCN4Agc?Dm`)>RkP[tgKX7&J(C
%4m.A6H>^_KSI6G3r,a0T\:*%hZTe"XA77#n>d<eo"(+tO[c4kH&"s"Hd\>H(M0ODJ&]@@EoU$JI=6ANsD_Hn&SP!nsJ;;7V_\&R>
%4/&BImBFLlJuOg5%k&:hB3YP<4!<6kKhe!"Y/Nmt]oJg,VXp)t=p1%i4Ymsfa966V9IhqYVC>Uk1M3LX?*n('W\Yl4nd#=LTW&9a
%0mqtHbbc9S@VSd9P<*T#WPik)CiF%0%"T#%:Gh6h,?T7:oT&,<$uVW(M_Opr\J$]6dD^d9NVO]LRsfBT@=c!B,P2SlYmD-T_\TgP
%p6.P]nA,;&n3R:'PM&V<qVl(MG7ZmI+["mHs6tf]+%ha+k6ISP`rgV\#/'H<3qa=Omb;M,[go3E$uGLp6Lcr]HJ48FF!./CB:G7I
%&.X%n9)o)'\9C(5+oq=733sWjG-hmj'ibj:<t_BH&8EeY;-HJG9dhdg3P\7/+E<c.p*P(>IDX_]i%qb0R2dY9_NS6+ct33hM3Lt6
%i..\]]kKa)M%B7jJounm@Q;AH8^kaCcqo:jL:qFsW+4tIn-KO@k5ca["?r5)BlPPn@P@oZV_Lfq=^7f.g%#JY_8@`a%MND\"@s32
%(c26CiW-&M#S=m-RUZml;^'!h>?A\eVCL)h!^bfK&J:kpYpha;au+fl9nsQY5n=Zb)]3*8gM#TAWU,He0C.#L='e=fg@LKH+5H-,
%U_46+X:T0US?Oa73JL>V5pOMV/s&7,LMfe"BGF8VdMnZp#q-6q+&WGNU,o7-GS!=dJ/]>7-7')X4.tT6`\`c?n0S=`N2r;lP:<1"
%dK392c&>$.E(j1q.j=52$HVK8"[kGUgS+`n"60_*LDdllPtA_Bq/8q*gQMTFjM*;Bs#!G5-@q5kM/HNc3TsCk;S\Wa_Psdi7HJeY
%/R.2-2nC*S&^[$e9<i)^O.)j#!olbtl3]1pcmK$J5Z8f#14V<(Lm(jg8j]eu?n4.:[H/fiC,AUTZ]7,=]V:@<)$s"AG7t".UmZ3b
%]S6nsVUJsRB#9[A7uHd9f+_.'N)bsWS0AFWc%G$oQl5NGr9.=iV^`I^[UFgo*GINW!f^6c7A0nTGaV!*["uSU:rZq\;ed"7_",BY
%$Q(8sE74j<[hYrC_'%CG.,8eb]X7<aU):+00EK=9?;m^?8p">_0SQW7KIX'3,F7T4BVfEqs&0U\63TL$bh.`aVG-`c-t*])-U'jS
%36.XuB=88K=mV,\?5C5R3p9:PKrtdO:u]*g&JDggW[,N+efb*N@JJ687N@/X>@b39;e:q5AsHsp2]T-PAj["N?ZC1WDS.HZ("JP2
%4?[-*^fpgJ4KKUA'NVI.8ADB,9dmH/EES)h:4P^[_uX!Mknqjf_'7;fWhC=0Jj04Cd(_1)D[ZNu6N<d6ria"04'n;')h0>($1c6>
%#)oi]]WQtUX!=r?99Q:^k:oOD6Yo3hoH8]nkB@b.FG'lF@)<-J1l?`un"6,"@?7Bl]Gs"u_C!2sC[q3+#IZ$KFKgIM`3B/`?P9!H
%U/8FrWS<AJQj25.?r]ppMWJbN3]YG'>pXTO+Wnr%r_5_U8EkV#Z37F0#If-f$3+!+S5D=88,BtL,pkjC&7*=6>!-a<bM[`Z]Hk"X
%Yf[OY"QuXrEn$XD-^M^u^?`r\8+-87Uj%Wg&LiAfltDF(#hJcL?&N`&XGZ]JH"Je.dt=!g+RXoh)EUp+0`i5%TUHXfhY]ZJS;Cql
%;2f.]a8tCk'pgSY9'l6ZnmtoX-"UZXcmGl(JL2la;>c<@K2rBaI8M,55q2r1r?<'jcOWYf-S#lh(kXS=%jfCu(uq?j=L[1Fq-,S'
%/*?j4`>j9T&:8UAK;Hth-94d>hF]35cnYk%I4+!grD(31b/@AYIc!ioJ*LW47i%R73S*p$:;VMVSV2VBQ`':>m/sGGgKT-Q'a"cG
%bDN`&_s<;`E8OV8J?]?`fL&c8gThYeFBqoa=HM:Ck[hBmWiWER]ISk.(#`_$+[gER'Ea1EM[DTu].8d7@!5[PfG`T]`S/5QU-]-.
%J/,q4;'?@[.uFAknj)L`#(7=UGZU+HDT![m>u:rg'D0+t$5Y!c*5YEA+\[,X&d&GY8dZ`9MinoJFAl'C'4$j@@%s-R65W4'$,7pG
%[gEot;#oRPU_"l;m+0+%P")Ifmots.!2B.i]Hp.F9FN:thj).?#N#;q]dnq/'(d4jH*H]1/P-Pmmots(hidX/QDB#qQDD:kM,uXK
%Eg(l4_U^S5`uB>8a-OgXG.E`'5DXmj)a"]lnd`I9fJB88&+hKHBfd`<8KXau'0cE+r:mP8rcH$_Bd7sf+&l2#B4kFZ'$-KAZ/6kD
%$]XY*_M:]<R<6!pDdE.C02S'o&UfPdOUbP85NkZVnu45jqBWK/N/&$0rG3n9Gdn.?;a6.NN<bDj<1//!`>O#$1VT?Yf_C,8nD70X
%diC)P9pc^=%f*rDVBVX;#p8gH4*Mo%oO[gXf<X+n@O)ZDFJKAMl^I@-f<RRgMXdA'pd]U+n03!\ITXT&\ZQZ]i7G@H>W[j^hO;#=
%2"_Fsb_i&Q$VJ6iSBu,G>ih1e-6#mk`XSpr$-0Dc)H6j!%16"46TlC<e6ubH@>.CH0Z#Y[Xf7I!;K#Zj0r-scK6H's:b7;V9t"_n
%C-J^-Z#@X/^MtK&0m!kV+[)NeBP2ccY"$O^i!?&fD.NPkLmKQA"41o.7e(MJqUT$3$&Y%jrnq^So6cFGWO@sD%8bN9N#4:O+o&RG
%Be#M9E7LkD)J3-LV:i0c56r>?+#3p8^dLUkVs0Nt-Z"1hD8u+$i<Q4j>Z\d2RBC6BoW^5ok2D*R-g2Q6aU6KEcnA%hH:A=):?r@$
%OA(lSmAG(u[hFkHl<o1-KSHZZrU%0Q1r;JM9,iC"Ug"dA4^/jQ]FY1fG[JY8M3"%D&Gugm27`,'fif!.0hmTu^nNiq;DJYFW5YWC
%rIDccXfu>ld:ODJ#_!I4oU)j81S_rp!c\THfj\.lgN7%6TOIV&@gcgDBFnbsIL(BZ>Q.L%7RB"(/5%mo$k3l3^It7j,*2!Z6-jC+
%b("?fKj8&9`X'd2?)E`<jg",/%XP#!Ocm19>9G^Klj'[rZK7HP_uB/+K[X",UGonhs2\p_a@EE,ht6RD@-MXCo1q0*gbU-Y?rNVL
%@d.uM"!*[:,(OkPadT6X%klq&.JP8"(]gAkO@n7uaQV;B=B+3-XW,'#9O7uF1C&m89j!rhkKo:HDL_joF3%gR[i?$X#,s/&U=.K[
%Z^$o)CDQ_P-IBq"l):P8:;?"kg1J3Fn?$66W^q3p1F7YoM'al]R"TVtDroAhL#+Ke+YdC0FN1eSEMl76fnUUXM!e5i*EiQ1!c(I[
%/I6JMQ(V)Ug=sU\e11E%V'?pfAXo?%nl!Ha`&DZti@:FuP1O14`GXM:@J9'JS$IkU#&sIlJt[#'$3acdd0t&N+#&lJ!l$%6GO7C[
%_D)`S/OMKF9#67>Dk_$%p"pPfbtc>6*VR`P[Pb!+oltP?C!ha%9HI54el?b(Tn]0h4!oaO'8D.'2bXKb)4OTEJ0pk<2'%M;Qs,%/
%"a#th2?XR6;)kG)q7uMK67/l8%s)Q=!6"iMii%*Y<8<N5=p3&H`a+N1ehJ=0(,;;aMC22KIWlu0_VnjI>2H'THGW]&HYAuqU0\F2
%#\Y@7euURZ`ap8;DN)mV+^0C5d%"Z@&TgDPAUrrD9Th<?fQ-hs`7,><(=KLJ)5rIENoc)":?;a"3lb3jRDoq+8*A)Yh2kb^#qRdh
%D[$1@di0lr9ch"Gm3s4!ql`j&i%LAdJ]Wo`:(d,b'EU+L9)8*67F7G:@d;Mij?atd5k#2WMkI>>8lKk4EFr"G<"f<`#cM>R;udr&
%?h,NB29cB_P21uZ1rV_08b9d6BehNk0W#+*NZ$_+RV2].T/Q`er.;]`gC4/'qbJ(0=FJ/_L-S31T`8l#!g!+BipI5[AU'@mcsMnO
%*=qUHkWQhN,3TP_$5pShq]h7j2EXNh$RrH".11JMC;]gk`Y$W@MkrgdFOIN)4D>,!7(,[CXNUAF'VlFB?,hqd*07rs3GsR:!V.hs
%poh`_jRn#I7dA6OAX`6,*<kdd?@>II_6cdiXFj3I[\JrM?XS>A,EO`1ps'7$6%c9%R.c7[g&sYHWZfUq.kuN?PQm48\R\&563HM+
%U<oEHR%h\'oT-:qp&NgP,eT!k*^D7R@koeo&**sLRXT9(r"RH7O"oSq)e!t5)/l?0+<?)GgV><>n?U?31EicW%j:)B)$LG&U/5nt
%r\[46<=BcQe-&ma6!fL*'EY5k@<"fm!.VmX;Q&nr@hrZ9^sj7A'L>5+$>n!nb`F,1c2]ZL#KCi!>rd)CHbm]+<%OQM26Rk,NMZr5
%f"19.:NG3,PUs!?9i<S4\ii:IUi,#g'5OgNfHFPj9A]8+Ze=g@!Z0dd@0A%4o7C#<%4J$@f9<k^]J9`Zf%g\S0S%i?^p8F<%h;bs
%*'fsV+FE!-IP#M#p$^@a0&m?e!AqK.?;hl*Amlj4>57U-rr]l<1S+~>
%AI9_PrivateDataEnd
