%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: cvsv2lmn_all2.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Vadim Naumov
%%CreationDate: 2/11/2013
%%BoundingBox: 0 0 562 371
%%HiResBoundingBox: 0 0 562 371
%%CropBox: 0 0 562 371
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=1200 GradRes=300 Text=0 Stroke=0 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">cvsv2lmn_all2</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2013-02-11T17:29:05+04:00</xap:CreateDate>
         <xap:ModifyDate>2013-02-11T17:29:05+04:00</xap:ModifyDate>
         <xap:MetadataDate>2013-02-11T17:29:05+04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>172</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgArAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9AaXrHm+f8wda0y6sYo/&#xA;K1nbW7adfqsgkluHAaVGZ+Ktx5fsBl6fFy5KFU/n1XTIBcme8giFkgkvC8iL6KMCVaWp+BSFNC2K&#xA;sI0ezt/MPnXzabnUL6WztZLAaelpqN7bwLHNYxykottNFGQ7NyrTfFWQnyRoaiputVA8TrOq/wDZ&#xA;VjSDIDmt/wAGaB/y2ap/3GdU/wCyrDwlj4se8O/wZoH/AC2ap/3GdU/7KseEr4se8Lh5I0QioutV&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:1FDCD8984E74E21184C48EDC2BFF965C</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:20DCD8984E74E21184C48EDC2BFF965C</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:1EDCD8984E74E21184C48EDC2BFF965C</stRef:instanceID>
            <stRef:documentID>uuid:1CDCD8984E74E21184C48EDC2BFF965C</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>True</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Euclid-Italic</stFnt:fontName>
                  <stFnt:fontFamily>Euclid</stFnt:fontFamily>
                  <stFnt:fontFace>Italic</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>February 1999; version 1.5</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>euclidi.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>EuclidSymbol</stFnt:fontName>
                  <stFnt:fontFamily>Euclid Symbol</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>Version 1.61 (August 2004)</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>eucsym.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Euclid</stFnt:fontName>
                  <stFnt:fontFamily>Euclid</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>February 1999; version 1.5</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>euclid.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Euclid-Bold</stFnt:fontName>
                  <stFnt:fontFamily>Euclid</stFnt:fontFamily>
                  <stFnt:fontFace>Bold</stFnt:fontFace>
                  <stFnt:fontType>TrueType</stFnt:fontType>
                  <stFnt:versionString>February 1999; version 1.5</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>euclidb.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -371 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 371 li
562 371 li
562 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
561.996 370.998 mo
0 370.998 li
0 0 li
561.996 0 li
561.996 370.998 li
eclp
224.224 132.348 mo
66.7236 132.348 li
66.7236 82.8477 li
224.224 82.8477 li
224.224 132.348 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.733333 .733333 .733333 rgb
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
224.224 132.348 mo
66.7236 132.348 li
66.7236 82.8477 li
224.224 82.8477 li
224.224 132.348 li
cp
.866667 .866667 .866667 rgb
@
112.032 62.271 mo
66.429 62.271 li
66.429 59.94 li
109.53 59.94 li
109.53 55.071 li
112.032 55.071 li
112.032 62.271 li
.550588 .25098 .25098 rgb
f
112.797 46.134 mo
67.203 46.134 li
67.203 43.803 li
110.304 43.803 li
110.304 38.934 li
112.797 38.934 li
112.797 46.134 li
.25098 .700392 1 rgb
f
112.698 26.937 mo
67.095 26.937 li
67.095 24.606 li
110.196 24.606 li
110.196 19.737 li
112.698 19.737 li
112.698 26.937 li
.400784 .850196 .550588 rgb
f
0 0 0 rgb
%ADOBeginSubsetFont: Euclid Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /Euclid def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 45 /hyphen put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 52 /four put
dup 54 /six put
dup 56 /eight put
dup 71 /G put
dup 86 /V put
dup 101 /e put
dup 108 /l put
dup 112 /p put
def
/FontBBox {-40 -252 1026 898} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
17 dict dup begin
/.notdef <1C60D8A8C9B5EE31F4> |-
/space <1C60D8A8C9B81F2CC3> |-
/parenleft <1C60D8A8C9B7361F026C90415150EF73EECFB0F5D1859D81A957
34A88F918A757D6658CD63D670E6F96F46CB32F26F4B913D0ABF1C26A72A7BF7
EFA0B0847CD7F8E9BCD53DB080D1BDE25062D12FC483F59F1D61CA37F4AB8D77
7F4342DECE0641880E7189E6A84097D60F2FBF31A46C96B6F5DE1E0A62D1D5E9
2AD63466852A0EFBC940CCECEE998385455C7B10514CB2DFC712D2FE37D7C401
D24C97BC6FC3E24FD582C0E743013324C4BB17A590B67F54D30767812C> |-
/parenright <1C60D8A8C9B7361F021858F9E5B069E8CC96BD5F64E200E47B8
50B721C1CD244D2FF5E3B6A434A87E1C56DF9FDF2975A7B782219354D400590C
03D6E3954934871364E55D05A249B0B731086E76CAEFDBD8C63DD39B280EF248
F4A26E70CEABE6E2C41313CE7B9D305AF14325C6BAF30942CCAA5830F2D8E874
8228234E4EA1DE7DC8A5DFCBB6C47C51BB75B4FAE6BD76D28EC4393CE1FD138F
AF511CC3D64B0504CE02032E0EB40A7FEDFAD15FA496540CB87C5AC9346C1503
DE8> |-
/hyphen <1C60D8A8C9B81F2C5BA034F470CA4A489AF6578857> |-
/period <1C60D8A8C9B854D0F4777D328417EA82068F344C48BCA1F161AD7F0
E5F62D79DBEEEB35B8A910A912A4AB4CA9EDA9D4BE5A8388DAF40ECCA50C47B8
1BE330CA3BED4A25870F5> |-
/zero <1C60D8A8C9B7A73DB6EC90BAC169A0E3792238491ED9BF3959CB85FDB
F53DDB4A738239EF7E5EB5E723086C65A976FEFE61B3D79BB5150CBBA50EFAC2
44B23BD3AE36AA7FDF5832319531F29066A3AE2BFF7D6028E22DACDD11BC1A91
AC554381BC726955D5BF306B56768CF9ACD8A6A2A1E5FD66FF7699CEFD54F1AC
53E25187E990DF1725151F6EAB4EC8EDC4A80ED5A05052CE869A7E418E8F7A94
DEBF81756017B9B5BB480DFAFEEC1B4DD3F29B224B666FBE992CED3BE3A256ED
AF18CB1379F18D7F5C61FF99462FB766EC528A5916D5DC7A92DE139A7C686A29
A84EF7D6FADB6EBA78EAF08335216ADE01A2AC7C03A9FFBC82B7D1473C727D65
5DFBD858E9AE46EF5F5E1F663ED4E5E42F91823D8C0AC7A4B48CB90CDC75671D
DE802024561EA86830BDF7C67E36037> |-
/one <1C60D8A8C9B7A73DA4217147C01B74641ED7307F7D83D0E936BF23653D
097C8457820104F05F123D7B325D5CF2B91834DD3EF06A8A9816387770936FAC
01C1452DB378C5F031556EC097EBBFC6467829A38952439CE57E96A98287A99C
C28F8345FF9A4887C8F25AF95DC6B780A11427C2B22F856912F681971CC552A5
4C25A8C83ACC3DB0470DEBA3835172CC74D0EC02479BE9205A9ABFB6> |-
/two <1C60D8A8C9B7A73DB682F81EA478F19F283935D6A3DA24FE5C201A04B3
4042C554464363E51769CEC3D1EA7CE117AE44CBDBFEB4E5F2D49F35D3BABEE7
BF21227CD02A4038BB735E6C67287E26C465F39465F81369069A3B9918D10392
FF7353DD32753D1E5A3B1B489AA772B911CF8557B3B675659A96E1C0176B7320
C2DCA7EEBC3E4ABABC44656EDFF847401B568F2316889DD55F82833D80EF3C4B
1E908AF7A042B1C642DF1F87FA0F14D7045E9B441F1CEEABF72D11638858DC5F
E1FB5DB378C883C03FB86EFE136BB0AC6AEB9BB71FC5A17176075AF13D382509
95C114FFE4756CDBC0D194FB0824FDA6F1D2FBC2CA2B3033DB316EE11970414C
F97CCFE058C162D9FC2C6F8D4E5FA4AB2852CE1D16E118DBF5E0FD0BA4B12C30
168FF56D14F275F261BD04128245FFE716CE71FB> |-
/four <1C60D8A8C9B7A73DB6BC45BDB48C550A3AFDF03C5A2228EF36973384C
D743BB2CD60CF8B9B9E7E2F94D5063061AF3EBFC8460CA5A5F391B35D1F8358A
1BB810DE5F7894BB445F44358E89B704B505ABCDF22CA7A824240BC1E7063AFB
041736B72282D853DF2744616D78A6F8C9EA747786C36ED25253FE235FF4DDC5
B1A231D89A7A7> |-
/six <1C60D8A8C9B7A73DB6F55FEA080E51BA6F96629EF653F477337BB383A8
F5DACA978AE894883DD60C855EE84F2D538B0B1C92F2550F2C499BA81040E6C5
651CDBB4CE8FCEAA14CAF2E9CF28CF35A3976CE00D16A7B689DD4FADA90C4516
4F2B438D7AC86E47C6C0A7C7803966A229FEE29A6BEC7A7A9D2F692F766B8880
0CAE9065C5FF0681DD650F51998866C366D18AC5C6831DB3458E61F3C2BAE2A0
7E7A9B44218889DC094E31F8E0A518254F8F668C6FACF2EB418B204610BE199C
AC48BEF6D06BBCA518972AFDDF770635107BF4297DAF87D37647D56C26A98D8E
1BA0A2754C2341E55C88FCBAD27E9C1689F7A91D540BDC0E57CE3A640D291C75
4D5EE15212E0F8C0AF3491C9C258A9568009C2E4F9938CF097BF67C3EAD4DC1D
FC96D9C4DD38E9ED3A48B782BDDA01C06F6AFBD5021697D7381913B6582A0915
272B4B65C1191922EAE8A130AEAD53C353AD7CC6B61CBD52124EE01E7ECCE32D
BF5EF745B811CE99F8> |-
/eight <1C60D8A8C9B7A73DB6F69F00C4D80551E41D8AE22F1078D4EBED9827
92973B7AA3D9BAE260FA49704145307FC1D4B625969B178EC8277D18478D90C0
3AB610DACE6F9904F0CB2B359894B02816537DEDD9D1F0A69F427E973BE7D52C
3A8A74C1462E4AA2F6C2B35CB08F23CC9158A44967DD876C446D22705763CE79
E48015B64BC5EA84769FE111B21271F1ACAB187E768E14ABD9607607F63C10C5
CA39AB450ABBB4FE061FADDB071547EFF8B1E54E76E93F6E14880500F6496767
0ABDE5496CF483523762DDBF9752FBC58086B43DE535493E3689C2A6E573570A
ACDC5198FA96FA06329BC7826CB086C8C089F1224E3578BA96815E1C78412C2F
22D5E701FFF6B69CAD70E9C51731299AA4982B39E4A9B307B858B93CE81C171B
E69074F23A72BE7C9EEE0E3F38ADD45F7125175A1A66873AA66982308C5FE78C
53DA71E2A9D657F7CE8E95CEDC411FB285F2EB53E3BECF9B2793DE98E0E2D0B5
5725894DE425EDC3289EFF22CBC7A38FCA47E7D3B163DFB23CAC84016D2EDC6C
9F8AB038F448C7AFE06EDA162ADB84EA58CDB557CFEB> |-
/G <1C60D8A8C9B6C4F514245DF35784DB3310403290DD960BE2305E9808AF1D
54E976BDC5F9E7DAA64C6CD2A88354B48A548B0231ED912DBC6C566EC147884F
43CD92EF05A8D916551BB94C921ED141550CCC356EF8F421151350D1422FB0EA
55BA555179C0C6566A34396DCE28D3435542487AB9A9FE6032032CED6CD85F22
AAEF72D5297144FBA7B0D7EC358BF9BA125E31A8D2957A8E5E4E2199B98027D8
BE5D0AC45A4BC50C8621B38BECF1F02E3F800F78B6FCD2F973B761F32E66E63F
8C12FA7544664868CF5E3E38F11D17A0D9511A9544EE58D4C41046FD7324552F
EAED544FCB4DE979B2F89589908843C0311D10E78BFB00D77CC2553755539EB5
FB9E29683CB9D9C4CF35A5BCFA20392C96B2F906C80833BD78D0A8BD45D7E23D
F9CE8238E99D6B39F182C9A162D374DBA7E1AB6721EF46472D5F318348BCFED3
586370ECD8B3014F151F469647AE81B7B2ADC7FAA76C2CFC4809D56E99ED49AB
A93D6B6CB00B0C06430A753DE7011041746BB8BC1C4CBB3E48C615C58CB7FFD1
9B2FC436F8> |-
/V <1C60D8A8C9B6E3FA514E1C8CD95D048F05185CD0FA4C6B78C6D45CF490EF
0B6D342E731EFB574671019FED42A1B09F005AB6EA98FF8E73BDACD9420774C3
10E44911BE164695BC810B3A3D8C859AB81B54ECA4536C06DC5E514D419BF26F
47A2CED4993A2C59FBDCB3D1C0CABDECE065F03B96221400F888E372A27B662C
63D768AD379B0E28148ADBA2437EF4C19343E67AE570D09114D8DDDF5FE8061C
3C2BB565B8E39361CA4ED0DE849DB7F5673BFB7B41674D7736B01E> |-
/e <1C60D8A8C9B77FE2C1821A026C58ABF2B567E0B00879C337C2BDCE00286E
62420AB29662430388D503E83190757EE9DC0B1806BC1E5E1DE8A092421E50B6
BF478162AC393B84D271E29E01537B22CD34C084A214F78E595F4E118EDADC3B
2E22E50A698CC1E2AAA7947753A98561270689ECA8326FAA8D234006E1A8CE10
061EE53E71911DF1E560509DC8C5B8428B98C1B8B1E344D1FAF1F192DB89FE21
28494DF2A953F3D2A9CFD87B00264C223F5E00AB3201AC33EF160430B96A6B8B
4293FB496DA48FDDD0C656B5E8A331D590176C57686C6A582A57C8825E409EFE
48D90775405E7F8219580C7D102D41C7FC9FA21835312A9F3B26F28D3CC46132
271E0F2603B9D916401A6849FF76439A> |-
/l <1C60D8A8C9B854D0A8FDB6ECF93E25366301848C6E9FD66707ED31FAB543
E6BB32D293592BC537E1849742542F44D56B740BDA02A4C8E32FDFC027290154
6FF407546C68CDA4CE1E886F78D172AD7C97CAFD8F75CCBE6C6D062E604F07FF
56C6473D2E449FA9082E2CB139A023FFE485EA2E3E5FE66AD0> |-
/p <1C60D8A8C9B790A84E7F4A2C78ACD4DEB72F3F52D1B4CB24B3F6AC7A4CF4
BA38B81F05AD69031772CA93162B757635B9930ACFAEE7979D121AB82F353F9A
A517A2E84467969803017F773C71A78D289E8C3390A548EAB4FA8C5D46D7C338
1FB5D03B4A60E4C56CAC496D6A4F9761223EF1EF08B054607FFE97611AB44BEB
ACF706651F3BDC4FEBAD405821B35EC4E1E39F6E7C3E3D59F5F32E31F39B5883
E345083BFBACFC2759FF3EFAAD816CB599484BCFA40D57D659A0835A2264B384
E9E9187F7759BA7928DB706349C3EEC13480E4660F4CD732BB30F657A71B06B0
16008682059EDDB17E9D317A7BE107F7729BB8895E09D27202D2C330CD37A614
EF69A01C766C06527E7ACBEFC0F723348627B6AFCE609418CE7A34C68EEF93AA
A9F94506506812120F0A053D93D6> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/NDGFMI+Euclid /Euclid findfont ct_VMDictPut
/NDGFMI+Euclid*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period 
/.notdef /zero /one /two /.notdef /four /.notdef /six 
/.notdef /eight 14{/.notdef}rp /G 14{/.notdef}rp /V 14{/.notdef}rp /e 
6{/.notdef}rp /l 3{/.notdef}rp /p 143{/.notdef}rp]
NDGFMI+Euclid nf
NDGFMI+Euclid*1 [14.2206 0 0 -14.2206 0 0 ]msf
517.015 364.028 mo
( \(GeV\))
[4.73535 5.53125 11.1631 6.31445 10.665 0 ]xsh
NDGFMI+Euclid*1 [9.67002 0 0 -9.67002 0 0 ]msf
505.068 368.01 mo
(le)
[2.68848 0 ]xsh
512.196 368.01 mo
(p)sh
%ADOBeginSubsetFont: Euclid-Italic Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /Euclid-Italic def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 80 /P put
def
/FontBBox {-28 -252 1126 899} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B5EE31F4> |-
/P <1C60D8A8C9B65B43E9B2A8A25103CC1730D6955AD39BD3CF442D7EA08E86
BC841C9D16DB58C56730C91BA43F300D532685E2294331AFE8321D317775CDDE
22E685BFFBD3789420B7E21FDB4A9527B8C787EDF867416DFB59257B5AE8E904
FCB4294A23AD950E693FE23E2578F7FA0AB645319F6E488D450E6D3D18CE8970
2DB5F656E954EB90D2BC74CA4F2654154DA629A99C66BB87C6076BBD8B4206A9
830757151DD7F5193EAD3625B5B589F7BDCC157726CFC19610669D6AB542DBCF
5C8772D8AD5F34638440C2935EEE23017386484E3901FE0F0106D160AF88B018
053F0BF494007463B2AC11467E8FDBDB3B5AB5E82AB1CAF76A28A1AA4A7D0E6F
12D8BBA7A42392921F560CB06ACC8F58CE043785BCAAC597D94A448CDD05C407
9BDBE27C5A> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/NDGFMJ+Euclid-Italic /Euclid-Italic findfont ct_VMDictPut
/NDGFMJ+Euclid-Italic*1 
[80{/.notdef}rp /P 175{/.notdef}rp]
NDGFMJ+Euclid-Italic nf
NDGFMJ+Euclid-Italic*1 [14.2206 0 0 -14.2206 0 0 ]msf
492.31 364.028 mo
(P)sh
NDGFMI+Euclid*1 [8.05835 0 0 -8.05835 0 0 ]msf
61.4697 358.881 mo
(-1)
[2.68359 0 ]xsh
NDGFMI+Euclid*1 [11.8505 0 0 -11.8505 0 0 ]msf
48.667 364.092 mo
(10)
[5.92529 0 ]xsh
241.026 364.251 mo
(1)sh
423.644 364.251 mo
(10)
[5.9248 0 ]xsh
22.1201 351.782 mo
(0.6)
[5.92529 3.29443 0 ]xsh
22.1201 285.892 mo
(0.8)
[5.92529 3.29443 0 ]xsh
33.5029 220.936 mo
(1)sh
22.1201 155.053 mo
(1.2)
[5.92529 3.29443 0 ]xsh
22.1201 89.1621 mo
(1.4)
[5.92529 3.29443 0 ]xsh
22.1201 23.2744 mo
(1.6)
[5.92529 3.29443 0 ]xsh
560.304 216.36 mo
560.304 216.225 560.196 216.108 560.061 216.108 cv
559.917 216.108 559.809 216.225 559.809 216.36 cv
559.809 216.495 559.917 216.612 560.061 216.612 cv
560.196 216.612 560.304 216.495 560.304 216.36 cv
ef
555.147 216.36 mo
555.147 216.225 555.039 216.108 554.895 216.108 cv
554.76 216.108 554.643 216.225 554.643 216.36 cv
554.643 216.495 554.76 216.612 554.895 216.612 cv
555.039 216.612 555.147 216.495 555.147 216.36 cv
ef
550.107 216.36 mo
550.107 216.225 549.999 216.108 549.855 216.108 cv
549.72 216.108 549.603 216.225 549.603 216.36 cv
549.603 216.495 549.72 216.612 549.855 216.612 cv
549.999 216.612 550.107 216.495 550.107 216.36 cv
ef
539.784 216.36 mo
539.784 216.225 539.676 216.108 539.541 216.108 cv
539.397 216.108 539.289 216.225 539.289 216.36 cv
539.289 216.495 539.397 216.612 539.541 216.612 cv
539.676 216.612 539.784 216.495 539.784 216.36 cv
ef
534.51 216.36 mo
534.51 216.225 534.393 216.108 534.258 216.108 cv
534.123 216.108 534.006 216.225 534.006 216.36 cv
534.006 216.495 534.123 216.612 534.258 216.612 cv
534.393 216.612 534.51 216.495 534.51 216.36 cv
ef
529.227 216.36 mo
529.227 216.225 529.119 216.108 528.975 216.108 cv
528.84 216.108 528.732 216.225 528.732 216.36 cv
528.732 216.495 528.84 216.612 528.975 216.612 cv
529.119 216.612 529.227 216.495 529.227 216.36 cv
ef
519.147 216.36 mo
519.147 216.225 519.039 216.108 518.895 216.108 cv
518.76 216.108 518.643 216.225 518.643 216.36 cv
518.643 216.495 518.76 216.612 518.895 216.612 cv
519.039 216.612 519.147 216.495 519.147 216.36 cv
ef
514.107 216.36 mo
514.107 216.225 513.999 216.108 513.855 216.108 cv
513.72 216.108 513.603 216.225 513.603 216.36 cv
513.603 216.495 513.72 216.612 513.855 216.612 cv
513.999 216.612 514.107 216.495 514.107 216.36 cv
ef
508.824 216.36 mo
508.824 216.225 508.716 216.108 508.581 216.108 cv
508.437 216.108 508.329 216.225 508.329 216.36 cv
508.329 216.495 508.437 216.612 508.581 216.612 cv
508.716 216.612 508.824 216.495 508.824 216.36 cv
ef
498.51 216.603 mo
498.51 216.459 498.393 216.351 498.258 216.351 cv
498.123 216.351 498.006 216.459 498.006 216.603 cv
498.006 216.738 498.123 216.846 498.258 216.846 cv
498.393 216.846 498.51 216.738 498.51 216.603 cv
ef
493.227 216.603 mo
493.227 216.459 493.119 216.351 492.975 216.351 cv
492.84 216.351 492.732 216.459 492.732 216.603 cv
492.732 216.738 492.84 216.846 492.975 216.846 cv
493.119 216.846 493.227 216.738 493.227 216.603 cv
ef
487.944 216.603 mo
487.944 216.459 487.836 216.351 487.701 216.351 cv
487.557 216.351 487.449 216.459 487.449 216.603 cv
487.449 216.738 487.557 216.846 487.701 216.846 cv
487.836 216.846 487.944 216.738 487.944 216.603 cv
ef
483.147 216.603 mo
483.147 216.459 483.039 216.351 482.895 216.351 cv
482.76 216.351 482.643 216.459 482.643 216.603 cv
482.643 216.738 482.76 216.846 482.895 216.846 cv
483.039 216.846 483.147 216.738 483.147 216.603 cv
ef
477.864 216.603 mo
477.864 216.459 477.756 216.351 477.621 216.351 cv
477.477 216.351 477.369 216.459 477.369 216.603 cv
477.369 216.738 477.477 216.846 477.621 216.846 cv
477.756 216.846 477.864 216.738 477.864 216.603 cv
ef
472.824 216.603 mo
472.824 216.459 472.716 216.351 472.581 216.351 cv
472.437 216.351 472.329 216.459 472.329 216.603 cv
472.329 216.738 472.437 216.846 472.581 216.846 cv
472.716 216.846 472.824 216.738 472.824 216.603 cv
ef
467.55 216.603 mo
467.55 216.459 467.433 216.351 467.298 216.351 cv
467.163 216.351 467.046 216.459 467.046 216.603 cv
467.046 216.738 467.163 216.846 467.298 216.846 cv
467.433 216.846 467.55 216.738 467.55 216.603 cv
ef
462.267 216.603 mo
462.267 216.459 462.159 216.351 462.015 216.351 cv
461.88 216.351 461.772 216.459 461.772 216.603 cv
461.772 216.738 461.88 216.846 462.015 216.846 cv
462.159 216.846 462.267 216.738 462.267 216.603 cv
ef
451.944 216.603 mo
451.944 216.459 451.836 216.351 451.701 216.351 cv
451.557 216.351 451.449 216.459 451.449 216.603 cv
451.449 216.738 451.557 216.846 451.701 216.846 cv
451.836 216.846 451.944 216.738 451.944 216.603 cv
ef
447.147 216.837 mo
447.147 216.702 447.039 216.594 446.895 216.594 cv
446.76 216.594 446.643 216.702 446.643 216.837 cv
446.643 216.981 446.76 217.089 446.895 217.089 cv
447.039 217.089 447.147 216.981 447.147 216.837 cv
ef
441.864 216.837 mo
441.864 216.702 441.756 216.594 441.621 216.594 cv
441.477 216.594 441.369 216.702 441.369 216.837 cv
441.369 216.981 441.477 217.089 441.621 217.089 cv
441.756 217.089 441.864 216.981 441.864 216.837 cv
ef
436.59 216.837 mo
436.59 216.702 436.473 216.594 436.338 216.594 cv
436.203 216.594 436.086 216.702 436.086 216.837 cv
436.086 216.981 436.203 217.089 436.338 217.089 cv
436.473 217.089 436.59 216.981 436.59 216.837 cv
ef
431.55 216.837 mo
431.55 216.702 431.433 216.594 431.298 216.594 cv
431.163 216.594 431.046 216.702 431.046 216.837 cv
431.046 216.981 431.163 217.089 431.298 217.089 cv
431.433 217.089 431.55 216.981 431.55 216.837 cv
ef
421.227 217.08 mo
421.227 216.945 421.119 216.828 420.975 216.828 cv
420.84 216.828 420.732 216.945 420.732 217.08 cv
420.732 217.215 420.84 217.332 420.975 217.332 cv
421.119 217.332 421.227 217.215 421.227 217.08 cv
ef
415.944 217.08 mo
415.944 216.945 415.836 216.828 415.701 216.828 cv
415.557 216.828 415.449 216.945 415.449 217.08 cv
415.449 217.215 415.557 217.332 415.701 217.332 cv
415.836 217.332 415.944 217.215 415.944 217.08 cv
ef
410.904 217.323 mo
410.904 217.179 410.796 217.071 410.661 217.071 cv
410.517 217.071 410.409 217.179 410.409 217.323 cv
410.409 217.458 410.517 217.566 410.661 217.566 cv
410.796 217.566 410.904 217.458 410.904 217.323 cv
ef
405.864 217.323 mo
405.864 217.179 405.756 217.071 405.621 217.071 cv
405.477 217.071 405.369 217.179 405.369 217.323 cv
405.369 217.458 405.477 217.566 405.621 217.566 cv
405.756 217.566 405.864 217.458 405.864 217.323 cv
ef
400.59 217.557 mo
400.59 217.422 400.473 217.314 400.338 217.314 cv
400.203 217.314 400.086 217.422 400.086 217.557 cv
400.086 217.701 400.203 217.809 400.338 217.809 cv
400.473 217.809 400.59 217.701 400.59 217.557 cv
ef
395.307 217.557 mo
395.307 217.422 395.199 217.314 395.055 217.314 cv
394.92 217.314 394.812 217.422 394.812 217.557 cv
394.812 217.701 394.92 217.809 395.055 217.809 cv
395.199 217.809 395.307 217.701 395.307 217.557 cv
ef
390.267 217.8 mo
390.267 217.665 390.159 217.548 390.015 217.548 cv
389.88 217.548 389.772 217.665 389.772 217.8 cv
389.772 217.935 389.88 218.052 390.015 218.052 cv
390.159 218.052 390.267 217.935 390.267 217.8 cv
ef
384.984 218.043 mo
384.984 217.899 384.876 217.791 384.741 217.791 cv
384.597 217.791 384.489 217.899 384.489 218.043 cv
384.489 218.178 384.597 218.286 384.741 218.286 cv
384.876 218.286 384.984 218.178 384.984 218.043 cv
ef
379.944 218.277 mo
379.944 218.142 379.836 218.034 379.701 218.034 cv
379.557 218.034 379.449 218.142 379.449 218.277 cv
379.449 218.421 379.557 218.529 379.701 218.529 cv
379.836 218.529 379.944 218.421 379.944 218.277 cv
ef
374.904 218.52 mo
374.904 218.385 374.796 218.268 374.661 218.268 cv
374.517 218.268 374.409 218.385 374.409 218.52 cv
374.409 218.655 374.517 218.772 374.661 218.772 cv
374.796 218.772 374.904 218.655 374.904 218.52 cv
ef
369.63 218.763 mo
369.63 218.619 369.513 218.511 369.378 218.511 cv
369.243 218.511 369.126 218.619 369.126 218.763 cv
369.126 218.898 369.243 219.006 369.378 219.006 cv
369.513 219.006 369.63 218.898 369.63 218.763 cv
ef
364.59 218.997 mo
364.59 218.862 364.473 218.754 364.338 218.754 cv
364.203 218.754 364.086 218.862 364.086 218.997 cv
364.086 219.141 364.203 219.249 364.338 219.249 cv
364.473 219.249 364.59 219.141 364.59 218.997 cv
ef
359.307 219.24 mo
359.307 219.105 359.199 218.988 359.055 218.988 cv
358.92 218.988 358.812 219.105 358.812 219.24 cv
358.812 219.375 358.92 219.492 359.055 219.492 cv
359.199 219.492 359.307 219.375 359.307 219.24 cv
ef
354.267 219.717 mo
354.267 219.582 354.159 219.474 354.015 219.474 cv
353.88 219.474 353.772 219.582 353.772 219.717 cv
353.772 219.861 353.88 219.969 354.015 219.969 cv
354.159 219.969 354.267 219.861 354.267 219.717 cv
ef
348.984 219.96 mo
348.984 219.825 348.876 219.708 348.741 219.708 cv
348.597 219.708 348.489 219.825 348.489 219.96 cv
348.489 220.095 348.597 220.212 348.741 220.212 cv
348.876 220.212 348.984 220.095 348.984 219.96 cv
ef
343.71 220.437 mo
343.71 220.302 343.593 220.194 343.458 220.194 cv
343.323 220.194 343.206 220.302 343.206 220.437 cv
343.206 220.581 343.323 220.689 343.458 220.689 cv
343.593 220.689 343.71 220.581 343.71 220.437 cv
ef
338.904 220.923 mo
338.904 220.779 338.796 220.671 338.661 220.671 cv
338.517 220.671 338.409 220.779 338.409 220.923 cv
338.409 221.058 338.517 221.166 338.661 221.166 cv
338.796 221.166 338.904 221.058 338.904 220.923 cv
ef
333.63 221.643 mo
333.63 221.499 333.513 221.391 333.378 221.391 cv
333.243 221.391 333.126 221.499 333.126 221.643 cv
333.126 221.778 333.243 221.886 333.378 221.886 cv
333.513 221.886 333.63 221.778 333.63 221.643 cv
ef
328.59 222.363 mo
328.59 222.219 328.473 222.111 328.338 222.111 cv
328.203 222.111 328.086 222.219 328.086 222.363 cv
328.086 222.498 328.203 222.606 328.338 222.606 cv
328.473 222.606 328.59 222.498 328.59 222.363 cv
ef
323.307 223.083 mo
323.307 222.939 323.199 222.831 323.055 222.831 cv
322.92 222.831 322.812 222.939 322.812 223.083 cv
322.812 223.218 322.92 223.326 323.055 223.326 cv
323.199 223.326 323.307 223.218 323.307 223.083 cv
ef
318.024 223.803 mo
318.024 223.659 317.916 223.551 317.781 223.551 cv
317.637 223.551 317.529 223.659 317.529 223.803 cv
317.529 223.938 317.637 224.046 317.781 224.046 cv
317.916 224.046 318.024 223.938 318.024 223.803 cv
ef
312.984 224.757 mo
312.984 224.622 312.876 224.514 312.741 224.514 cv
312.597 224.514 312.489 224.622 312.489 224.757 cv
312.489 224.901 312.597 225.009 312.741 225.009 cv
312.876 225.009 312.984 224.901 312.984 224.757 cv
ef
307.71 225.72 mo
307.71 225.585 307.593 225.468 307.458 225.468 cv
307.323 225.468 307.206 225.585 307.206 225.72 cv
307.206 225.855 307.323 225.972 307.458 225.972 cv
307.593 225.972 307.71 225.855 307.71 225.72 cv
ef
302.544 226.683 mo
302.544 226.539 302.436 226.431 302.301 226.431 cv
302.157 226.431 302.049 226.539 302.049 226.683 cv
302.049 226.818 302.157 226.926 302.301 226.926 cv
302.436 226.926 302.544 226.818 302.544 226.683 cv
ef
297.63 228.357 mo
297.63 228.222 297.513 228.114 297.378 228.114 cv
297.243 228.114 297.126 228.222 297.126 228.357 cv
297.126 228.501 297.243 228.609 297.378 228.609 cv
297.513 228.609 297.63 228.501 297.63 228.357 cv
ef
292.347 229.563 mo
292.347 229.419 292.239 229.311 292.095 229.311 cv
291.96 229.311 291.852 229.419 291.852 229.563 cv
291.852 229.698 291.96 229.806 292.095 229.806 cv
292.239 229.806 292.347 229.698 292.347 229.563 cv
ef
287.307 230.76 mo
287.307 230.625 287.199 230.508 287.055 230.508 cv
286.92 230.508 286.812 230.625 286.812 230.76 cv
286.812 230.895 286.92 231.012 287.055 231.012 cv
287.199 231.012 287.307 230.895 287.307 230.76 cv
ef
282.024 232.92 mo
282.024 232.785 281.916 232.668 281.781 232.668 cv
281.637 232.668 281.529 232.785 281.529 232.92 cv
281.529 233.055 281.637 233.172 281.781 233.172 cv
281.916 233.172 282.024 233.055 282.024 232.92 cv
ef
276.75 234.36 mo
276.75 234.225 276.633 234.108 276.498 234.108 cv
276.363 234.108 276.246 234.225 276.246 234.36 cv
276.246 234.495 276.363 234.612 276.498 234.612 cv
276.633 234.612 276.75 234.495 276.75 234.36 cv
ef
271.71 236.277 mo
271.71 236.142 271.593 236.034 271.458 236.034 cv
271.323 236.034 271.206 236.142 271.206 236.277 cv
271.206 236.421 271.323 236.529 271.458 236.529 cv
271.593 236.529 271.71 236.421 271.71 236.277 cv
ef
266.544 238.203 mo
266.544 238.059 266.436 237.951 266.301 237.951 cv
266.157 237.951 266.049 238.059 266.049 238.203 cv
266.049 238.338 266.157 238.446 266.301 238.446 cv
266.436 238.446 266.544 238.338 266.544 238.203 cv
ef
261.63 240.597 mo
261.63 240.462 261.513 240.354 261.378 240.354 cv
261.243 240.354 261.126 240.462 261.126 240.597 cv
261.126 240.741 261.243 240.849 261.378 240.849 cv
261.513 240.849 261.63 240.741 261.63 240.597 cv
ef
256.347 243 mo
256.347 242.865 256.239 242.748 256.095 242.748 cv
255.96 242.748 255.852 242.865 255.852 243 cv
255.852 243.135 255.96 243.252 256.095 243.252 cv
256.239 243.252 256.347 243.135 256.347 243 cv
ef
251.064 245.403 mo
251.064 245.259 250.956 245.151 250.821 245.151 cv
250.677 245.151 250.569 245.259 250.569 245.403 cv
250.569 245.538 250.677 245.646 250.821 245.646 cv
250.956 245.646 251.064 245.538 251.064 245.403 cv
ef
246.024 248.283 mo
246.024 248.139 245.916 248.031 245.781 248.031 cv
245.637 248.031 245.529 248.139 245.529 248.283 cv
245.529 248.418 245.637 248.526 245.781 248.526 cv
245.916 248.526 246.024 248.418 246.024 248.283 cv
ef
240.75 251.163 mo
240.75 251.019 240.633 250.911 240.498 250.911 cv
240.363 250.911 240.246 251.019 240.246 251.163 cv
240.246 251.298 240.363 251.406 240.498 251.406 cv
240.633 251.406 240.75 251.298 240.75 251.163 cv
ef
235.467 254.277 mo
235.467 254.142 235.359 254.034 235.215 254.034 cv
235.08 254.034 234.972 254.142 234.972 254.277 cv
234.972 254.421 235.08 254.529 235.215 254.529 cv
235.359 254.529 235.467 254.421 235.467 254.277 cv
ef
230.544 257.4 mo
230.544 257.265 230.436 257.148 230.301 257.148 cv
230.157 257.148 230.049 257.265 230.049 257.4 cv
230.049 257.535 230.157 257.652 230.301 257.652 cv
230.436 257.652 230.544 257.535 230.544 257.4 cv
ef
220.347 264.6 mo
220.347 264.465 220.239 264.348 220.095 264.348 cv
219.96 264.348 219.852 264.465 219.852 264.6 cv
219.852 264.735 219.96 264.852 220.095 264.852 cv
220.239 264.852 220.347 264.735 220.347 264.6 cv
ef
215.064 267.957 mo
215.064 267.822 214.956 267.714 214.821 267.714 cv
214.677 267.714 214.569 267.822 214.569 267.957 cv
214.569 268.101 214.677 268.209 214.821 268.209 cv
214.956 268.209 215.064 268.101 215.064 267.957 cv
ef
209.79 271.8 mo
209.79 271.665 209.673 271.548 209.538 271.548 cv
209.403 271.548 209.286 271.665 209.286 271.8 cv
209.286 271.935 209.403 272.052 209.538 272.052 cv
209.673 272.052 209.79 271.935 209.79 271.8 cv
ef
204.75 275.4 mo
204.75 275.265 204.633 275.148 204.498 275.148 cv
204.363 275.148 204.246 275.265 204.246 275.4 cv
204.246 275.535 204.363 275.652 204.498 275.652 cv
204.633 275.652 204.75 275.535 204.75 275.4 cv
ef
199.467 279.243 mo
199.467 279.099 199.359 278.991 199.215 278.991 cv
199.08 278.991 198.972 279.099 198.972 279.243 cv
198.972 279.378 199.08 279.486 199.215 279.486 cv
199.359 279.486 199.467 279.378 199.467 279.243 cv
ef
194.544 283.077 mo
194.544 282.942 194.436 282.834 194.301 282.834 cv
194.157 282.834 194.049 282.942 194.049 283.077 cv
194.049 283.221 194.157 283.329 194.301 283.329 cv
194.436 283.329 194.544 283.221 194.544 283.077 cv
ef
189.387 286.677 mo
189.387 286.542 189.279 286.434 189.135 286.434 cv
189 286.434 188.892 286.542 188.892 286.677 cv
188.892 286.821 189 286.929 189.135 286.929 cv
189.279 286.929 189.387 286.821 189.387 286.677 cv
ef
184.104 290.52 mo
184.104 290.385 183.996 290.268 183.861 290.268 cv
183.717 290.268 183.609 290.385 183.609 290.52 cv
183.609 290.655 183.717 290.772 183.861 290.772 cv
183.996 290.772 184.104 290.655 184.104 290.52 cv
ef
179.064 294.363 mo
179.064 294.219 178.956 294.111 178.821 294.111 cv
178.677 294.111 178.569 294.219 178.569 294.363 cv
178.569 294.498 178.677 294.606 178.821 294.606 cv
178.956 294.606 179.064 294.498 179.064 294.363 cv
ef
173.79 297.72 mo
173.79 297.585 173.673 297.468 173.538 297.468 cv
173.403 297.468 173.286 297.585 173.286 297.72 cv
173.286 297.855 173.403 297.972 173.538 297.972 cv
173.673 297.972 173.79 297.855 173.79 297.72 cv
ef
163.467 304.2 mo
163.467 304.065 163.359 303.948 163.215 303.948 cv
163.08 303.948 162.972 304.065 162.972 304.2 cv
162.972 304.335 163.08 304.452 163.215 304.452 cv
163.359 304.452 163.467 304.335 163.467 304.2 cv
ef
158.31 307.557 mo
158.31 307.422 158.193 307.314 158.058 307.314 cv
157.923 307.314 157.806 307.422 157.806 307.557 cv
157.806 307.701 157.923 307.809 158.058 307.809 cv
158.193 307.809 158.31 307.701 158.31 307.557 cv
ef
153.387 310.437 mo
153.387 310.302 153.279 310.194 153.135 310.194 cv
153 310.194 152.892 310.302 152.892 310.437 cv
152.892 310.581 153 310.689 153.135 310.689 cv
153.279 310.689 153.387 310.581 153.387 310.437 cv
ef
148.104 313.083 mo
148.104 312.939 147.996 312.831 147.861 312.831 cv
147.717 312.831 147.609 312.939 147.609 313.083 cv
147.609 313.218 147.717 313.326 147.861 313.326 cv
147.996 313.326 148.104 313.218 148.104 313.083 cv
ef
142.83 314.757 mo
142.83 314.622 142.713 314.514 142.578 314.514 cv
142.443 314.514 142.326 314.622 142.326 314.757 cv
142.326 314.901 142.443 315.009 142.578 315.009 cv
142.713 315.009 142.83 314.901 142.83 314.757 cv
ef
137.79 315 mo
137.79 314.865 137.673 314.748 137.538 314.748 cv
137.403 314.748 137.286 314.865 137.286 315 cv
137.286 315.135 137.403 315.252 137.538 315.252 cv
137.673 315.252 137.79 315.135 137.79 315 cv
ef
132.507 313.083 mo
132.507 312.939 132.399 312.831 132.255 312.831 cv
132.12 312.831 132.012 312.939 132.012 313.083 cv
132.012 313.218 132.12 313.326 132.255 313.326 cv
132.399 313.326 132.507 313.218 132.507 313.083 cv
ef
127.467 309.96 mo
127.467 309.825 127.359 309.708 127.215 309.708 cv
127.08 309.708 126.972 309.825 126.972 309.96 cv
126.972 310.095 127.08 310.212 127.215 310.212 cv
127.359 310.212 127.467 310.095 127.467 309.96 cv
ef
122.31 305.64 mo
122.31 305.505 122.193 305.388 122.058 305.388 cv
121.923 305.388 121.806 305.505 121.806 305.64 cv
121.806 305.775 121.923 305.892 122.058 305.892 cv
122.193 305.892 122.31 305.775 122.31 305.64 cv
ef
117.144 300.357 mo
117.144 300.222 117.036 300.114 116.901 300.114 cv
116.757 300.114 116.649 300.222 116.649 300.357 cv
116.649 300.501 116.757 300.609 116.901 300.609 cv
117.036 300.609 117.144 300.501 117.144 300.357 cv
ef
106.83 288 mo
106.83 287.865 106.713 287.748 106.578 287.748 cv
106.443 287.748 106.326 287.865 106.326 288 cv
106.326 288.135 106.443 288.252 106.578 288.252 cv
106.713 288.252 106.83 288.135 106.83 288 cv
ef
101.79 280.917 mo
101.79 280.782 101.673 280.674 101.538 280.674 cv
101.403 280.674 101.286 280.782 101.286 280.917 cv
101.286 281.061 101.403 281.169 101.538 281.169 cv
101.673 281.169 101.79 281.061 101.79 280.917 cv
ef
96.5078 275.4 mo
96.5078 275.262 96.3955 275.15 96.2578 275.15 cv
96.1201 275.15 96.0078 275.262 96.0078 275.4 cv
96.0078 275.538 96.1201 275.65 96.2578 275.65 cv
96.3955 275.65 96.5078 275.538 96.5078 275.4 cv
ef
91.2275 269.4 mo
91.2275 269.262 91.1162 269.15 90.9775 269.15 cv
90.8398 269.15 90.7275 269.262 90.7275 269.4 cv
90.7275 269.538 90.8398 269.65 90.9775 269.65 cv
91.1162 269.65 91.2275 269.538 91.2275 269.4 cv
ef
86.3076 263.16 mo
86.3076 263.022 86.1963 262.91 86.0576 262.91 cv
85.9199 262.91 85.8076 263.022 85.8076 263.16 cv
85.8076 263.298 85.9199 263.41 86.0576 263.41 cv
86.1963 263.41 86.3076 263.298 86.3076 263.16 cv
ef
81.1475 259.08 mo
81.1475 258.942 81.0361 258.83 80.8975 258.83 cv
80.7598 258.83 80.6475 258.942 80.6475 259.08 cv
80.6475 259.218 80.7598 259.33 80.8975 259.33 cv
81.0361 259.33 81.1475 259.218 81.1475 259.08 cv
ef
75.87 254.52 mo
75.87 254.385 75.753 254.268 75.618 254.268 cv
75.483 254.268 75.366 254.385 75.366 254.52 cv
75.366 254.655 75.483 254.772 75.618 254.772 cv
75.753 254.772 75.87 254.655 75.87 254.52 cv
ef
70.83 250.2 mo
70.83 250.065 70.713 249.948 70.578 249.948 cv
70.443 249.948 70.326 250.065 70.326 250.2 cv
70.326 250.335 70.443 250.452 70.578 250.452 cv
70.713 250.452 70.83 250.335 70.83 250.2 cv
ef
65.547 246.6 mo
65.547 246.465 65.439 246.348 65.295 246.348 cv
65.16 246.348 65.052 246.465 65.052 246.6 cv
65.052 246.735 65.16 246.852 65.295 246.852 cv
65.439 246.852 65.547 246.735 65.547 246.6 cv
ef
60.507 243 mo
60.507 242.865 60.399 242.748 60.255 242.748 cv
60.12 242.748 60.012 242.865 60.012 243 cv
60.012 243.135 60.12 243.252 60.255 243.252 cv
60.399 243.252 60.507 243.135 60.507 243 cv
ef
55.224 244.44 mo
55.224 244.305 55.116 244.188 54.981 244.188 cv
54.837 244.188 54.729 244.305 54.729 244.44 cv
54.729 244.575 54.837 244.692 54.981 244.692 cv
55.116 244.692 55.224 244.575 55.224 244.44 cv
ef
49.95 248.517 mo
49.95 248.382 49.833 248.274 49.698 248.274 cv
49.563 248.274 49.446 248.382 49.446 248.517 cv
49.446 248.661 49.563 248.769 49.698 248.769 cv
49.833 248.769 49.95 248.661 49.95 248.517 cv
ef
49.806 244.503 mo
55.062 241.002 li
60.309 239.751 li
65.304 242.748 li
70.56 246.249 li
75.555 250.002 li
80.811 253.998 li
86.058 258.003 li
91.062 263.502 li
96.309 269.001 li
101.556 273.996 li
106.56 280.503 li
116.811 291.753 li
122.058 297 li
127.305 300.996 li
132.309 303.498 li
137.556 305.253 li
142.56 304.497 li
147.807 302.751 li
153.054 299.997 li
158.058 296.748 li
163.305 293.247 li
173.556 286.254 li
178.812 282.501 li
183.807 278.496 li
189.054 274.752 li
194.31 270.747 li
199.305 266.751 li
204.561 262.746 li
209.556 258.75 li
214.812 254.754 li
220.059 250.749 li
230.31 243.504 li
235.305 240.003 li
240.561 236.502 li
245.808 233.253 li
250.812 230.247 li
256.059 227.502 li
261.306 224.748 li
266.31 222.246 li
271.557 219.996 li
276.561 217.998 li
281.808 216 li
287.055 214.002 li
292.059 212.499 li
297.306 210.753 li
302.31 209.502 li
307.557 208.251 li
312.804 207 li
317.808 206.001 li
323.055 205.002 li
328.311 204.246 li
333.306 203.247 li
338.562 202.5 li
343.557 201.996 li
348.804 201.249 li
354.06 200.754 li
359.055 200.25 li
364.311 199.746 li
369.306 199.251 li
374.562 198.999 li
379.809 198.504 li
384.804 198.252 li
390.06 198 li
395.055 197.748 li
400.311 197.496 li
405.558 197.496 li
410.562 197.253 li
415.809 197.001 li
421.056 196.749 li
431.307 196.497 li
436.311 196.254 li
451.809 196.254 li
462.06 196.002 li
467.307 196.002 li
472.554 195.75 li
482.805 195.75 li
487.809 195.498 li
493.056 195.246 li
498.312 195.498 li
508.554 195.498 li
513.81 195.246 li
554.805 195.246 li
560.061 195.003 li
560.061 236.25 li
539.559 236.25 li
534.312 235.998 li
498.312 235.998 li
493.056 236.25 li
487.809 235.998 li
441.558 235.998 li
436.311 236.25 li
405.558 236.25 li
400.311 236.502 li
395.055 236.502 li
390.06 236.754 li
384.804 236.754 li
379.809 236.997 li
374.562 237.249 li
369.306 237.249 li
364.311 237.501 li
359.055 237.753 li
354.06 237.996 li
348.804 238.248 li
343.557 238.752 li
338.562 239.004 li
333.306 239.499 li
328.311 240.003 li
323.055 240.75 li
317.808 241.497 li
312.804 242.253 li
307.557 243 li
302.31 243.999 li
297.306 245.25 li
292.059 246.249 li
287.055 247.5 li
281.808 249.003 li
276.561 250.497 li
271.557 252.252 li
266.31 253.998 li
261.306 256.248 li
256.059 258.246 li
250.812 260.748 li
245.808 263.25 li
240.561 266.004 li
235.305 268.749 li
230.31 271.746 li
220.059 278.253 li
214.812 281.754 li
209.556 285.003 li
204.561 288.504 li
199.305 292.248 li
194.31 295.749 li
189.054 299.25 li
183.807 302.751 li
178.812 306 li
173.556 309.501 li
163.305 315.747 li
158.058 318.753 li
153.054 321.498 li
147.807 324 li
142.56 325.251 li
137.556 325.251 li
132.309 323.253 li
127.305 320.004 li
122.058 315.252 li
116.811 309.501 li
106.56 296.253 li
101.556 288.999 li
96.309 282.996 li
91.062 276.498 li
86.058 269.748 li
80.811 264.996 li
75.555 260.001 li
70.56 255.249 li
65.304 251.001 li
60.309 247.248 li
55.062 248.751 li
49.806 253.503 li
49.806 244.503 li
.2 .8 .4 rgb
ef
121.001 257.046 mo
116.811 256.248 li
106.56 252.252 li
101.556 249.75 li
96.309 247.248 li
91.062 244.746 li
86.058 242.496 li
80.811 240.003 li
75.555 237.249 li
70.56 234.747 li
65.304 232.497 li
60.309 230.499 li
55.062 231.246 li
54.6543 231.421 li
49.806 230.499 li
49.806 232.749 li
49.806 229.5 li
55.062 227.754 li
60.309 227.25 li
65.304 228.753 li
70.56 230.499 li
75.555 232.497 li
80.811 234.747 li
86.058 236.754 li
91.062 240.003 li
96.309 243 li
101.556 245.754 li
106.56 249.246 li
116.811 255.249 li
121.001 257.046 li
279.208 111.606 mo
281.808 109.251 li
287.055 106.254 li
292.059 102.753 li
297.306 98.496 li
300.642 96.834 li
297.306 99.504 li
292.059 102.753 li
287.055 106.254 li
281.808 109.746 li
279.208 111.606 li
305.85 93.8109 mo
307.557 92.754 li
312.804 89.748 li
307.557 92.997 li
305.85 93.8109 li
320.431 85.9995 mo
323.055 84.501 li
325.683 83.376 li
323.055 84.753 li
320.431 85.9995 li
348.804 72.747 mo
348.804 72.747 li
354.06 70.254 li
359.055 67.752 li
364.311 65.502 li
369.306 63.252 li
374.562 61.749 li
379.809 60.246 li
384.804 59.004 li
390.06 57.753 li
384.804 59.499 li
379.809 60.246 li
374.562 62.748 li
369.306 63.999 li
364.311 65.997 li
359.055 68.499 li
354.06 71.001 li
348.804 72.747 li
.555294 .258824 .258824 rgb
f
137.556 291.753 mo
132.309 290.754 li
131.47 290.417 li
132.309 290.502 li
137.556 289.746 li
142.56 288 li
147.807 285.246 li
153.054 281.997 li
158.058 279.252 li
163.305 275.004 li
173.556 267.498 li
178.812 263.502 li
183.807 259.497 li
189.054 255.753 li
194.31 251.253 li
199.305 246.996 li
204.561 242.748 li
209.556 238.248 li
214.812 234.252 li
220.059 230.004 li
230.31 221.751 li
235.305 217.998 li
236.354 217.251 li
237.057 217.251 li
235.305 218.502 li
230.31 222.498 li
220.059 230.751 li
214.812 234.999 li
209.556 239.499 li
204.561 243.747 li
199.305 248.247 li
194.31 252.747 li
189.054 257.004 li
183.807 261.252 li
178.812 265.5 li
173.556 269.496 li
163.305 277.254 li
158.058 280.998 li
153.054 284.751 li
147.807 288 li
142.56 290.502 li
137.556 291.753 li
73.89 237.414 mo
70.56 236.25 li
65.304 234.504 li
60.309 233.001 li
56.2326 231.833 li
60.309 231.246 li
65.304 233.496 li
70.56 235.746 li
73.89 237.414 li
239.855 215.253 mo
239.159 215.253 li
240.561 214.254 li
245.808 210.753 li
250.812 207.504 li
256.059 204.246 li
261.306 201.249 li
266.31 198.504 li
261.306 201.501 li
256.059 204.498 li
250.812 207.747 li
245.808 211.248 li
240.561 214.749 li
239.855 215.253 li
298.568 184.309 mo
302.31 182.25 li
306.269 181.87 li
302.31 182.997 li
298.568 184.309 li
400.311 166.5 mo
405.558 165.996 li
410.562 165.249 li
415.809 165.249 li
419.349 165.079 li
415.809 165.753 li
410.562 165.996 li
405.558 166.248 li
400.311 166.5 li
472.554 162.999 mo
467.307 162.999 li
472.554 162.747 li
477.558 162.504 li
482.805 162.252 li
487.809 162.252 li
490.432 162.126 li
487.809 162.504 li
482.805 162.504 li
477.558 162.747 li
472.554 162.999 li
498.312 162 mo
495.684 161.874 li
498.312 161.748 li
508.554 161.496 li
513.81 161.496 li
518.805 161.253 li
529.056 161.253 li
534.312 161.001 li
554.805 161.001 li
549.81 161.253 li
534.312 161.253 li
529.056 161.496 li
518.805 161.496 li
513.81 161.748 li
508.554 161.748 li
498.312 162 li
559.305 161.001 mo
554.805 161.001 li
559.305 160.785 li
559.305 161.001 li
.258824 .703529 1 rgb
f
86.058 242.496 mo
86.058 242.496 li
80.811 240.003 li
75.555 237.996 li
73.89 237.414 li
70.56 235.746 li
65.304 233.496 li
60.309 231.246 li
56.2326 231.833 li
55.062 231.498 li
54.6543 231.421 li
55.062 231.246 li
60.309 230.499 li
65.304 232.497 li
70.56 234.747 li
75.555 237.249 li
80.811 240.003 li
86.058 242.496 li
.143529 .513203 .809673 rgb
f
134.047 323.915 mo
132.309 323.748 li
127.305 322.497 li
122.058 318.501 li
116.811 314.253 li
106.56 304.002 li
101.556 298.503 li
96.309 293.004 li
91.062 287.496 li
86.058 282.753 li
80.811 277.497 li
75.555 272.997 li
70.56 268.749 li
65.304 264.753 li
60.309 261.252 li
55.062 258.246 li
49.806 255.249 li
49.806 253.503 li
51.3592 252.099 li
54.594 253.638 li
59.805 256.617 li
64.755 259.587 li
69.966 263.304 li
74.952 267.048 li
79.2 270.297 li
80.172 271.026 li
85.383 275.742 li
90.369 280.224 li
95.607 285.462 li
100.854 290.457 li
105.849 295.704 li
106.961 296.772 li
116.811 309.501 li
122.058 315.252 li
127.305 320.004 li
132.309 323.253 li
134.047 323.915 li
302.31 244.503 mo
300.294 244.503 li
302.31 243.999 li
305.808 243.333 li
302.31 244.503 li
559.305 236.25 mo
513.81 236.25 li
508.554 235.998 li
498.312 235.998 li
534.312 235.998 li
539.559 236.25 li
559.305 236.25 li
.258824 1 1 rgb
f
137.556 324.252 mo
134.047 323.915 li
132.309 323.253 li
127.305 320.004 li
122.058 315.252 li
116.811 309.501 li
106.961 296.772 li
112.122 301.725 li
115.614 304.974 li
116.1 305.46 li
116.145 305.505 li
120.456 308.799 li
121.473 309.555 li
125.793 312.615 li
126.864 313.146 li
128.511 313.974 li
130.662 314.244 li
132.183 314.496 li
135.009 314.748 li
137.61 314.748 li
140.256 314.487 li
142.857 313.704 li
145.917 312.687 li
148.221 311.661 li
153.459 309.168 li
158.499 307.152 li
159.885 306.324 li
163.89 303.066 li
174.105 296.586 li
179.37 293.076 li
184.347 289.593 li
189.612 286.587 li
191.682 285.03 li
194.922 282.294 li
199.89 278.82 li
205.137 275.067 li
210.132 271.566 li
215.379 267.822 li
220.617 264.33 li
228.348 259.092 li
230.805 257.616 li
235.809 254.862 li
241.065 251.613 li
246.294 248.625 li
251.262 245.889 li
256.491 243.405 li
261.711 240.921 li
266.688 238.923 li
271.917 236.682 li
276.885 234.945 li
282.105 233.208 li
287.343 231.714 li
292.338 230.211 li
297.522 228.726 li
302.517 227.979 li
307.791 226.476 li
312.975 225.486 li
317.943 224.739 li
323.199 223.992 li
328.455 223.236 li
333.432 222.489 li
338.652 221.994 li
343.656 221.499 li
348.903 220.995 li
354.132 220.5 li
359.109 220.248 li
364.383 219.996 li
369.378 219.501 li
374.607 219.249 li
379.836 218.997 li
384.831 218.997 li
390.105 218.745 li
395.082 218.502 li
400.329 218.502 li
405.585 218.25 li
410.58 218.25 li
415.827 217.998 li
421.074 217.998 li
431.316 217.746 li
446.832 217.746 li
451.836 217.503 li
498.321 217.503 li
508.572 217.251 li
559.305 217.251 li
559.305 236.25 li
539.559 236.25 li
534.312 235.998 li
498.312 235.998 li
487.809 235.998 li
441.558 235.998 li
421.056 235.998 li
415.809 236.25 li
405.558 236.25 li
390.06 236.25 li
384.804 236.502 li
379.809 236.754 li
374.562 236.754 li
369.306 236.997 li
364.311 237.249 li
359.055 237.501 li
354.06 237.753 li
348.804 237.996 li
343.557 238.5 li
338.562 238.752 li
333.306 239.247 li
328.311 239.751 li
323.055 240.246 li
317.808 241.002 li
312.804 241.749 li
307.557 242.748 li
305.808 243.333 li
302.31 243.999 li
300.294 244.503 li
297.306 244.503 li
292.059 245.754 li
287.055 246.996 li
281.808 247.5 li
276.561 250.002 li
271.557 251.748 li
266.31 253.503 li
261.306 255.501 li
256.059 257.751 li
250.812 260.001 li
245.808 262.503 li
240.561 265.248 li
235.305 268.497 li
230.31 270.999 li
220.059 277.254 li
214.812 280.503 li
209.556 283.752 li
204.561 287.253 li
199.305 290.754 li
194.31 294.003 li
189.054 298.251 li
183.807 300.996 li
178.812 304.254 li
173.556 307.503 li
163.305 313.497 li
158.058 317.754 li
153.054 319.248 li
147.807 321.75 li
142.56 323.496 li
137.556 324.252 li
49.806 253.503 mo
49.806 251.36 li
51.3592 252.099 li
49.806 253.503 li
.0509804 .94902 .843137 rgb
f
137.556 305.253 mo
133.062 303.75 li
137.556 303.75 li
142.56 302.499 li
147.807 300.249 li
153.054 297.504 li
158.058 295.254 li
163.305 290.997 li
173.556 284.247 li
178.812 280.503 li
183.807 276.75 li
189.054 273.501 li
194.31 269.253 li
199.305 265.248 li
204.561 261.504 li
209.556 257.499 li
214.812 253.746 li
220.059 250.002 li
230.31 242.748 li
235.305 239.499 li
240.561 235.998 li
245.808 233.001 li
250.812 230.004 li
256.059 227.25 li
261.306 224.496 li
266.31 222.003 li
271.557 219.753 li
276.561 217.746 li
277.861 217.251 li
278.523 217.251 li
276.561 217.998 li
271.557 219.996 li
266.31 222.246 li
261.306 224.748 li
256.059 227.502 li
250.812 230.247 li
245.808 233.253 li
240.561 236.502 li
235.305 240.003 li
230.31 243.504 li
220.059 250.749 li
214.812 254.754 li
209.556 258.75 li
204.561 262.746 li
199.305 266.751 li
194.31 270.747 li
189.054 274.752 li
183.807 278.496 li
178.812 282.501 li
173.556 286.254 li
163.305 293.247 li
158.058 296.748 li
153.054 299.997 li
147.807 302.751 li
142.56 304.497 li
137.556 305.253 li
98.2636 285.232 mo
97.002 284.031 li
91.746 278.775 li
86.724 274.257 li
81.441 269.478 li
80.415 268.704 li
76.158 265.455 li
71.145 261.693 li
65.853 257.913 li
60.813 254.889 li
55.521 251.865 li
52.9658 250.646 li
55.062 248.751 li
55.6832 248.573 li
60.309 251.001 li
65.304 253.746 li
70.56 257.004 li
75.555 260.496 li
77.6498 261.992 li
80.811 264.996 li
86.058 269.748 li
91.062 276.498 li
96.309 282.996 li
98.2636 285.232 li
283.77 215.253 mo
283.296 215.253 li
287.055 214.002 li
283.77 215.253 li
287.055 214.002 mo
292.059 212.247 li
297.306 210.753 li
292.059 212.499 li
287.055 214.002 li
297.306 210.753 mo
302.31 209.25 li
307.557 208.251 li
302.31 209.502 li
297.306 210.753 li
405.558 197.496 mo
410.562 197.001 li
415.809 197.001 li
410.562 197.253 li
405.558 197.496 li
467.307 196.002 mo
462.06 196.002 li
467.307 195.75 li
472.554 195.75 li
467.307 196.002 li
482.805 195.75 mo
477.558 195.75 li
482.805 195.498 li
487.809 195.498 li
482.805 195.75 li
508.554 195.498 mo
498.312 195.498 li
508.554 195.246 li
513.81 195.246 li
508.554 195.498 li
554.805 195.246 mo
539.559 195.246 li
549.81 195.003 li
559.305 195.003 li
559.305 195.038 li
554.805 195.246 li
.258824 1 1 rgb
f
137.511 312.75 mo
135.099 312.75 li
132.435 312.507 li
130.95 312.264 li
129.105 312.03 li
127.755 311.355 li
126.819 310.887 li
122.643 307.944 li
121.662 307.206 li
117.468 303.993 li
117.018 303.543 li
117 303.534 li
113.49 300.276 li
107.262 294.291 li
102.267 289.044 li
98.2636 285.232 li
96.309 282.996 li
91.062 276.498 li
86.058 269.748 li
80.811 264.996 li
77.6498 261.992 li
80.811 264.249 li
86.058 268.497 li
91.062 272.754 li
96.309 277.254 li
101.556 281.997 li
106.56 287.001 li
116.811 296.001 li
122.058 299.502 li
127.305 302.751 li
132.309 303.75 li
133.062 303.75 li
137.556 305.253 li
142.56 304.497 li
147.807 302.751 li
153.054 299.997 li
158.058 296.748 li
163.305 293.247 li
173.556 286.254 li
178.812 282.501 li
183.807 278.496 li
189.054 274.752 li
194.31 270.747 li
199.305 266.751 li
204.561 262.746 li
209.556 258.75 li
214.812 254.754 li
220.059 250.749 li
230.31 243.504 li
235.305 240.003 li
240.561 236.502 li
245.808 233.253 li
250.812 230.247 li
256.059 227.502 li
261.306 224.748 li
266.31 222.246 li
271.557 219.996 li
276.561 217.998 li
278.523 217.251 li
374.508 217.251 li
369.234 217.503 li
364.23 217.998 li
359.01 218.25 li
353.988 218.502 li
348.714 219.006 li
343.458 219.501 li
338.463 220.005 li
333.189 220.509 li
328.167 221.256 li
322.92 222.012 li
317.664 222.759 li
312.642 223.515 li
307.323 224.523 li
302.094 226.017 li
297.099 226.773 li
291.78 228.294 li
286.776 229.788 li
281.511 231.291 li
276.237 233.055 li
271.197 234.819 li
265.923 237.078 li
260.91 239.085 li
255.627 241.596 li
250.353 244.107 li
245.322 246.879 li
240.048 249.894 li
234.801 253.134 li
229.806 255.879 li
227.268 257.409 li
219.501 262.674 li
214.236 266.175 li
208.98 269.937 li
203.976 273.438 li
198.729 277.182 li
193.698 280.71 li
190.431 283.464 li
188.505 284.913 li
183.276 287.901 li
178.245 291.429 li
173.016 294.912 li
162.72 301.437 li
158.733 304.677 li
157.608 305.352 li
152.658 307.332 li
147.393 309.843 li
145.197 310.815 li
142.254 311.796 li
139.86 312.516 li
137.511 312.75 li
52.9658 250.646 mo
50.238 249.345 li
49.806 250.249 li
49.806 245.997 li
55.062 248.247 li
55.6832 248.573 li
55.062 248.751 li
52.9658 250.646 li
559.305 215.253 mo
508.545 215.253 li
283.77 215.253 li
287.055 214.002 li
292.059 212.499 li
297.306 210.753 li
302.31 209.502 li
307.557 208.251 li
312.804 207 li
317.808 206.001 li
323.055 205.002 li
328.311 204.246 li
333.306 203.247 li
338.562 202.5 li
343.557 201.996 li
348.804 201.501 li
354.06 200.754 li
359.055 200.25 li
364.311 199.746 li
369.306 199.503 li
374.562 198.999 li
379.809 198.747 li
384.804 198.504 li
390.06 198.252 li
395.055 198 li
400.311 197.748 li
405.558 197.496 li
410.562 197.253 li
415.809 197.001 li
421.056 196.749 li
431.307 196.497 li
441.558 196.497 li
446.805 196.254 li
451.809 196.254 li
462.06 196.002 li
467.307 196.002 li
472.554 195.75 li
477.558 195.75 li
482.805 195.75 li
487.809 195.498 li
498.312 195.498 li
508.554 195.498 li
513.81 195.246 li
539.559 195.246 li
554.805 195.246 li
559.305 195.038 li
559.305 215.253 li
.0509804 .94902 .843137 rgb
f
127.305 258.498 mo
122.058 257.499 li
121.001 257.046 li
122.058 257.247 li
127.305 257.499 li
132.309 255.501 li
137.556 252.747 li
142.56 248.247 li
147.807 243.252 li
153.054 237.753 li
158.058 232.497 li
163.305 227.25 li
173.556 217.503 li
173.821 217.251 li
176.558 217.251 li
173.556 220.248 li
163.305 230.499 li
158.058 235.998 li
153.054 241.749 li
147.807 247.5 li
142.56 252.504 li
137.556 256.248 li
132.309 258.246 li
127.305 258.498 li
75.555 244.251 mo
75.555 244.251 li
70.56 242.001 li
65.304 239.751 li
60.309 237.753 li
55.5905 236.401 li
57.8263 235.976 li
60.003 236.7 li
64.989 238.194 li
65.7709 238.493 li
70.56 241.002 li
75.555 244.251 li
178.56 215.253 mo
175.919 215.253 li
178.812 212.499 li
183.807 207.252 li
189.054 201.753 li
194.31 196.254 li
199.305 190.746 li
204.561 185.004 li
209.556 179.253 li
214.812 173.502 li
220.059 167.751 li
230.31 156.501 li
235.305 150.498 li
240.561 145.746 li
245.808 140.751 li
250.812 135.747 li
256.059 131.004 li
261.306 126.252 li
266.31 121.752 li
271.557 117.504 li
276.561 113.499 li
279.208 111.606 li
276.561 114.003 li
271.557 117.999 li
266.31 122.247 li
261.306 126.747 li
256.059 131.499 li
250.812 136.503 li
245.808 141.498 li
240.561 146.754 li
235.305 152.253 li
230.31 157.752 li
220.059 169.254 li
214.812 174.996 li
209.556 180.747 li
204.561 186.75 li
199.305 192.501 li
194.31 198.252 li
189.054 204.003 li
183.807 209.502 li
178.812 215.001 li
178.56 215.253 li
300.642 96.834 mo
302.31 95.499 li
305.85 93.8109 li
302.31 96.003 li
300.642 96.834 li
312.804 89.748 mo
317.808 87.246 li
320.431 85.9995 li
317.808 87.498 li
312.804 89.748 li
325.683 83.376 mo
328.311 81.999 li
333.306 79.254 li
338.562 76.5 li
343.557 74.502 li
348.804 72.747 li
343.557 74.997 li
338.562 77.499 li
333.306 79.749 li
328.311 82.251 li
325.683 83.376 li
390.06 57.753 mo
395.055 56.502 li
400.311 54 li
405.558 52.749 li
410.562 51.003 li
415.809 48.996 li
421.056 47.997 li
431.307 46.503 li
436.311 45.504 li
441.558 45 li
446.805 43.497 li
451.809 42.498 li
462.06 40.248 li
467.307 38.754 li
472.554 37.746 li
477.558 36.747 li
482.805 35.748 li
487.809 35.001 li
493.056 34.002 li
498.312 33.498 li
508.554 32.004 li
513.81 31.248 li
518.805 30.753 li
529.056 29.997 li
534.312 29.502 li
539.559 28.998 li
549.81 28.503 li
554.805 28.251 li
559.305 27.8195 li
559.305 28.7822 li
554.805 28.998 li
549.81 29.502 li
539.559 30.249 li
534.312 30.996 li
529.056 31.5 li
518.805 32.247 li
513.81 33.003 li
508.554 33.75 li
498.312 35.253 li
493.056 35.748 li
487.809 36.747 li
482.805 37.503 li
477.558 38.25 li
472.554 39.249 li
467.307 39.996 li
462.06 41.004 li
451.809 43.254 li
446.805 44.253 li
441.558 45.504 li
436.311 46.251 li
431.307 46.746 li
421.056 48.996 li
415.809 50.751 li
410.562 52.002 li
405.558 53.253 li
400.311 55.503 li
395.055 56.754 li
390.06 57.753 li
1 .703529 1 rgb
f
127.305 271.503 mo
126.278 271.258 li
122.058 269.253 li
116.811 266.004 li
109.735 260.649 li
113.373 262.656 li
116.478 263.943 li
121.833 265.473 li
126.315 266.22 li
126.99 266.445 li
127.224 266.526 li
130.572 265.968 li
132.669 265.185 li
136.467 263.664 li
138.06 262.863 li
141.894 260.307 li
143.19 259.281 li
148.455 255.006 li
153.729 250.245 li
158.733 245.736 li
163.98 240.741 li
174.222 231.75 li
179.487 226.98 li
184.5 222.228 li
189.718 217.251 li
199.305 217.251 li
194.31 222.246 li
189.054 226.998 li
183.807 231.75 li
178.812 236.502 li
173.556 240.75 li
163.305 249.498 li
158.058 254.25 li
153.054 258.003 li
147.807 262.251 li
142.56 266.247 li
137.556 269.253 li
132.309 270.999 li
127.305 271.503 li
127.386 264.474 mo
126.873 264.303 li
126.801 264.276 li
122.274 263.52 li
117.135 262.053 li
114.246 260.847 li
107.028 256.869 li
102.042 254.124 li
101.862 254.022 li
101.556 253.746 li
96.309 250.254 li
91.062 246.501 li
86.058 242.496 li
91.062 244.746 li
96.309 247.248 li
101.556 249.75 li
106.56 252.252 li
116.811 256.248 li
121.001 257.046 li
122.058 257.499 li
127.305 258.498 li
132.309 258.246 li
137.556 256.248 li
142.56 252.504 li
147.807 247.5 li
153.054 241.749 li
158.058 235.998 li
163.305 230.499 li
173.556 220.248 li
176.558 217.251 li
186.82 217.251 li
183.114 220.779 li
178.128 225.513 li
172.89 230.256 li
162.63 239.265 li
157.374 244.269 li
152.379 248.76 li
147.159 253.494 li
141.93 257.724 li
140.715 258.696 li
137.052 261.135 li
135.648 261.837 li
131.949 263.322 li
130.05 264.033 li
127.386 264.474 li
49.806 232.749 mo
49.806 230.499 li
54.6543 231.421 li
52.47 232.356 li
50.04 231.777 li
49.806 232.749 li
201.404 215.253 mo
191.718 215.253 li
195.021 211.95 li
200.025 206.694 li
205.272 201.447 li
210.276 196.2 li
215.514 190.953 li
220.77 185.706 li
231.03 175.194 li
235.998 169.974 li
241.209 165.51 li
246.465 161.001 li
251.46 156.51 li
256.689 152.28 li
261.936 148.032 li
266.895 144.054 li
272.133 140.571 li
277.119 136.827 li
282.321 133.614 li
287.559 130.617 li
292.545 127.62 li
297.945 124.794 li
299.403 123.084 li
301.869 122.103 li
302.85 121.122 li
307.89 119.439 li
309.996 118.656 li
313.263 116.649 li
318.186 114.678 li
323.451 112.419 li
328.707 110.169 li
333.693 107.928 li
338.904 105.939 li
343.836 104.211 li
349.065 102.969 li
354.357 101.457 li
359.397 99.693 li
364.653 97.686 li
369.549 95.976 li
374.724 95.238 li
378.747 94.482 li
379.98 94.239 li
385.002 93.483 li
389.025 92.475 li
390.321 92.214 li
395.379 90.45 li
400.599 88.704 li
405.837 87.21 li
410.031 85.977 li
415.962 84.987 li
421.173 84.24 li
431.433 83.241 li
436.41 82.494 li
441.702 82.242 li
446.994 80.982 li
451.953 80.244 li
462.222 78.732 li
467.469 77.733 li
472.698 76.986 li
477.702 76.239 li
482.931 75.492 li
487.908 74.997 li
493.155 74.493 li
498.402 73.998 li
508.653 72.999 li
513.882 72.495 li
518.859 72.252 li
529.128 71.748 li
534.375 71.244 li
539.604 71.001 li
549.855 70.497 li
554.859 70.245 li
559.305 70.0391 li
559.305 96.5342 li
554.805 96.75 li
549.81 97.002 li
539.559 97.254 li
534.312 97.497 li
529.056 97.749 li
518.805 98.001 li
513.81 98.253 li
508.554 98.748 li
498.312 99.504 li
495.151 99.6502 li
493.056 99.252 li
490.965 99.9479 li
487.809 100.251 li
482.805 100.503 li
477.558 101.25 li
472.554 101.502 li
467.307 102.249 li
462.06 102.996 li
451.809 104.004 li
446.805 104.751 li
441.558 105.498 li
436.311 105.246 li
431.307 106.254 li
421.056 107.253 li
415.809 107.748 li
410.562 108.747 li
405.558 109.503 li
400.311 110.754 li
396.786 111.587 li
395.055 111.753 li
390.06 112.5 li
384.804 113.247 li
379.809 114.003 li
374.562 115.002 li
369.306 116.001 li
364.311 117.252 li
359.055 118.746 li
354.06 120.501 li
348.804 122.004 li
343.557 123.498 li
338.562 124.749 li
333.306 126.504 li
328.311 128.502 li
323.055 129.996 li
317.808 132.003 li
312.804 133.749 li
307.557 135.999 li
302.31 138.249 li
297.306 140.499 li
292.059 143.496 li
287.055 146.25 li
281.808 148.752 li
279.185 150.503 li
276.561 152.001 li
271.557 155.25 li
266.31 158.751 li
261.306 162.252 li
256.059 166.248 li
250.812 170.001 li
245.808 174.249 li
240.561 178.497 li
235.305 182.754 li
230.31 187.497 li
220.059 197.253 li
214.812 202.248 li
209.556 207.252 li
204.561 212.247 li
201.404 215.253 li
188.892 215.253 mo
178.56 215.253 li
178.812 215.001 li
183.807 209.502 li
189.054 204.003 li
194.31 198.252 li
199.305 192.501 li
204.561 186.75 li
209.556 180.747 li
214.812 174.996 li
220.059 169.254 li
230.31 157.752 li
235.305 152.253 li
240.561 146.754 li
245.808 141.498 li
250.812 136.503 li
256.059 131.499 li
261.306 126.747 li
266.31 122.247 li
271.557 117.999 li
276.561 114.003 li
279.208 111.606 li
281.808 109.746 li
287.055 106.254 li
292.059 102.753 li
297.306 99.504 li
300.642 96.834 li
302.31 96.003 li
305.85 93.8109 li
307.557 92.997 li
312.804 89.748 li
317.808 87.498 li
320.431 85.9995 li
323.055 84.753 li
325.683 83.376 li
328.311 82.251 li
333.306 79.749 li
338.562 77.499 li
343.557 74.997 li
348.804 72.747 li
354.06 71.001 li
359.055 68.499 li
364.311 65.997 li
369.306 63.999 li
374.562 62.748 li
379.809 60.246 li
384.804 59.499 li
390.06 57.753 li
395.055 56.754 li
400.311 55.503 li
405.558 53.253 li
410.562 52.002 li
415.809 50.751 li
421.056 48.996 li
431.307 46.746 li
436.311 46.251 li
441.558 45.504 li
446.805 44.253 li
451.809 43.254 li
462.06 41.004 li
467.307 39.996 li
472.554 39.249 li
477.558 38.25 li
482.805 37.503 li
487.809 36.747 li
493.056 35.748 li
498.312 35.253 li
508.554 33.75 li
513.81 33.003 li
518.805 32.247 li
529.056 31.5 li
534.312 30.996 li
539.559 30.249 li
549.81 29.502 li
554.805 28.998 li
559.305 28.7822 li
559.305 68.0365 li
554.76 68.247 li
549.756 68.499 li
539.505 69.003 li
534.24 69.255 li
528.984 69.75 li
518.76 70.254 li
513.738 70.506 li
508.464 71.001 li
498.213 72.009 li
492.966 72.504 li
487.71 73.008 li
482.688 73.503 li
477.414 74.259 li
472.41 75.006 li
467.145 75.762 li
461.889 76.761 li
451.665 78.264 li
446.616 79.02 li
441.414 80.253 li
436.212 80.505 li
431.181 81.261 li
420.939 82.26 li
415.656 83.016 li
409.581 84.024 li
405.279 85.293 li
400.014 86.796 li
394.731 88.551 li
389.79 90.279 li
388.584 90.522 li
384.615 91.521 li
379.638 92.268 li
378.369 92.52 li
374.391 93.267 li
369.072 94.023 li
363.96 95.814 li
358.713 97.812 li
353.754 99.549 li
348.552 101.034 li
343.278 102.285 li
338.211 104.058 li
332.928 106.074 li
327.906 108.333 li
322.668 110.583 li
317.421 112.824 li
312.354 114.849 li
309.114 116.847 li
307.224 117.558 li
301.77 119.376 li
300.744 120.402 li
298.206 121.41 li
296.676 123.201 li
291.564 125.874 li
286.551 128.889 li
281.295 131.886 li
275.994 135.171 li
270.981 138.933 li
265.716 142.443 li
260.685 146.466 li
255.429 150.723 li
250.155 154.989 li
245.151 159.498 li
239.904 163.989 li
234.621 168.525 li
229.59 173.808 li
219.348 184.302 li
214.101 189.54 li
208.845 194.805 li
203.841 200.052 li
198.594 205.299 li
193.59 210.555 li
188.892 215.253 li
.886536 .513203 .809673 rgb
f
116.811 268.254 mo
116.811 268.254 li
106.56 262.503 li
101.556 259.002 li
96.309 255.753 li
91.062 252.504 li
86.058 249.75 li
80.811 246.753 li
75.555 244.251 li
70.56 241.002 li
65.7709 238.493 li
70.173 240.174 li
75.159 242.415 li
80.379 244.656 li
85.599 247.392 li
90.585 249.885 li
95.814 252.864 li
101.07 255.87 li
103.387 257.147 li
106.56 260.001 li
116.811 268.254 li
90.7263 247.718 mo
86.517 245.61 li
81.234 242.847 li
75.96 240.588 li
70.938 238.329 li
65.628 236.304 li
60.606 234.801 li
55.332 233.037 li
53.6049 232.626 li
55.062 232.002 li
56.2326 231.833 li
60.309 233.001 li
65.304 234.504 li
70.56 236.25 li
73.89 237.414 li
75.555 238.248 li
80.811 241.254 li
86.058 243.747 li
90.7263 247.718 li
55.5905 236.401 mo
55.062 236.25 li
49.806 234.747 li
49.806 235.503 li
49.806 234.252 li
50.5191 233.947 li
54.783 234.963 li
57.8263 235.976 li
55.5905 236.401 li
.809673 .626667 1 rgb
f
126.278 271.258 mo
122.058 270.252 li
116.811 268.254 li
106.56 260.001 li
103.387 257.147 li
106.065 258.624 li
109.735 260.649 li
116.811 266.004 li
122.058 269.253 li
126.278 271.258 li
101.862 254.022 mo
96.804 251.136 li
91.53 248.121 li
90.7263 247.718 li
86.058 243.747 li
80.811 241.254 li
75.555 238.248 li
73.89 237.414 li
75.555 237.996 li
80.811 240.003 li
86.058 242.496 li
91.062 246.501 li
96.309 250.254 li
101.556 253.746 li
101.862 254.022 li
49.806 234.252 mo
49.806 233.777 li
50.5191 233.947 li
49.806 234.252 li
53.6049 232.626 mo
52.47 232.356 li
54.6543 231.421 li
55.062 231.498 li
56.2326 231.833 li
55.062 232.002 li
53.6049 232.626 li
279.185 150.503 mo
281.808 148.752 li
287.055 146.25 li
292.059 143.496 li
297.306 140.499 li
302.31 138.249 li
307.557 135.999 li
312.804 133.749 li
317.808 132.003 li
323.055 129.996 li
328.311 128.502 li
323.055 130.248 li
317.808 132.003 li
312.804 134.001 li
307.557 136.251 li
302.31 138.249 li
297.306 141.246 li
292.059 143.496 li
287.055 146.25 li
281.808 149.004 li
279.185 150.503 li
343.557 123.498 mo
343.557 123.498 li
348.804 122.004 li
354.06 120.501 li
359.055 118.746 li
364.311 117.252 li
369.306 116.001 li
374.562 115.002 li
379.809 114.003 li
384.804 113.247 li
390.06 112.5 li
395.055 111.753 li
396.786 111.587 li
395.055 111.996 li
390.06 113.499 li
384.804 114.498 li
379.809 114.246 li
374.562 115.749 li
369.306 116.496 li
364.311 117.999 li
359.055 119.502 li
354.06 120.996 li
348.804 122.247 li
343.557 123.498 li
431.307 106.254 mo
431.307 106.254 li
436.311 105.246 li
441.558 105.498 li
436.311 105.75 li
431.307 106.254 li
490.965 99.9479 mo
493.056 99.252 li
495.151 99.6502 li
493.056 99.747 li
490.965 99.9479 li
.776117 .575394 .949819 rgb
f
49.374 251.154 mo
54.594 253.638 li
59.805 256.617 li
64.755 259.587 li
69.966 263.304 li
74.952 267.048 li
79.2 270.297 li
80.172 271.026 li
85.383 275.742 li
90.369 280.224 li
95.607 285.462 li
100.854 290.457 li
105.849 295.704 li
112.122 301.725 li
115.614 304.974 li
116.1 305.46 li
116.145 305.505 li
120.456 308.799 li
121.473 309.555 li
125.793 312.615 li
126.864 313.146 li
128.511 313.974 li
130.662 314.244 li
132.183 314.496 li
135.009 314.748 li
137.61 314.748 li
140.256 314.487 li
142.857 313.704 li
145.917 312.687 li
148.221 311.661 li
153.459 309.168 li
158.499 307.152 li
159.885 306.324 li
163.89 303.066 li
174.105 296.586 li
179.37 293.076 li
184.347 289.593 li
189.612 286.587 li
191.682 285.03 li
194.922 282.294 li
199.89 278.82 li
205.137 275.067 li
210.132 271.566 li
215.379 267.822 li
220.617 264.33 li
228.348 259.092 li
230.805 257.616 li
235.809 254.862 li
241.065 251.613 li
246.294 248.625 li
251.262 245.889 li
256.491 243.405 li
261.711 240.921 li
266.688 238.923 li
271.917 236.682 li
276.885 234.945 li
282.105 233.208 li
287.343 231.714 li
292.338 230.211 li
297.522 228.726 li
302.517 227.979 li
307.791 226.476 li
312.975 225.486 li
317.943 224.739 li
323.199 223.992 li
328.455 223.236 li
333.432 222.489 li
338.652 221.994 li
343.656 221.499 li
348.903 220.995 li
354.132 220.5 li
359.109 220.248 li
364.383 219.996 li
369.378 219.501 li
374.607 219.249 li
379.836 218.997 li
384.831 218.997 li
390.105 218.745 li
395.082 218.502 li
400.329 218.502 li
405.585 218.25 li
410.58 218.25 li
415.827 217.998 li
421.074 217.998 li
431.316 217.746 li
446.832 217.746 li
451.836 217.503 li
498.321 217.503 li
508.572 217.251 li
560.061 217.251 li
560.061 215.253 li
508.545 215.253 li
498.294 215.496 li
451.782 215.496 li
446.787 215.748 li
431.298 215.748 li
421.047 216 li
415.782 216 li
410.535 216.252 li
405.531 216.252 li
400.284 216.504 li
395.028 216.504 li
390.006 216.747 li
384.786 216.999 li
379.782 216.999 li
374.508 217.251 li
369.234 217.503 li
364.23 217.998 li
359.01 218.25 li
353.988 218.502 li
348.714 219.006 li
343.458 219.501 li
338.463 220.005 li
333.189 220.509 li
328.167 221.256 li
322.92 222.012 li
317.664 222.759 li
312.642 223.515 li
307.323 224.523 li
302.094 226.017 li
297.099 226.773 li
291.78 228.294 li
286.776 229.788 li
281.511 231.291 li
276.237 233.055 li
271.197 234.819 li
265.923 237.078 li
260.91 239.085 li
255.627 241.596 li
250.353 244.107 li
245.322 246.879 li
240.048 249.894 li
234.801 253.134 li
229.806 255.879 li
227.268 257.409 li
219.501 262.674 li
214.236 266.175 li
208.98 269.937 li
203.976 273.438 li
198.729 277.182 li
193.698 280.71 li
190.431 283.464 li
188.505 284.913 li
183.276 287.901 li
178.245 291.429 li
173.016 294.912 li
162.72 301.437 li
158.733 304.677 li
157.608 305.352 li
152.658 307.332 li
147.393 309.843 li
145.197 310.815 li
142.254 311.796 li
139.86 312.516 li
137.511 312.75 li
135.099 312.75 li
132.435 312.507 li
130.95 312.264 li
129.105 312.03 li
127.755 311.355 li
126.819 310.887 li
122.643 307.944 li
121.662 307.206 li
117.468 303.993 li
117.018 303.543 li
117 303.534 li
113.49 300.276 li
107.262 294.291 li
102.267 289.044 li
97.002 284.031 li
91.746 278.775 li
86.724 274.257 li
81.441 269.478 li
80.415 268.704 li
76.158 265.455 li
71.145 261.693 li
65.853 257.913 li
60.813 254.889 li
55.521 251.865 li
50.238 249.345 li
49.374 251.154 li
1 1 .6 rgb
f
49.572 233.721 mo
54.783 234.963 li
60.003 236.7 li
64.989 238.194 li
70.173 240.174 li
75.159 242.415 li
80.379 244.656 li
85.599 247.392 li
90.585 249.885 li
95.814 252.864 li
101.07 255.87 li
106.065 258.624 li
113.373 262.656 li
116.478 263.943 li
121.833 265.473 li
126.315 266.22 li
126.99 266.445 li
127.224 266.526 li
130.572 265.968 li
132.669 265.185 li
136.467 263.664 li
138.06 262.863 li
141.894 260.307 li
143.19 259.281 li
148.455 255.006 li
153.729 250.245 li
158.733 245.736 li
163.98 240.741 li
174.222 231.75 li
179.487 226.98 li
184.5 222.228 li
189.756 217.215 li
195.021 211.95 li
200.025 206.694 li
205.272 201.447 li
210.276 196.2 li
215.514 190.953 li
220.77 185.706 li
231.03 175.194 li
235.998 169.974 li
241.209 165.51 li
246.465 161.001 li
251.46 156.51 li
256.689 152.28 li
261.936 148.032 li
266.895 144.054 li
272.133 140.571 li
277.119 136.827 li
282.321 133.614 li
287.559 130.617 li
292.545 127.62 li
297.945 124.794 li
299.403 123.084 li
301.869 122.103 li
302.85 121.122 li
307.89 119.439 li
309.996 118.656 li
313.263 116.649 li
318.186 114.678 li
323.451 112.419 li
328.707 110.169 li
333.693 107.928 li
338.904 105.939 li
343.836 104.211 li
349.065 102.969 li
354.357 101.457 li
359.397 99.693 li
364.653 97.686 li
369.549 95.976 li
374.724 95.238 li
378.747 94.482 li
379.98 94.239 li
385.002 93.483 li
389.025 92.475 li
390.321 92.214 li
395.379 90.45 li
400.599 88.704 li
405.837 87.21 li
410.031 85.977 li
415.962 84.987 li
421.173 84.24 li
431.433 83.241 li
436.41 82.494 li
441.702 82.242 li
446.994 80.982 li
451.953 80.244 li
462.222 78.732 li
467.469 77.733 li
472.698 76.986 li
477.702 76.239 li
482.931 75.492 li
487.908 74.997 li
493.155 74.493 li
498.402 73.998 li
508.653 72.999 li
513.882 72.495 li
518.859 72.252 li
529.128 71.748 li
534.375 71.244 li
539.604 71.001 li
549.855 70.497 li
554.859 70.245 li
560.106 70.002 li
560.007 68.004 li
554.76 68.247 li
549.756 68.499 li
539.505 69.003 li
534.24 69.255 li
528.984 69.75 li
518.76 70.254 li
513.738 70.506 li
508.464 71.001 li
498.213 72.009 li
492.966 72.504 li
487.71 73.008 li
482.688 73.503 li
477.414 74.259 li
472.41 75.006 li
467.145 75.762 li
461.889 76.761 li
451.665 78.264 li
446.616 79.02 li
441.414 80.253 li
436.212 80.505 li
431.181 81.261 li
420.939 82.26 li
415.656 83.016 li
409.581 84.024 li
405.279 85.293 li
400.014 86.796 li
394.731 88.551 li
389.79 90.279 li
388.584 90.522 li
384.615 91.521 li
379.638 92.268 li
378.369 92.52 li
374.391 93.267 li
369.072 94.023 li
363.96 95.814 li
358.713 97.812 li
353.754 99.549 li
348.552 101.034 li
343.278 102.285 li
338.211 104.058 li
332.928 106.074 li
327.906 108.333 li
322.668 110.583 li
317.421 112.824 li
312.354 114.849 li
309.114 116.847 li
307.224 117.558 li
301.77 119.376 li
300.744 120.402 li
298.206 121.41 li
296.676 123.201 li
291.564 125.874 li
286.551 128.889 li
281.295 131.886 li
275.994 135.171 li
270.981 138.933 li
265.716 142.443 li
260.685 146.466 li
255.429 150.723 li
250.155 154.989 li
245.151 159.498 li
239.904 163.989 li
234.621 168.525 li
229.59 173.808 li
219.348 184.302 li
214.101 189.54 li
208.845 194.805 li
203.841 200.052 li
198.594 205.299 li
193.59 210.555 li
188.361 215.784 li
183.114 220.779 li
178.128 225.513 li
172.89 230.256 li
162.63 239.265 li
157.374 244.269 li
152.379 248.76 li
147.159 253.494 li
141.93 257.724 li
140.715 258.696 li
137.052 261.135 li
135.648 261.837 li
131.949 263.322 li
130.05 264.033 li
127.386 264.474 li
126.873 264.303 li
126.801 264.276 li
122.274 263.52 li
117.135 262.053 li
114.246 260.847 li
107.028 256.869 li
102.042 254.124 li
96.804 251.136 li
91.53 248.121 li
86.517 245.61 li
81.234 242.847 li
75.96 240.588 li
70.938 238.329 li
65.628 236.304 li
60.606 234.801 li
55.332 233.037 li
50.04 231.777 li
49.572 233.721 li
f
41.805 217.251 mo
560.061 217.251 li
560.061 215.253 li
41.805 215.253 li
41.805 217.251 li
.333333 0 0 rgb
f
0 0 0 rgb
%ADOBeginSubsetFont: Euclid AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
NDGFMI+Euclid dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/five <1C60D8A8C9B7A73DB6FE1D1251717E29A69023C761FDAA54096AC9B4D
931627C00E8BB0F069E31BD83AC25F1E073B725BA8B73159D77AB91084E30F4E
47130E127FE4903035806AFD1A22B10E1F87B29172E290E0D87BB48DD85610B8
4893337D40CB668B861DF96A815096A968D6FF328876C73297F7B2CCF52224AC
FD8569D450E61EC366D22DE51CF4046347CBFFFB7940CFB37AD08868877FBB16
5112D1D8A7B9B2B858076046CF107CCF9BA3F743D9694599DD2FF33B323F83EC
FB690D2A28894F2C77A5904A0D2811028472C8B99C97AC22B73F50070822922E
80E802DF4E208B37BADC98433FFA926024E4AA3F35BBAB7B818EA11A5D2BD9D2
1E19AB75485663408C1B027987091DEDD885849A09E4174ADDE33938AF406951
9439B2FD592796C72DEF59481D5A4C831FEC6601C2AABC0C685AECF2E44DCC7E
B7F767675996D0722245FEB33FAD32A9427A56B90EB01D41763321097828F275
325F3A1CC06C6> |-
/nine <1C60D8A8C9B7A73DB6F19834DF2B565A5BFDA39B606E8F29A195127E4
FE9F1D8BB15B7FA1DB42FD39FD62DB4B7287439323B4250D49DDEC14BC7B65B7
24C0D06172A0AFA58007E14C6703DA246FB73BF99619C7CE0C5E66AA4BC45607
630BFC2049C2E669EF9AE060B350345E9BF873EFDD4B9A3855AFEE1FB93081F0
42B41A5BA3A67378B98E3D5E2C67A883435F8C81459EC4AC9B445F38F5330943
D90A8BBA760B51BFAB24BA9C99FB370FCD9978EDC807CAE26F675CF046E2581F
F9521AA87CD8ADF0DD945F96A55CDBE26E2541F369CF3A192EF74914B076A854
478925F285C137895FF33CAB4566B80B00F1376F23916AB2982FF77517E0110D
D4DB3EC7FFC09F33FD77FFA52C829BE9153291D545DD657BAE0267EB6B540EB5
36D49BF18541FB88AD8A27A69C7D1881BC868B43BAA18FD2CC0AC561FDE2248B
204B0E8D30C718E1227FF263E56FDCE2CBC457725FD487E7B4FEFD5F94B35AFA
8827DB2D6797ECBBE0F37CD78AD93DC2F62695953DFBE754B8193C5A0> |-
/equal <1C60D8A8C9B6FF86FB9B1D952597572D0811112E9B51C72FAC2F74D7
F114FB0B5F94E104E8FD6AF0ADB583D123E5C86A456B1E6A098F070FF537700C
3CA7F46651AE381B0059A566569FDE949297486994A82196F1252AD5D58AD45C
EB8B224E843BF0C28809EEEE1847B173A0CD13FF807026FE1098BAA5A37BE76D
9E2D97D38EB5E5AEC417265FC77C1AF6130DF6> |-
/C <1C60D8A8C9B6079F6CA2D4E1C929C767900EBC3C979A9851948A33017D40
262A8D2F5E870B193C733A720E48C32E9F4F9E93CC95A121D4AA3FD8995C7FFC
BA12D72F93D0AAB6457CA801A807AE281908987114FECAFA629ECAA2B854E186
4DD2C365F05E03BF3DC7AD94893E0C976AE6C25F6348782673EE7DF759FF9908
4ECDB6BC61B26C387D0A910E2DA08D0966C17C9EC81E5CA13C7ACF7158BC8C3D
A3E31AC36A9DAFF204E91E82E5D50649091E3447830AE3933F64182F69643DE3
B4B71380DAE663B8EFB3FD6375C01B392DAE9269D72908BDC374DD4B34B5C435
CE68CB8DF30E77D5F65E66878C7E3614DE25B1A709463E700660156282108B27
EFB4483BD61795531E0A1BCA2C1AE2DF05> |-
/W <1C60D8A8C9B50A6E5F8B2F72DAA3C208AD74C47BE32D858C5C7386E9F6B8
84B37FECFA48D60284C63148B0D51773EDEDD52ACA31A94C9CC2C192AA383177
1BE39C616C7104DA1B844DDEF196C6A816A3AEDE01A1CFD4217A8F30D20EC64F
EBBB5C7FA226AE8DBCA5FC9542DBA17F80E2D29F1C4183C55F6DC1CB53A79354
A6C0F13BC31052B37926AE748B9909896B3F6E73FB7C148859BCEB298773726C
6113C63FDEC6413EFA660C0824E3167430266F9CD895EF488AD2D0477E0D1A23
3D5A8F2358F39333B004A8FD10B89F40CDA9463D497C59E4BA6CABD383D21E16
41399336C0EA4DF3E0D5EFE3D3780773E446F3006AFAA0336028C373ECDEC0B9
E93012D220ADB0B274E9DFC1485A71896F4BC5D212FE262595DB54E3CE11E88E
57C20683233F3F99A8AABA0F04D87EC6A17CCDEF0A7A2880D7DA51E102903C29
F00EA465593A50BC> |-
/a <1C60D8A8C9B7A73DB6C056B34302904348CB649E4CA9A06D864BA9EAA4CD
3500E463CDF01E59521B9B39B024903EE9BF0B54D0E5581CB210EFC939C37638
9D1CEDB9856BCB9147B59BDE6804396772257B17BD28931099E46CC74343D26E
A0938A2C3AEDF56C4F2C006230C2637B354FD561ADEAABF114E734B0199D3CEA
81302F9D6545F290AA778F91107D2E8B0BC3D7163BC2019C0AC011398929D6B8
1F7800D13662702A4B6A77F4E790A95F187131A7C9DFAFCE8C145B101341A6C7
0147B91C29851EBB946A2C10638AABD7151588A6C70BFB5E7FE19D15E1BF9244
8D5656E687412D73E912487215278B09BE13FB8DCDBE91B6F70AAD807599B6A9
0CAEB01FA17BC8B11B632B423BEC13CFFC66AE8FB0CA0D7E20DA3A7B3981CE02
515E5D48A7933F20F76DB10E0E968D148FD13175E468569C0B86E5218B9B5F07
27CE44D411BD790BEF6A53014D31211627F35AE8F1838114A6469D400E4AFECA
9252694C3D25804452FCF6686EDCA87274E94E450DFE937A55238840BFFCED6A
C2B7D6B9F175> |-
/d <1C60D8A8C9B790A84EE4AED240FBD3F06C134C566544835664A4BAFBFBF2
58075563FE0B2641789D10FD835F341E1CF57AD29ABF78212F2E862FD63D2A5C
E1D6EAF5252D30858F56AE2A1A5D97B5F07494AC35F947770CFE276DB57212FD
719D96FBDC9571E75A6470D11DC9DF20FD88390C168394F9CE3FC7EBD1C0279B
EDAAED79077070BFD437545F762ACD6F28455D51939337CC23DEB3C2F90633B2
DB2B6F20684DF8060B7B6C1E787C71E90283B0641DEC1FA88DDC155ADC085FB6
C1585D9CBA78BB0885D780F4FF06C2C0A1A904CB840643BBE9914A38B56FD343
8DA3BC404051F16D833A0EBE278831DCB934DDD9DA18B5966D9D4C6A7D221C9B
6D4484F3C397> |-
/g <1C60D8A8C9B7A73DB6D5232061D94D66C0B60A005525C6CE0653122A6DA1
BB094CE0A9497EC50E26710589D5A4C4FC2DFB326F58B4B6D35FC00C49080ED2
05D5338D60A02E5FDD9BC1DF723694529888AFB189322346912DC7E201F7695A
E4EA0F9F6F57760C6BEEFD6EE879515908D4A1598C8B84F1BA751A6AB8F1ED08
4582909A6A5F5ECA9E45C0617496D67780F6AD6474314A0523FA4F818CCFA2FD
223FAF8C08525D0537B7E85DFEC50BBA14FA46BBDC7244DC18B3F64E7F41F1A7
9D53A80738FE917C2E9E1C0744F2E948188B3A28B56C85EA626E9A74DF68BAE0
865B27BF3847A55498CE35E057CCE812693F8DE873FAB1D3448AD04BB8A437C6
5C0CB3BB1D214EBA7F17916256D918030D9DC10F4A1AB9F97BA2650BD7109509
BC06663F5E81C8CC05708FBB368651C0AD700C058CD5429BB78D74A72F7B310A
6015F9E86E1F4F1D7FE82B9855F66BADD20FB92E5A78C9AF5D61385ABE8CE80A
4DA29347F120F3D7B520FB8A3D18FB38484EED82B53790D11036DCE315959697
C7B2DDD6C16DF80CCC8A179C4E5A99FFCB6474B72FDC47D822AB234920C50448
67476EDD20E9E28FE81C1DA01B2007B138705AEB1A5FB1E95648ECD849F4E5A2
3AA7C69F16611700F6EC8D41A57E68A42CB6AA15F289DA1CD81492FB833234F0
F14AF79588FD44D5CA3492498DBBEFC2DCCDB24675C149B8414B7C41A2B1A8B4
39C3F4946E90AAF97D360BA75CF948605AE9F70E7F9A8EA19EC2B4368794E0DB
6E7F37520BEFA68695055AE9148E8174310CF6FFF1F02E416E03> |-
/n <1C60D8A8C9B790A84ECC5DE8DB9433FFA3508474A30F12CE952E122513B3
7F1D3EEAFED6483B32FE4E4D7BAA9E2A028EB609AC76EF1543D3A50DEF0B9177
403A8F916F707A7226F19D645B852D2323206B57569119BCEDAFD978C7DBECC1
EDE5B1A61CFF8C5166C0709E9743F9E7E6025489AC3BFE453AD83AEC67F6B80C
D329321DE9218A07FB7261A731980DD1C07715238BECD0BBBF9679CE23F83587
3D9C033C2AEC27DDE9F78AB4CE4E6B011D97918C88B78273AE2EF525E1544F6A
80F373F609359EB0506A1CA47DA5B9C91730AA57560D488D22A12D837AD68502
599A1A4D5FBEC18ADFFC48F7396120C680CE9129A13E312BBA537C3FAADCDE91
A3F17B63797C579CBC5FE46E3786C72C82D307E8B1F95A573108D0C2FA804F80
075CC12074C564B18D22980D05479A7220423A52CD57767084D69933903685B0
22C0FD> |-
/o <1C60D8A8C9B7A73DB6E04DA22DC3887E107FB9BDFC252BD45EA9A6CCD743
82FF0132EF21D25B722C75D2E33383CA764680024EEB414BCB7ADD86F7ED9B7C
AA4B3C73C0FF931A5F957D4E732C018DBAC0448B49ECFCA9E44D7D60E3057C64
1C9F43A44C02717B9874E79F25F328F02390E1E2848262CF95EEF6A8FF5EC287
CB252D5295F9A0B55B2C0979A1B9BF1E1C9721D84CC71A414CF2D7FEA85AC228
1A9E3CA28F6645880AFF587D944E49C65C2DB73AF767B55AC5D0E13CAA2CA5DB
23586D082F2BF5FB10FEC76AAA1ADE699536A27A1A55FFB1A1A49F25E79A5DD0
43A38E998376023D82B21C0FFF40E3F32FC19A7C76AC> |-
/r <1C60D8A8C9B733AACD71AA61712FB3877FD4C3C5B42816FFE1389A249324
DD496757EDA62D25A51340B0EE334976FAF9403C8FBA84D76CEDEB4301ED1249
0CC5449596E7CB651D69EF81E54DA8CC7282F229A021D49601BF0DA567C0A4B3
A60DE3AC9F02126F663450FB3E3F30DFC747B0257034F99530FF4E1253E594F6
0FD0552A63FC0E78847DE24CE84E4B101BC97130E8E6F2D7D4168BE017D16FC7
54CBBE3836930DF3FDDCB5B3D705BEE4C25C362C07B9D9766E70505E90223E85
3CE68321A8A478C2A345045130A7ECB2EF34DC1CE5FF950FE7FA3CBA87E735F7
C4B239D11850F200C4B1B2D3B363EE> |-
/t <1C60D8A8C9B7361F0268E40953E58C7BBC290FBA797B35D723DF44EA35D0
228BC3EC766F15AF64F3C24B0FEEE8644C9F85D47819AFE65026CD54C254F1D7
CE7F2BF2376AA7AA8D0968EF355DD56748453CF1F86822D10E28504BF3D5E11B
2698187CEA6FC0AAD95A8067771976831D5A97155C091F14C2C7661DF709D653
FB9227D70E75ED8A490A96461BE369B941B9FEBF7A7F16A288ADF72CF190B045
D0951AFFBC51E84A66989F7DFBD332F6767A> |-
/u <1C60D8A8C9B790A84EEC21FCA044BA62C44C4FB5840969C6B45A6B8FEBA5
6791BFF4767403F33A6F1C5D0EA3648801B1C371627702F27BFB3C64974B88F9
6FA8F53F9E318F41F01703A431660CA2A49AB020DE6318204EF879AFE22B214C
1E774D659108297A42C0443FDB3D575F2D13B5DB10200B0A762AF03AC7A99B08
381DB4BB94DDCE4C597A9F323F4CBC32835FF4530CA0C25D9D19878467531E8E
8262D796596B5D80E247F84B69A6E85E2E1BFA80F9A24BBD89895284DB10561D
8D5EEC806F1BEA51776D0B9DD50E6B238EE2DA599A7D649DFD6D639B31398AF5
504B> |-
/v <1C60D8A8C9B78B91DE706810329F3E0772483AAA6C156D6CC70167AE8818
FE4019F058C238FC72B69E396E496B624D2580EA0182F9C0B0E04A3A9BCA15C2
D94D0437ADB0AAF8E57D04CD941B11AE3AF159890F622C557FB7AF74AE36BCFC
92F5265EC635A1215DA3CB07A0B6845DBE3B0938A124B9F3CA534248C059AF63
AFDCE6F3808F6BD141AB7392709D7783A8BA04DEF9C868C2F87EAF24801BEF55
79A148E5547911D64E8E84368D0F9E5BDA3CE66AB2B5843D05691B8B067A02DB
5A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NDGFMI+Euclid /Encoding get
dup 53 /five put
dup 57 /nine put
dup 61 /equal put
dup 67 /C put
dup 87 /W put
dup 97 /a put
dup 100 /d put
dup 103 /g put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 116 /t put
dup 117 /u put
dup 118 /v put
pop
%ADOEndSubsetFont
/NDGFMI+Euclid*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period 
/.notdef /zero /one /two /.notdef /four /five /six 
/.notdef /eight /nine 3{/.notdef}rp /equal 5{/.notdef}rp /C 3{/.notdef}rp 
/G 14{/.notdef}rp /V /W 9{/.notdef}rp /a 2{/.notdef}rp /d 
/e /.notdef /g 4{/.notdef}rp /l /.notdef /n /o 
/p /.notdef /r /.notdef /t /u /v 137{/.notdef}rp]
NDGFMI+Euclid nf
NDGFMI+Euclid*1 [13.2252 0 0 -13.2252 0 0 ]msf
137.322 25.2686 mo
( = 0.95 GeV \(Current World averaged\))
[3.94092 9.82617 3.94092 6.1499 3.21387 6.1499 6.1499 3.94092 9.91895 5.40869 9.45605 3.94092 
4.68164 9.08545 6.87695 4.72119 4.72119 5.40869 6.87695 4.68164 3.94092 13.1328 6.14941 4.72168 
3.21387 6.87695 3.94141 6.14941 6.51953 5.40918 4.72168 6.14941 6.14941 5.40918 6.87695 0 
]xsh
%ADOBeginSubsetFont: Euclid-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
NDGFMJ+Euclid-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/A <1C60D8A8C9B61AE94F3B04B50CDDAB130F5B54D75D38E71C1807E3E08F67
DE71D1D5F3C6876532AD0423BA8B2AD38AE6B19ABFB515A7285715CD543E6D11
F62ED915851482F4E07331860E57D9561D0F4B10D0781E0C3930F0688486A85F
AC24366683723733B1C771E219E515733E73418E7FBC677F5D9B4EDC843504CB
F6BE203FFB34B73A5150BA6309E4D1944C3015A0FF9A654BEE2C897F812C2171
1CCEA20C91FE18B7B1217C92FC85B88EDF1AF3C4F5F06D02D74AE10B77605737
E2F8EDA9BF13C0A34480499F90EE9D7A1B41989A8352BFA2B768D77C54E26ACB
67401B7A01F62B8469C70C5793C19BB6590E672A35C0A20344E0C470B198DE17
EA67BC120C87E867> |-
/M <1C60D8A8C9B58652260AA07E6DCBB9FE539586273D2F4D763E760B770FAE
C0781338437875B4235DA3900626C9DE6670A7C493925A93F058EB796883F77F
74F773EDB0B4A0D643E2C115A096E8FB6DF4E1AB658635A2AE5AE578B85B0366
EDBB056B5AC1D96D486B1DF2E9830FB1EDBA2371D70871B3241A3EDEE6980DEE
1A387652E8764B8785000B6E4DB1A8348A86B5D6563E75AFFF9025324A658DDE
0BFA6D5EF596D50795D5E7DA58E022130B20067383F85D01477049002CCE7C05
6B9A277BAE3E3DCE377DAFC65E2450116662FDBDA9A0304611F66E893A4E37FB
83B95D2BD35F8869A30AD210BC2DBC8629C16DA17C75ED5FFB239660DE564921
AE51B2248A8B23B3B37FD74FAF41AED7DB859A829F098B79A9A52CF180C66FDB
40D48B6469DBB5551ACBA7BEF3E2BFE338DC279A3DA25502A1214625EC6B1D13
605661967571E50B7674B2825E805DA5437885D42830000035C7F7C15EE21BBA
D36171FB524473E3B88081113832B76426C039F8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NDGFMJ+Euclid-Italic /Encoding get
dup 65 /A put
dup 77 /M put
pop
%ADOEndSubsetFont
/NDGFMJ+Euclid-Italic*1 
[65{/.notdef}rp /A 11{/.notdef}rp /M 2{/.notdef}rp /P 175{/.notdef}rp]
NDGFMJ+Euclid-Italic nf
NDGFMJ+Euclid-Italic*1 [8.959 0 0 -8.959 0 0 ]msf
130.938 29.1055 mo
(A)sh
NDGFMJ+Euclid-Italic*1 [13.2252 0 0 -13.2252 0 0 ]msf
119.412 25.2686 mo
(M)sh
66.429 59.94 mo
63.936 59.94 li
63.936 52.74 li
109.53 52.74 li
109.53 55.071 li
66.429 55.071 li
66.429 59.94 li
1 .700392 1 rgb
f
109.53 59.94 mo
66.429 59.94 li
66.429 55.071 li
109.53 55.071 li
109.53 59.94 li
.886059 .511157 .812549 rgb
f
0 0 0 rgb
%ADOBeginSubsetFont: Euclid-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
NDGFMJ+Euclid-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B81F2CC3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NDGFMJ+Euclid-Italic /Encoding get
dup 32 /space put
pop
%ADOEndSubsetFont
/NDGFMJ+Euclid-Italic*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A 11{/.notdef}rp /M 2{/.notdef}rp /P 
175{/.notdef}rp]
NDGFMJ+Euclid-Italic nf
NDGFMJ+Euclid-Italic*1 [8.959 0 0 -8.959 0 0 ]msf
130.938 46.5669 mo
(A)sh
NDGFMJ+Euclid-Italic*1 [13.2252 0 0 -13.2252 0 0 ]msf
119.412 42.7139 mo
(M  )
[11.8496 4.40381 0 ]xsh
%ADOBeginSubsetFont: Euclid AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
NDGFMI+Euclid dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/ampersand <1C60D8A8C9B6FF86FB8603F347E8100F5D10523B52E7421D6A60
D132269631EDB7FD974D89B2F6607C986827316E3D7A4C8FF54C92348AA88876
4C896BF1605C7D8518691877D09F3EE252911E71805DE0A88B4825E5E440B3FA
0DF4E2CEDD9043EE96099A53DF42241644B1C551B30FF4CB4C0051D74FCD504B
F00D1540B175C66A79948977F1F549180825572A935B540D9C5AF723CC2C4C2B
6DB49B1CB827A9230DAAD2AA00A29A2FD7441661ADF1F41AB80FE26B801230E5
1E5687F520E5458738CD39140190A7B449430A187C1BAE4B9A37116C5500B9C4
B8A2FE48668481D0A1949BD6C18F3E4C633EE8729E75546E3D2325FE5928C1C8
D1511539412DA808B0221F5DE5BF88A74DFB16E6505E7209A41D68E0C52B545F
4F1011EEA09F3C77DF92C2F3EC9B905A2A203F04AE092369827E9820DB621986
DD4F164D86ABC569B02D861DA873C877ACF67612ECDBB3237FE6CAE06290C8F2
9CD5962B622784AA6B117257DC4D6D79416E3509091812B19B2EFF39F38E6E74
EB945A8DCF7225E8377DD2FAA8A3C9B2F851CAB39E57E94D89C875743DDB6396
9447BA85784C1D377A83E41B626782A336282BDAD436ED1A3E3A8D6BEAAAA34A
8EA3115E057772852808A152AA44A28B32D1089990AB61D9DD6C328AA735BF56
974E91E5642B845C95587EDB4154A2B95FBEF8D797D7FBEBC57D338F17736D8B
67EC428BB56551BA6B1C209803C1AE968EDD08B8837DD287389B084A9B4B5094
C9B76921BE65C428742368FA71774E60C5568B> |-
/I <1C60D8A8C9B8038000EBBCF8303A28983725D56A967B8CF9AB3E1C4FD04B
585B5F9CB509CEA441D11537BCE7AA2F40634FFA3C7C1D6ADCF2ED7654589BBD
198680C8E831C5FE1E6950BCD307E685AE8896F64FC0EE52B019AC6838FF83DB
9E49CD0D35146AF191844E60AC76CC44C097A469D555FB3A0350532A82525052
CE67F8B63870B4F0AD55784AFA38ED684CDD06310C2C65E01569> |-
/K <1C60D8A8C9B6FF86FA04033964F3B2486304FA479D17DF6E1084BF584150
5C342C6064C5D4168A4A2FC172A70D83A5C103A66015CAA5C3DA78DC83581385
6D8DB17DF8CE1B9E39B237BC211875B91AB5C246DF3DFD4050E4AE418B106CE6
92A324F8AB36F497A00554E2B5237BA07B77E7D22E3BCC93F9F2253BE03692F3
9167C70CB0D5F63DA9FB07EAF54B8E66FAC41730272587D92AFE1A70B7FAB140
15299552C756E929EA8F84FC0BA6C722FA9D762274C431471563298C57ED5CD7
B2312943959B977F9A41330F40D7B366B8B31946256BBD8C9C16B964DC98E0BB
27ECCC7219D1B2A1D783F85F675BB4B57EFFBB59D489236A6FD3460BB6F7E1FA
AF5BE2A1C815E0EDF305CAD218D7053C9FEBAC14739731A12A9AB750E9FBAEDD
64B8F93D9657171F1C1EFC14588663A717F2075B1EEF431D5014678A487939EE
73CA82A900CE919513456419> |-
/S <1C60D8A8C9B790A84E8CCE947F3F146777D8A87455C850270B23DD947CEF
4C215CDF096B0B11DE4BE4DB69934A2386C2D57DC80DD895DE2E0003335770A2
EC0C4F0D5AF306187C2F7755AB884D86345752BE77C2BAECD63E77B418DA385F
1F2650454D324D7343ABCEB00B581DF9DD2631A2E29CCE683C61F53B0D1ED96F
1D7CC11A7EF8385424B5D2B555C0E537D2058C487D65FDD36104E31FB436DC99
6116AAC171D695D0D55D584B453838DD7945996406C3626A3917B0900CECB27B
13BD3DEBDCBED49A70EB85A84135CA7BB64164F298C8229C4F6A80F67F0D1E5E
0B183A02E311C2CA64912A4F40E00A6E33DA30210C5BBF93E4FC98BB7B957E23
BFBFE90D2D120FBB6C904CAA614167A18644E283696461EAB26A500BF41B5180
F34AB8BAB5B4168D86A68C4FEA497FEBDBA9D3ED21BACB8B8D1C3ECD420E2E38
2E2C59948893004B0DE9C3F480706AFBEB68F79D8DE55382BE7A367B3E29F520
B3D6887225C2222A715F930C3ED49A3DF15768AA286D864698305C6F9442EA20> |-
/b <1C60D8A8C9B790A84E7F4A2C78ACD4DEB72F3F52D082BF36B9364555A7A4
2B04173F4D49E80AE1316979B63D118F55930B8278654AFAD5031677B24C6016
E026EA6D496399945BB425132D5273AF303E220577342A1BE8A6854239CB9784
C455929C33642FB632548E93E3D5467CCB97B12B0DEEC1A58EB0D8364E434DBA
820FF3FC4C4769B4EF665672228A4E7819AC0F95BC065E48BC8A193CF7179B57
D75D985F34E160FB00A201C47DD966EAC052FC49D21EE3150A19AFC800053E37
AED89FE6FACB562000209EC643461D8C1B909FC33F3E8974A07E1726AA183D7C
EDE5552A418D8C6E587E81227B05> |-
/f <1C60D8A8C9B83BB8630BB96576EB91047C881631F3A170B7752BBE1E61B1
442F2813FB690C76F622F88CC58A338762F4A6F237C83DCC606F63E3481D9A21
29A5658C6CDE9F31823429CC3E5748BBAE340CBEE95B0B1EDB222667F6BAB6C1
562BF52AAF64BC110242F8F16C712A0BFFF55C6FD5F44BB0017FCBAAB4EF2C4D
C93AB68101E7686DE70B2C5CE86078E6460B4B51E6FA59D5C3C82092CB090F08
F5B34ADA0315B318EABB0079430AD5560D6D1F051039950921314C1891A346A7
CE68353953A2849B5B87C37C1F126E35444D19AF33EB657CFB110B3D76C5FA22
F7F306F0B90028C8D108BCA08D0F9544746EA02A8D83089B0373> |-
/i <1C60D8A8C9B854D0F409CB6CAA9D7B27CF04620905608196D31FB9E6C145
2952E18FF7826C07DCDB422109C43295E82554D6B602F849C6BF15530BBCF65D
AA56362CE8809CA8AFE734B98790FC8336596C75DF73D3C6CE2D88AF7D72BC08
08C15304C9C518671E679CB5788CDD30DCEDFE9CFCC36317A61BDA056C38024F
152A8102047E245290FAD9288A2AA7FEF8B4F2FA92669DCD3102EE8211F4F5EB
54A058BA87D881A45B5661F88632690B4560820D86AE4060316A> |-
/s <1C60D8A8C9B731076153B7C8E64B0F4BC759CF09374395E3030E46ABBDA8
1B526E3680B817AEBB78C3E0CA8722542BE090C16F98A802796713A600F4890A
BE57A4697FFA7F0D7E3AE9CCCFCD942110B9F64B3D0203F81BC35DF0DEE26294
46001C92840D0FC44D128F763905617FB6E67AF99056D11D14CFBD26BF9A3057
5F870EBCE81B69C0CD16198F2B77895DB6FC1B87BB7CB2074FBDF915F0CD7047
1476B6C2F0C97107F5CB5750147131E7FC4157FC70108CBFE9DE54B59571695B
C2810158991F1BE2E2E3B5EA3EE6C5815773F9962882C621743F93A4C161A51F
3C6944F60AAC54E76494AA3C9E1CA8A0FEBC2A48A6982D387DB16CBD32A2833A
F96F43DADC034FF3762CAC82ABC5BC531B869C403BC5E9CE828721D121F92400
D806F9DF6C2DB18AA28B30CC48BB7246C808FA02B85A9E5A870F0C91C64FE3E8
9E60B655964D220CCF6147C29E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NDGFMI+Euclid /Encoding get
dup 38 /ampersand put
dup 73 /I put
dup 75 /K put
dup 83 /S put
dup 98 /b put
dup 102 /f put
dup 105 /i put
dup 115 /s put
pop
%ADOEndSubsetFont
/NDGFMI+Euclid*1 
[32{/.notdef}rp /space 5{/.notdef}rp /ampersand /.notdef /parenleft /parenright 3{/.notdef}rp 
/hyphen /period /.notdef /zero /one /two /.notdef /four 
/five /six /.notdef /eight /nine 3{/.notdef}rp /equal 5{/.notdef}rp 
/C 3{/.notdef}rp /G /.notdef /I /.notdef /K 7{/.notdef}rp 
/S 2{/.notdef}rp /V /W 9{/.notdef}rp /a /b /.notdef 
/d /e /f /g /.notdef /i 2{/.notdef}rp /l 
/.notdef /n /o /p /.notdef /r /s /t 
/u /v 137{/.notdef}rp]
NDGFMI+Euclid nf
NDGFMI+Euclid*1 [13.2252 0 0 -13.2252 0 0 ]msf
140.069 42.7139 mo
(= 1.20 GeV \(K2K best fit & SK I-IV default\))
[10.2891 4.40381 6.61279 3.67676 6.61279 6.61279 4.40381 10.3818 5.87158 9.91895 4.40381 5.14453 
10.2891 6.61279 10.2891 4.40381 7.33984 5.87158 5.21045 5.14453 4.40381 4.0332 3.67676 5.14453 
4.4043 10.2891 4.4043 7.33984 10.2891 4.4043 4.77441 4.4043 4.77441 9.91895 4.4043 7.33984 
5.87207 4.0332 6.6123 7.33984 3.67676 5.14453 0 ]xsh
67.203 43.803 mo
64.701 43.803 li
64.701 36.603 li
110.304 36.603 li
110.304 38.934 li
67.203 38.934 li
67.203 43.803 li
.550588 .25098 1 rgb
f
110.304 43.803 mo
67.203 43.803 li
67.203 38.934 li
110.304 38.934 li
110.304 43.803 li
.364137 .176686 1 rgb
f
0 0 0 rgb
NDGFMJ+Euclid-Italic*1 [8.959 0 0 -8.959 0 0 ]msf
130.938 64.0278 mo
(A)sh
NDGFMJ+Euclid-Italic*1 [13.2252 0 0 -13.2252 0 0 ]msf
119.412 60.1821 mo
(M  )
[11.8496 4.40381 0 ]xsh
%ADOBeginSubsetFont: Euclid AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
NDGFMI+Euclid dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7A73DB6F69CBFF99412D27D61142A94F56062854C4E4B
D6CFE1C9F093D20383958F1E3C32B3B55950FE1DC448E9D2A6F6F44B68DC87D8
E780960609504F5EC7C3A4C92BE934CDD0A0BD47A445359B46244F60A4A12FE8
A16777566C277CE4CB817010B1E503E3ED7674DAA3600D83DF941E99455C27E0
E100D56D20BAD069C5F9C0ECE26E4ABBE62F8E99521A1770A46C4CF22D0DCA33
9A5600C0DFBFA55A9DCC5A4E77CEC0FC7F51BEF0648545B16D519441953860A7
AD97690CBADC939CD44F6C0166A334CBDC10A80101820615836569EB5FD7448E
DB43D05503618256A09CC67B17C0D06F5A0B0E12C16A0676D1789E76D5FDB65B
E5FF4E3D00445029E518C96157D44D037970283C9116099F7C5FA9A757655D07
0E2A1A38A223177F168547D87630C367D6575A640EF17C28C6C01C5D8FE4CA16
56F2673F0303484C99F732B6416FED6C010118A1CDC120C554C40B56DD49415E
51FC9224EC0FB6C6444EEC97E7EB2A079EB9E694D3B710BC8EDEF2056E6BC90B
BF8BC32843A07ABC4DFA7E165135742187F0A3F448A80373A8D7DFC7F9488454
8FDF325F68BB12D0FAA562445C82DCC1B287E66706AF384579565E05E7D7298E
9C49312C653B> |-
/B <1C60D8A8C9B639EE88DDD010DC4FC67CE81B7EC330F1DA34AD1625AF9109
0973F8726591248244AF9EDB3D825BF08E3D9C5376B21D78108AB98A5A4617D9
78060FF75330F51BD524709F13ADFAAD667D79BDF0A363035DAD918050C9A8E2
1CFD9156FA8D4A7CE0B347987C7A9500F454C24E67D0FE30AE0CDFEC21B9339F
D40AF25D45DB0A0F0C1CB3D8ECB3033EB97992C669F641EB2C574C8385DE9B98
8B3DFF7CBDDEF996A1571F486523736AD9858193AF29277ECB30065089CFB6BA
70F8DB7F66E7AC93A047AEB449672936825A04C23ECE159CE296EDA21732C58A
ADB8AF2240106C125B1DB1A1018B667864BFEA339AF509DDCFF2CE55D47DEED2
00415F06858292B906FEE655C80BB5F9F4F3D5CDEF66E4FB9693846983A37120
06AF2CE66E595D3AF480C4E8F0AA374E82ACD76B808C58CBE18BEEFEE1BA34E6
254CE576DCBA66DC3AD754297386ED2C43C26B7532E1C3EE63B4DD5CCF8C7A7D
61C3B7023ED50B832F65F85B770E7AC2CEA81E2463A5> |-
/E <1C60D8A8C9B65DE77B50C53FDA689ABE673A5D349F7E6283518B69F7BF38
66CC69EB0D8F4BA32123AACEFD6A4F1D2FF0275B2FD2C778900A204D2FF910E0
946C8C0460F2959F221DEA1469F53C8480451CAB3C4422A338FF437EB6AF6DC5
63FE49F8AC6EE06682D119FD5F26C8DDD1A8730D028FDBCA564544BEFD8F6104
4CC1DF2E4BF1BB455E84AFDBD4C6449D8A5DC4CEE8B56D28715F4B05BCCAB594
6885259034FBA4C3093BFE0DDAAE731C732865AC55ACD93741927208AD5D2780
8E187CDDC552BA6E87BB6EB2CAC91526D861582C8E52F99BA9425A9918DA46C8
451EA83DF92CD5C51F88835CB6AB3DF8EDEE6A094ED550BE03BBDB146D3850C4
8B5BC8EBF77D16B5837C1B57761DF4BAB7FF1095A157BA4DCC71F016C47A0ADA
8F792608683E23FA455D35155BA66AE7E0C38782D207F1D249CAB8B667101FA0
AD07B3E7F02D8083A14FB678E64FFFC7ADFF> |-
/M <1C60D8A8C9B5BA43D8345AB05FC465ECF5A2C16BF2EA6824A9E4A821CB11
FBDBC5E269DE2A35C3AF1437274CBF003A6BB4ED9CEA26CBD0B305B0E50DF644
866F9B0F6E7C9AF4051517518137C82B7DA7DCE4A4BE3D1E52F0DAC1DA9F910C
4B1B0536A7B14895D1D2DA6727B5783A514749AA6EAA365B34D5A3946056EF77
013429EEFE7E8ADAC32BE67EC642E7FC6C61FAF296718E9AD86128659D0FA8BA
D3058308849821C399099883FA3E22F9CAA6907D8B25621DABDB2664E8C9F921
4CE919924C926921B128F186CBEFA340D19CA48EDEFDFD1C71E427F9E75079CF
1F131977A22E9DCC41726F822C2A8EC0ED15EFC27A097EC266027727356FEFC6
ED77341F2AFBF464EBB704C42A0EB792E5D623B9063120D466CADD0F05AF4F> |-
/N <1C60D8A8C9B6E3FA5133D9B079A4A9E92518C516C794D3ED3D811A0DD901
1073A9801590AD61F4073F5B084DCA1EE496200D8F84BDB5E820731D66D0C49A
A124D85DBD74E6DA6C5EB24164E86860C1FA193AA1F4E7E081D2A8EBC660AE7B
4298DC914F4F6B209F97AD2B0BE78A9EF4693CB8CBD6C74408F9ED02AA7613C3
60DE6A31D91749E47450D004B5974FC3C1D340B3F79F4F8969CA5B98229FDFF3
A1F40D6DF4192E153AE8057E4C159355E97649B7E389085E3FD8F58E9D443D94
71121F3CE272D946C6599695CD91C1CF1D00521B13> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NDGFMI+Euclid /Encoding get
dup 51 /three put
dup 66 /B put
dup 69 /E put
dup 77 /M put
dup 78 /N put
pop
%ADOEndSubsetFont
/NDGFMI+Euclid*1 
[32{/.notdef}rp /space 5{/.notdef}rp /ampersand /.notdef /parenleft /parenright 3{/.notdef}rp 
/hyphen /period /.notdef /zero /one /two /three /four 
/five /six /.notdef /eight /nine 3{/.notdef}rp /equal 4{/.notdef}rp 
/B /C /.notdef /E /.notdef /G /.notdef /I 
/.notdef /K /.notdef /M /N 4{/.notdef}rp /S 2{/.notdef}rp 
/V /W 9{/.notdef}rp /a /b /.notdef /d /e 
/f /g /.notdef /i 2{/.notdef}rp /l /.notdef /n 
/o /p /.notdef /r /s /t /u /v 
137{/.notdef}rp]
NDGFMI+Euclid nf
NDGFMI+Euclid*1 [13.2252 0 0 -13.2252 0 0 ]msf
140.069 60.1821 mo
(= 1.35 GeV \(MiniBooNE 2010 best fit\))
[10.2891 4.40381 6.61279 3.67676 6.61279 6.61279 4.40381 10.3818 5.87158 9.91895 4.40381 5.14453 
12.1143 3.67676 7.33984 3.67676 9.36328 6.61279 6.61279 9.91846 8.99316 4.4043 6.6123 6.6123 
6.6123 6.6123 4.4043 7.33984 5.87207 5.21094 5.14453 4.4043 4.0332 3.67676 5.14453 0 
]xsh
67.095 24.606 mo
64.602 24.606 li
64.602 17.406 li
110.196 17.406 li
110.196 19.737 li
67.095 19.737 li
67.095 24.606 li
.25098 1 1 rgb
f
110.196 24.606 mo
67.095 24.606 li
67.095 19.737 li
110.196 19.737 li
110.196 24.606 li
.0995002 .963245 .886059 rgb
f
0 0 0 rgb
NDGFMJ+Euclid-Italic*1 [0 -7 -7 0 0 0 ]msf
13.1592 50.522 mo
(A)sh
NDGFMJ+Euclid-Italic*1 [0 -10.4759 -10.4759 0 0 0 ]msf
9.71777 59.46 mo
(M)sh
%ADOBeginSubsetFont: Euclid AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
NDGFMI+Euclid dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/slash <1C60D8A8C9B7A73DA0062D3AF8BE4AF5CB4EDBB03A57AA83E5ED9518
2737862A3D028808329E98AC8EF196F7B5C7C9B08089F8E9444A647ECBE4EBCD
39> |-
/R <1C60D8A8C9B615D1A19BFB44DC9A0D6E54BE58B1A8C066DD545E2666E892
F89691E569D0A3A5EC597FE51198A7FFCFEDDB6742EC0EA8D71751C8FBB60264
54CC5F826CE180F8BEAC1590C58B45C394E3A2A5049CAE016B4B683E856FD230
D2F756C88CCAF6B1299D78CF2CA110BA1DA89C9C119795E5FF8E8D9EA5D72A83
F2FAEF056132C050DAD7CB305668AF81FCD1FACBBF88B5F92CDA743E76DD29A4
074AF7EA37FD6E7C6D1711EE5CCB0C483D4192A9F4DFBF645BE1430851C1D19B
4F891F376E965F2A8438B17D8A3D4DCB7C81F34C6E7A10C93EDD216E34B5896B
D3D0D52D3EB7F2E8FA03F22E28C70872DE004710D9B17FBF3F9BC7736BE99744
88CFB65312D9FE120AAEB0B94AA524B814F599ED75F6AFD0E66101AF2AAA4C77
049DE7C9DEECAE3EAF73EC07CDAE4080BBEB0BBBAB447B93334434FAA53F9670
9A60E74838BD8144CC6615F9DC7A0F725CC4DB6F110149A52BCED7C8C5695820
94CD670D555F9C204BCD00A85911B3F69F20572EACB2E814BA0EF19EC460EDD2
BC9F4E318DAD023EF8E40ED447247D5AE38D8B8776B94670B3B60F3850B311F5
B6B996FB3B81> |-
/c <1C60D8A8C9B77FE2CEE2B2B04D872A003ACEDA9B2F75EE4F2E81A541935B
0E611526D9DE038A59C0C4332858E3940FBAA9EF1D28063EF653515B59EE7882
CE694C09DFDDE0B689C3AEFA79A50A28C70D9C3AB944467AC82D205B02EB3D05
F39B9D23186668837BCD8679F6CBCD93AD6ADCE309C61EDFEE3303F7829F1DFE
DC37A1C819B3EE2C752D68EE13DCB456100C3117B0A729EC9759F76BD463C1A5
11625288F829863A6093BC23C4B4410C85A81CBC2ED492F60D1E748CABFC7BB4
5C81DC36331FA291C483C61C7348B6958F5638F9A6906B87FF441A2675A9238A
FD899B31CA9E62B18B3675F213C56E25F523A053C303A7C66D5932AB706CC752
C6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NDGFMI+Euclid /Encoding get
dup 47 /slash put
dup 82 /R put
dup 99 /c put
pop
%ADOEndSubsetFont
/NDGFMI+Euclid*1 
[32{/.notdef}rp /space 5{/.notdef}rp /ampersand /.notdef /parenleft /parenright 3{/.notdef}rp 
/hyphen /period /slash /zero /one /two /three /four 
/five /six /.notdef /eight /nine 3{/.notdef}rp /equal 4{/.notdef}rp 
/B /C /.notdef /E /.notdef /G /.notdef /I 
/.notdef /K /.notdef /M /N 3{/.notdef}rp /R /S 
2{/.notdef}rp /V /W 9{/.notdef}rp /a /b /c /d 
/e /f /g /.notdef /i 2{/.notdef}rp /l /.notdef 
/n /o /p /.notdef /r /s /t /u 
/v 137{/.notdef}rp]
NDGFMI+Euclid nf
NDGFMI+Euclid*1 [0 -10.4759 -10.4759 0 0 0 ]msf
9.71777 50.0737 mo
(  effective)
[-3.48828 -3.48828 -4.65088 -3.19482 -3.19482 -4.65088 -4.65088 -4.0752 -2.91211 -5.53125 0 ]ysh
19.5791 59.46 mo
(lep)
[-2.91211 -4.65088 0 ]ysh
NDGFMI+Euclid*1 [0 -15.4057 -15.4057 0 0 0 ]msf
16.502 71.1836 mo
(R)sh
NDGFMJ+Euclid-Italic*1 [0 -7 -7 0 0 0 ]msf
13.3892 119.854 mo
(A)sh
NDGFMJ+Euclid-Italic*1 [0 -10.4759 -10.4759 0 0 0 ]msf
9.71924 128.851 mo
(M)sh
NDGFMI+Euclid*1 [0 -10.4759 -10.4759 0 0 0 ]msf
9.71924 119.464 mo
(  current)
[-3.48828 -3.48877 -4.65088 -5.81396 -4.10645 -4.10645 -4.65137 -5.81396 0 ]ysh
19.5786 128.851 mo
(lep)
[-2.91211 -4.65088 0 ]ysh
NDGFMI+Euclid*1 [0 -15.4057 -15.4057 0 0 0 ]msf
16.4829 140.561 mo
(R)sh
NDGFMI+Euclid*1 [0 -18 -18 0 0 0 ]msf
14.9414 81.8545 mo
(/)sh
2 lw
80.5 117.847 mo
140 117.847 li
1 1 .6 rgb
@
[4 4 ] 0 dsh
80.5 97.3477 mo
140 97.3477 li
1 .8 .2 rgb
@
0 0 0 rgb
%ADOBeginSubsetFont: EuclidSymbol Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /EuclidSymbol def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 127 /mu put
dup 129 /space put
dup 141 /plus put
dup 143 /minus put
def
/FontBBox {-166 -252 1083 950} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/.notdef <1C60D8A8C9B5EE31F4> |-
/mu <1C60D8A8C9B7B5777CCCB8F0C773EDA9446A2A54B5A44F414E5A690DA23
DB24E1B4B687501204D3F9973AEC986E8869D92E1F7BC74A3CA605496FDF0DD2
D0E01B69C17DE651F202EB87508550BB18B6FE5288E1A76828EDF0CBEDB2BDCD
C8BB7CDB2D254EF21A9EFE94678C526D13C91053DED64499C4CB28B0F35E7F19
2FA9D45A913908020E42C22BCF9C1DE965D187C9C34A71B40BEC80DE0DAD9415
63976DF9EE5E0B898529F78642D9C61037507C7C787F81A6B0CF0FF5C59219F8
BA370B67F87B06B06EAE3CBB7879A9533499D3E96D19FA3B005D5F7EB2BC09BC
485F629701397C15FD7FF261A5C02CE4F2800CB953E7836DEADC24DD16958D6E
556E2C90A2227EB804C3E6A5893A9E0DCB3E9CFFA3C7C7899ED6D38> |-
/space <1C60D8A8C9B8707C25> |-
/plus <1C60D8A8C9B6FF86FB9B1DF4DFDF116FBD1855F7E77E2F866FE8C4636
31A4F82DFE7ECB4106C9F549AA96C17F23C215DFA1BED387A6DC4A6548DCBF7A
B9BDEBD60EE0D2A845E9905FF6FCB068C321A789F1AC4ADA72ACF10F449677E1
19A6A468DD3AFB215F6CA603002E4593C870089610F553B273585C7471ADB11C
A9732AB09FB488FC7774F59F6548617E1866D32B826951E39389C> |-
/minus <1C60D8A8C9B6FF86FB873E807F595BDCE42CCF6741EC35E34ABE069C
0B0921ED919DE3D3F8C4A28202BA85D72F0277ED0C73DFFAC3492B98C8ADF476
DE642E36E0A1C13B64D68D69C1F163187C> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/NDGFMK+EuclidSymbol /EuclidSymbol findfont ct_VMDictPut
/NDGFMK+EuclidSymbol*1 
[127{/.notdef}rp /mu /.notdef /space 11{/.notdef}rp /plus /.notdef /minus 
112{/.notdef}rp]
NDGFMK+EuclidSymbol nf
NDGFMK+EuclidSymbol*1 [18 0 0 -18 0 0 ]msf
154.777 123.622 mo
(\177\201\201\215\201\177)
[9.32373 4.5 4.5 14.0039 4.5 0 ]xsh
NDGFMK+EuclidSymbol*1 [12 0 0 -12 0 0 ]msf
162.777 117.622 mo
(\215)sh
201.111 117.622 mo
(\217)sh
%ADOBeginSubsetFont: Euclid-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
NDGFMJ+Euclid-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/e <1C60D8A8C9B74F366DADD4398247827B35FC1F5FE4120E784C2D3153FF9C
1B7BC645A009B14198EE3CAD6774A5B40ED550F2267E8ECDAD998745E121F248
CB7DC30B62097354167DC02AD84DACA04253F61DCCFE6F8C356D335855ED06FD
82EB77D64AFAC3D3635FA1DC94C80C5D9FE47A234226154A779299D4F1FC1BC6
56B60FFC01E2DECFB89438B2467EAE14186C6FF20383BE403D0DC550956B6F6B
1F2B91851EE82989925C65F38951D79C4D2264478B1ACEFC44D388A79D910A45
587A6676ECA4D6DF04AB305B22E174B0E4BF22A1B3D058FFEF40FCDAC38FA4B6
9273AFDB2BA4B61305888A8BBF9475E7B1E733526D61BE149CE762D35DAE547E
9792AD679189BD54086037BE86F957A4214189307268AF03BB4FC3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
NDGFMJ+Euclid-Italic /Encoding get
dup 101 /e put
pop
%ADOEndSubsetFont
/NDGFMJ+Euclid-Italic*1 
[32{/.notdef}rp /space 32{/.notdef}rp /A 11{/.notdef}rp /M 2{/.notdef}rp /P 
20{/.notdef}rp /e 154{/.notdef}rp]
NDGFMJ+Euclid-Italic nf
NDGFMJ+Euclid-Italic*1 [18 0 0 -18 0 0 ]msf
150.777 103.122 mo
(e)sh
NDGFMK+EuclidSymbol*1 [18 0 0 -18 0 0 ]msf
159.057 103.122 mo
(\201\201\201\215\201)
[4.5 4.5 4.5 14.0039 0 ]xsh
NDGFMJ+Euclid-Italic*1 [18 0 0 -18 0 0 ]msf
191.061 103.122 mo
(e)sh
NDGFMK+EuclidSymbol*1 [12 0 0 -12 0 0 ]msf
158.778 97.1221 mo
(\215)sh
201.111 97.1221 mo
(\217)sh
.866667 .866667 .866667 rgb
%ADOBeginSubsetFont: Euclid-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /Euclid-Bold def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 69 /E put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 80 /P put
dup 82 /R put
dup 89 /Y put
def
/FontBBox {-63 -308 1026 909} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
10 dict dup begin
/.notdef <1C60D8A8C9B5EE31F4> |-
/A <1C60D8A8C9B6E66E6CDE186071BB077B78B5D473635225B56D2D319C5B2C
A3B403E86BFC57FC1EBC6388D3A7E6D78647F1B4ADF8A499342EDC09DCA504C7
3BB6231D4C04EBA9F5E24B382FDD188526A0779A14E3E98B6D06D102362F5B64
B010D644D4BA2DE70DFEB972A112CE2CA506FF59AA10F2798094EA660E942514
4EBA440354A4FA54D6683149B28B31482A134AFD9D38015FDAFFB8DBCB7ED4BB
6765381C022F806BBB31C4F8AC1256DBB0CC109528CA> |-
/E <1C60D8A8C9B64228CF1E6C2A2D2182FCFE800EAB9F2732857D4E75D3CF87
400456312DAC90E1857EA26D49BC5F6EDB36A5FDDB93A22DB941D4B2DE9173A6
E76FF6DB78297A039A0582DD23DB1CDCC6411AC6BC25D3148F6378600FCC87D3
B9FAE607410552273066FD31F293D4166FF2B99C3306A948C1805B40B20AD33C
ACD27481411AFB37B69D4455A1656C95D9EDBFCE13D3C14735AA94AD2136DF84
A9FCFA4A93B87F65A27A13DC92761145807A8EAB6399CDA97D59D3787D95198F
3EF3E1AAE41A4E84F6> |-
/I <1C60D8A8C9B70EDCCC4CE56148AFF823711DE6433113183EA440AE268A0E
2949355CDC88D3F2137A75B922A52AC18D26C86DD9F8AF7E73D778F2E38C734A
A555> |-
/L <1C60D8A8C9B7C3C9ED8B636513B8ADC05BA494A7228555713A5460DEA4D9
C9733BC8526F03A83641F39FE9618E2863CC0FB666EE5510EA3ADBAAC1297D01
348C94415769D91A98995B621031E7AAB3EFE2> |-
/M <1C60D8A8C9B5D87314C7E4732BBA6685A8F32B7887531E303E0C2EC74F1D
FB3E16FD576F3CD043FD1BE53D5EBDDA28F5D1524D1FD914CCFD67A8B4F9D5C5
AEE10F238385F1AC27F7B6E1539CAAACD701E32EB7615AC128999C73F053B306
87980D095451E78AD4A3AAB08291AB8242517CE93896EFB4949A44AE99BC8A43
CE2CD4D7BFF71839C59370F4F8B07800FF8E4689E97485456512A45C22AFDF4B
64B9142EC027AA62F7E5817853C924B99EDAA841D885EC9444FCD481> |-
/N <1C60D8A8C9B6C2567A0941589B4F999B826DA1EF85D4661ED404B3AD8CDE
15504A4533E6FC3A41F1AA42D0761380883041ADE96BDF201EA964BEC4149B7E
9E1DBB6E22BDCA52119A7FEAD7F49C9264C72E641B8B4D57296A841BE00E8712
76013E1A8B8F420B866A35F5DD2CF9347948C0BB480CDFFA18A1D7C35348CD3A
98414A550FFAE0278E50FBCC81613F7D9C864D6ECE11382AE7B233395CFFB47A
87C45E3FA13EBFD7F94EAD272B944BA2AD745F8D0BC7F26D465ADBFCF357F074
CDC6F9491821812F1EAF45845ED88BF69CE8CDAD56A26B279F563214434F2C67> |-
/P <1C60D8A8C9B65EB406315173198F2908D982BDD7F1AB6806C4FADADEBF13
466B0E695E665C9681B2FF980148E13559FC249CF46FF05A97B9BFDA23CB6F2F
3C83738D8DAF6B58213080127337F05D00EA8F95B97DDDA332B3D359D9FC0B1F
9B94B251C77BB93FD98D49EFDBDD8643E96F6884383EFB7DAF12512C42E37114
CC7EA65D97F67B1D5D6EA974200D6FD95366605CD71146DDEAFF88F865A84AB8
9C5B68061493AC4D9486374981677807AD6C6DA5BC263980E1C4EA9CC16ED447
6B18D5A6B4381A9F983BC023C8B7DD7C> |-
/R <1C60D8A8C9B6ED05DB632B50386977AEE557822BAFFC7ABAB83B3C9B60B4
5D8010E209D88D5DE0FE8080FDDB42B8FEF1CB0E85444F89814D5FED61BBFC45
0B6F38DC70799E98DBD66D6FB7940B923812D9BF01EE4998FEC9C268EBC010AB
1933CDC85FB65F28459F9CE15609898E442855DA55268883674EEC5E1D07CA91
9ABFB98676E4C1D17E4C19E0E8084C5153FEF06F00CDD7A47629E938D4B1D888
EE3126BCCB62B96EC99D8F341B9BABBE4276F62BD30351D32BE5F00CC23B9E15
85F2F7CBB522BC80BBD16C1DF739EC3D8FA0FC9715D4934C0004AE487C8FD762
36039B5355EA3F28DEAABFA19A48EC0EFDD16DACE8D5DED93B01A2141F344D8D
78555FFFFDA681247A9E537456F2038BDCE602D323A90C5DE4D72AA2869870BD
3CABD5AA32BA35939E9C42D67ADB635AA41750F48A131D9E22274CD7E952> |-
/Y <1C60D8A8C9B6E66E6D882107AAC0A650D3656C548C62621DE04959A26420
00558597D41CFCBE4D00488B4AC4FD39E4CA1C987D558C1E31CA5D38AB47908F
B9844D85F1B6CA3C3D030F8C9364785D500092EF2C5FAA53BFB73F563EC23FCC
B9AEF61421AD9DBDCFD0DA2C70FC25E774F4F18D19C0BFD9CA3EC0CD4F9FD408
0DE150D1B6993E3259E032B9A1F0A29F06CF4510B69B6CAA36D027DE73FDD3DF
6803095E0A> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/NDGFML+Euclid-Bold /Euclid-Bold findfont ct_VMDictPut
/NDGFML+Euclid-Bold*1 
[65{/.notdef}rp /A 3{/.notdef}rp /E 3{/.notdef}rp /I 2{/.notdef}rp /L 
/M /N /.notdef /P /.notdef /R 6{/.notdef}rp /Y 
166{/.notdef}rp]
NDGFML+Euclid-Bold nf
NDGFML+Euclid-Bold*1 [42 0 0 -42 0 0 ]msf
234.333 323.667 mo
(PRELIMINARY)
[28.686 31.9199 27.5098 25.1997 16.6733 39.8999 16.6733 32.8857 31.7095 28.4341 0 ]xsh
41.31 347.751 mo
42.057 347.751 li
42.057 3.501 li
559.305 3.501 li
559.305 347.004 li
41.31 347.004 li
41.31 347.751 li
42.057 347.751 li
41.31 347.751 li
41.31 348.498 li
560.808 348.498 li
560.808 1.998 li
40.554 1.998 li
40.554 348.498 li
41.31 348.498 li
41.31 347.751 li
0 0 0 rgb
f
.75 lw
[] 0 dsh
58.3076 337.5 mo
58.3076 347.75 li
49.8076 342.5 mo
49.8076 347.75 li
@
244.308 337.5 mo
244.308 347.75 li
235.808 342.5 mo
235.808 347.75 li
226.308 342.5 mo
226.308 347.75 li
215.558 342.5 mo
215.558 347.75 li
203.058 342.5 mo
203.058 347.75 li
188.308 342.5 mo
188.308 347.75 li
170.308 342.5 mo
170.308 347.75 li
147.058 342.5 mo
147.058 347.75 li
114.308 342.5 mo
114.308 347.75 li
@
430.058 337.5 mo
430.058 347.75 li
421.558 342.5 mo
421.558 347.75 li
412.058 342.5 mo
412.058 347.75 li
401.308 342.5 mo
401.308 347.75 li
388.808 342.5 mo
388.808 347.75 li
374.308 342.5 mo
374.308 347.75 li
356.308 342.5 mo
356.308 347.75 li
333.058 342.5 mo
333.058 347.75 li
300.308 342.5 mo
300.308 347.75 li
@
1.5 lw
41.3076 347.75 mo
41.3076 2.75 li
542.058 342.5 mo
542.058 347.75 li
518.808 342.5 mo
518.808 347.75 li
486.058 342.5 mo
486.058 347.75 li
@
.75 lw
57.3076 19.25 mo
41.3076 19.25 li
57.3076 19.25 mo
41.3076 19.25 li
49.3076 35.5 mo
41.3076 35.5 li
49.3076 52 mo
41.3076 52 li
49.3076 68.5 mo
41.3076 68.5 li
57.3076 85 mo
41.3076 85 li
49.3076 101.25 mo
41.3076 101.25 li
49.3076 117.75 mo
41.3076 117.75 li
49.3076 134.25 mo
41.3076 134.25 li
57.3076 150.5 mo
41.3076 150.5 li
49.3076 167 mo
41.3076 167 li
49.3076 183.5 mo
41.3076 183.5 li
49.3076 199.75 mo
41.3076 199.75 li
57.3076 216.25 mo
41.3076 216.25 li
49.3076 232.75 mo
41.3076 232.75 li
49.3076 249 mo
41.3076 249 li
49.3076 265.5 mo
41.3076 265.5 li
57.3076 282 mo
41.3076 282 li
49.3076 298.5 mo
41.3076 298.5 li
49.3076 314.75 mo
41.3076 314.75 li
49.3076 331.25 mo
41.3076 331.25 li
57.3076 347.75 mo
41.3076 347.75 li
@
131.47 290.417 mo
127.305 289.998 li
122.058 287.253 li
116.811 284.247 li
106.56 276.498 li
101.556 272.25 li
96.309 268.002 li
92.8005 265.324 li
91.062 263.502 li
86.058 258.003 li
80.811 253.998 li
75.555 250.002 li
70.56 246.249 li
65.304 242.748 li
60.309 239.751 li
55.062 241.002 li
53.1523 242.274 li
49.806 241.002 li
49.806 239.499 li
54.2342 236.974 li
55.062 237.249 li
60.309 239.004 li
65.304 241.002 li
70.56 243 li
75.555 245.502 li
80.811 248.247 li
86.058 251.253 li
91.062 255.996 li
96.309 260.748 li
101.556 265.248 li
106.56 270.747 li
116.811 280.998 li
122.058 285.246 li
127.305 288.747 li
131.47 290.417 li
.555294 .258824 1 rgb
f
92.8005 265.324 mo
91.062 263.997 li
86.058 260.253 li
80.811 256.5 li
75.555 253.251 li
70.56 250.254 li
65.304 247.5 li
60.309 245.25 li
55.062 243 li
53.1523 242.274 li
55.062 241.002 li
60.309 239.751 li
65.304 242.748 li
70.56 246.249 li
75.555 250.002 li
80.811 253.998 li
86.058 258.003 li
91.062 263.502 li
92.8005 265.324 li
.34902 .207843 .843137 rgb
f
132.309 290.502 mo
131.47 290.417 li
127.305 288.747 li
122.058 285.246 li
116.811 280.998 li
106.56 270.747 li
101.556 265.248 li
96.309 260.748 li
91.062 255.996 li
86.058 251.253 li
91.062 254.25 li
96.309 257.499 li
101.556 261 li
106.56 264.501 li
116.811 270.747 li
122.058 272.754 li
127.305 274.5 li
128.144 274.415 li
132.309 275.247 li
137.556 275.004 li
142.56 272.754 li
147.807 269.253 li
153.054 264.996 li
158.058 260.496 li
163.305 256.248 li
173.556 247.5 li
178.812 243 li
183.807 238.248 li
189.054 233.496 li
194.31 228.501 li
199.305 223.497 li
204.561 218.502 li
205.81 217.251 li
236.354 217.251 li
235.305 217.998 li
230.31 221.751 li
220.059 230.004 li
214.812 234.252 li
209.556 238.248 li
204.561 242.748 li
199.305 246.996 li
194.31 251.253 li
189.054 255.753 li
183.807 259.497 li
178.812 263.502 li
173.556 267.498 li
163.305 275.004 li
158.058 279.252 li
153.054 281.997 li
147.807 285.246 li
142.56 288 li
137.556 289.746 li
132.309 290.502 li
49.806 239.499 mo
49.806 235.503 li
54.2342 236.974 li
49.806 239.499 li
.363137 .180131 1 rgb
f
132.309 275.247 mo
128.144 274.415 li
132.309 273.996 li
137.556 272.502 li
142.56 269.748 li
147.807 266.004 li
153.054 261.999 li
158.058 258.246 li
163.305 253.503 li
173.556 245.25 li
178.812 240.75 li
183.807 236.25 li
189.054 231.75 li
194.31 226.998 li
199.305 222.003 li
204.561 217.251 li
205.81 217.251 li
204.561 218.502 li
199.305 223.497 li
194.31 228.501 li
189.054 233.496 li
183.807 238.248 li
178.812 243 li
173.556 247.5 li
163.305 256.248 li
158.058 260.496 li
153.054 264.996 li
147.807 269.253 li
142.56 272.754 li
137.556 275.004 li
132.309 275.247 li
.332211 .131488 .949819 rgb
f
86.058 251.253 mo
86.058 251.253 li
80.811 248.247 li
75.555 245.502 li
70.56 243 li
65.304 241.002 li
60.309 239.004 li
55.062 237.249 li
54.2342 236.974 li
55.062 236.502 li
55.5905 236.401 li
60.309 237.753 li
65.304 239.751 li
70.56 242.001 li
75.555 244.251 li
80.811 247.752 li
86.058 251.253 li
.553464 .180131 1 rgb
f
132.309 272.502 mo
127.305 271.746 li
126.278 271.258 li
127.305 271.503 li
132.309 270.999 li
137.556 269.253 li
142.56 266.247 li
147.807 262.251 li
153.054 258.003 li
158.058 254.25 li
163.305 249.498 li
173.556 240.75 li
178.812 236.502 li
183.807 231.75 li
189.054 226.998 li
194.31 222.246 li
199.305 217.251 li
200.808 217.251 li
199.305 218.754 li
194.31 223.749 li
189.054 228.753 li
183.807 233.748 li
178.812 238.5 li
173.556 243.252 li
163.305 252 li
158.058 256.752 li
153.054 261.252 li
147.807 265.752 li
142.56 269.496 li
137.556 271.998 li
132.309 272.502 li
.525213 .131488 .949819 rgb
f
127.305 274.5 mo
122.058 272.754 li
116.811 270.747 li
106.56 264.501 li
101.556 261 li
96.309 257.499 li
91.062 254.25 li
86.058 251.253 li
80.811 247.752 li
75.555 244.251 li
80.811 246.753 li
86.058 249.75 li
91.062 252.504 li
96.309 255.753 li
101.556 259.002 li
106.56 262.503 li
116.811 268.254 li
122.058 271.746 li
127.305 274.248 li
128.144 274.415 li
127.305 274.5 li
54.2342 236.974 mo
49.806 235.503 li
49.806 234.747 li
55.062 236.25 li
55.5905 236.401 li
55.062 236.502 li
54.2342 236.974 li
.505913 .162368 1 rgb
f
128.144 274.415 mo
127.305 274.248 li
122.058 271.746 li
116.811 268.254 li
122.058 270.252 li
126.278 271.258 li
127.305 271.746 li
132.309 272.502 li
137.556 271.998 li
142.56 269.496 li
147.807 265.752 li
153.054 261.252 li
158.058 256.752 li
163.305 252 li
173.556 243.252 li
178.812 238.5 li
183.807 233.748 li
189.054 228.753 li
194.31 223.749 li
199.305 218.754 li
200.808 217.251 li
204.561 217.251 li
199.305 222.003 li
194.31 226.998 li
189.054 231.75 li
183.807 236.25 li
178.812 240.75 li
173.556 245.25 li
163.305 253.503 li
158.058 258.246 li
153.054 261.999 li
147.807 266.004 li
142.56 269.748 li
137.556 272.502 li
132.309 273.996 li
128.144 274.415 li
.496101 .148451 .988281 rgb
f
266.31 198.504 mo
266.31 198.504 li
271.557 195.75 li
276.561 193.248 li
281.808 189.999 li
287.055 188.748 li
292.059 186.75 li
297.306 184.752 li
298.568 184.309 li
297.306 185.004 li
292.059 186.75 li
287.055 188.748 li
281.808 190.998 li
276.561 193.248 li
271.557 195.75 li
266.31 198.504 li
306.269 181.87 mo
307.557 181.503 li
312.804 180 li
317.808 178.749 li
323.055 177.498 li
328.311 176.247 li
333.306 175.248 li
338.562 174.249 li
343.557 173.25 li
348.804 172.503 li
354.06 171.504 li
359.055 170.748 li
364.311 170.001 li
369.306 169.254 li
374.562 168.498 li
379.809 168.003 li
384.804 167.751 li
390.06 167.247 li
395.055 167.004 li
400.311 166.5 li
395.055 167.247 li
390.06 167.751 li
384.804 168.246 li
379.809 168.246 li
374.562 169.002 li
369.306 169.497 li
364.311 170.253 li
359.055 171 li
354.06 171.747 li
348.804 172.503 li
343.557 173.25 li
338.562 174.249 li
333.306 175.248 li
328.311 176.499 li
323.055 177.75 li
317.808 178.749 li
312.804 180.252 li
307.557 181.746 li
306.269 181.87 li
419.349 165.079 mo
421.056 164.754 li
431.307 164.25 li
436.311 163.998 li
441.558 164.25 li
446.805 163.998 li
451.809 163.746 li
462.06 163.251 li
467.307 162.999 li
462.06 163.251 li
451.809 163.746 li
446.805 163.998 li
441.558 164.25 li
436.311 164.25 li
431.307 164.502 li
421.056 164.997 li
419.349 165.079 li
490.432 162.126 mo
493.056 161.748 li
495.684 161.874 li
493.056 162 li
490.432 162.126 li
.555294 .258824 1 rgb
f
239.159 215.253 mo
207.804 215.253 li
209.556 213.498 li
214.812 208.503 li
220.059 203.751 li
230.31 194.004 li
235.305 189.504 li
240.561 185.004 li
245.808 180.747 li
250.812 176.751 li
256.059 172.746 li
261.306 169.002 li
266.31 165.501 li
271.557 162.252 li
276.561 159.246 li
279.137 157.651 li
281.808 156.249 li
287.055 153.504 li
292.059 151.002 li
297.306 148.5 li
302.31 145.998 li
307.557 144 li
312.804 142.002 li
317.808 140.004 li
323.055 138.501 li
328.311 136.746 li
333.306 135 li
338.562 133.497 li
343.557 132.003 li
348.804 131.004 li
354.06 129.753 li
359.055 128.502 li
364.311 126.999 li
369.306 125.748 li
374.562 125.001 li
379.809 123.498 li
384.804 123.75 li
390.06 122.751 li
395.055 121.752 li
397.683 121.127 li
400.311 120.753 li
405.558 120.249 li
410.562 119.502 li
415.809 118.998 li
421.056 117.504 li
426.275 116.867 li
431.307 116.496 li
436.311 116.001 li
441.558 116.001 li
446.805 115.254 li
451.809 114.75 li
462.06 113.751 li
467.307 113.499 li
472.554 113.004 li
477.558 112.5 li
482.805 112.248 li
487.809 111.753 li
490.432 111.002 li
493.056 110.754 li
495.174 110.652 li
498.312 111.249 li
508.554 110.502 li
513.81 110.25 li
518.805 109.998 li
529.056 109.503 li
534.312 109.251 li
539.559 108.999 li
549.81 108.747 li
554.805 108.504 li
559.305 108.504 li
559.305 160.785 li
554.805 161.001 li
534.312 161.001 li
529.056 161.253 li
518.805 161.253 li
513.81 161.496 li
508.554 161.496 li
498.312 161.748 li
495.684 161.874 li
493.056 161.748 li
490.432 162.126 li
487.809 162.252 li
482.805 162.252 li
477.558 162.504 li
472.554 162.747 li
467.307 162.999 li
462.06 163.251 li
451.809 163.746 li
446.805 163.998 li
441.558 164.25 li
436.311 163.998 li
431.307 164.25 li
421.056 164.754 li
419.349 165.079 li
415.809 165.249 li
410.562 165.249 li
405.558 165.996 li
400.311 166.5 li
395.055 167.004 li
390.06 167.247 li
384.804 167.751 li
379.809 168.003 li
374.562 168.498 li
369.306 169.254 li
364.311 170.001 li
359.055 170.748 li
354.06 171.504 li
348.804 172.503 li
343.557 173.25 li
338.562 174.249 li
333.306 175.248 li
328.311 176.247 li
323.055 177.498 li
317.808 178.749 li
312.804 180 li
307.557 181.503 li
306.269 181.87 li
302.31 182.25 li
298.568 184.309 li
297.306 184.752 li
292.059 186.75 li
287.055 188.748 li
281.808 189.999 li
276.561 193.248 li
271.557 195.75 li
266.31 198.504 li
261.306 201.249 li
256.059 204.246 li
250.812 207.504 li
245.808 210.753 li
240.561 214.254 li
239.159 215.253 li
.363137 .180131 1 rgb
f
207.804 215.253 mo
206.555 215.253 li
209.556 212.247 li
214.812 207.504 li
220.059 202.752 li
230.31 193.248 li
235.305 188.496 li
240.561 184.5 li
245.808 180.252 li
250.812 176.247 li
256.059 172.503 li
261.306 168.75 li
266.31 165.249 li
271.557 162 li
276.561 159.003 li
279.137 157.651 li
276.561 159.246 li
271.557 162.252 li
266.31 165.501 li
261.306 169.002 li
256.059 172.746 li
250.812 176.751 li
245.808 180.747 li
240.561 185.004 li
235.305 189.504 li
230.31 194.004 li
220.059 203.751 li
214.812 208.503 li
209.556 213.498 li
207.804 215.253 li
333.306 135 mo
338.562 133.254 li
343.557 132.003 li
338.562 133.497 li
333.306 135 li
397.683 121.127 mo
400.311 120.501 li
405.558 119.25 li
410.562 118.746 li
415.809 117.747 li
421.056 117.252 li
426.275 116.867 li
421.056 117.504 li
415.809 118.998 li
410.562 119.502 li
405.558 120.249 li
400.311 120.753 li
397.683 121.127 li
446.805 115.254 mo
451.809 114.498 li
462.06 113.751 li
451.809 114.75 li
446.805 115.254 li
462.06 113.751 mo
467.307 113.004 li
472.554 112.5 li
477.558 111.996 li
482.805 111.501 li
487.809 111.249 li
490.432 111.002 li
487.809 111.753 li
482.805 112.248 li
477.558 112.5 li
472.554 113.004 li
467.307 113.499 li
462.06 113.751 li
498.312 111.249 mo
495.174 110.652 li
498.312 110.502 li
508.554 109.746 li
513.81 109.503 li
518.805 109.251 li
529.056 108.999 li
534.312 108.747 li
539.559 108.504 li
549.81 108.252 li
554.805 108.252 li
559.305 108.036 li
559.305 108.504 li
554.805 108.504 li
549.81 108.747 li
539.559 108.999 li
534.312 109.251 li
529.056 109.503 li
518.805 109.998 li
513.81 110.25 li
508.554 110.502 li
498.312 111.249 li
.332211 .131488 .949819 rgb
f
202.806 215.253 mo
201.404 215.253 li
204.561 212.247 li
209.556 207.252 li
214.812 202.248 li
220.059 197.253 li
230.31 187.497 li
235.305 182.754 li
240.561 178.497 li
245.808 174.249 li
250.812 170.001 li
256.059 166.248 li
261.306 162.252 li
266.31 158.751 li
271.557 155.25 li
276.561 152.001 li
279.185 150.503 li
276.561 152.253 li
271.557 155.502 li
266.31 159.003 li
261.306 162.504 li
256.059 166.5 li
250.812 170.496 li
245.808 174.753 li
240.561 179.253 li
235.305 183.753 li
230.31 188.496 li
220.059 198.252 li
214.812 203.247 li
209.556 208.503 li
204.561 213.498 li
202.806 215.253 li
328.311 128.502 mo
333.306 126.504 li
338.562 124.749 li
343.557 123.498 li
338.562 125.001 li
333.306 126.747 li
328.311 128.502 li
396.786 111.587 mo
400.311 110.754 li
405.558 109.503 li
410.562 108.747 li
415.809 107.748 li
421.056 107.253 li
431.307 106.254 li
421.056 107.496 li
415.809 108.999 li
410.562 109.746 li
405.558 110.502 li
400.311 111.249 li
396.786 111.587 li
441.558 105.498 mo
446.805 104.751 li
451.809 104.004 li
462.06 102.996 li
467.307 102.249 li
472.554 101.502 li
477.558 101.25 li
482.805 100.503 li
487.809 100.251 li
490.965 99.9479 li
487.809 100.998 li
482.805 101.502 li
477.558 101.754 li
472.554 102.249 li
467.307 102.753 li
462.06 103.248 li
451.809 104.499 li
446.805 105.003 li
441.558 105.498 li
498.312 100.251 mo
495.151 99.6502 li
498.312 99.504 li
508.554 98.748 li
513.81 98.253 li
518.805 98.001 li
529.056 97.749 li
534.312 97.497 li
539.559 97.254 li
549.81 97.002 li
554.805 96.75 li
559.305 96.5342 li
559.305 97.0382 li
554.805 97.254 li
549.81 97.497 li
539.559 97.749 li
534.312 98.001 li
529.056 98.253 li
518.805 98.748 li
513.81 99 li
508.554 99.504 li
498.312 100.251 li
.525213 .131488 .949819 rgb
f
279.137 157.651 mo
281.808 155.997 li
287.055 153.504 li
292.059 150.75 li
297.306 147.996 li
302.31 145.998 li
307.557 143.748 li
312.804 141.75 li
317.808 140.004 li
323.055 137.997 li
328.311 136.503 li
333.306 135 li
328.311 136.746 li
323.055 138.501 li
317.808 140.004 li
312.804 142.002 li
307.557 144 li
302.31 145.998 li
297.306 148.5 li
292.059 151.002 li
287.055 153.504 li
281.808 156.249 li
279.137 157.651 li
343.557 132.003 mo
343.557 132.003 li
348.804 130.752 li
354.06 129.249 li
359.055 127.746 li
364.311 126.504 li
369.306 125.253 li
374.562 124.254 li
379.809 123.498 li
384.804 122.751 li
390.06 122.004 li
395.055 121.5 li
397.683 121.127 li
395.055 121.752 li
390.06 122.751 li
384.804 123.75 li
379.809 123.498 li
374.562 125.001 li
369.306 125.748 li
364.311 126.999 li
359.055 128.502 li
354.06 129.753 li
348.804 131.004 li
343.557 132.003 li
426.275 116.867 mo
431.307 116.253 li
436.311 115.497 li
441.558 115.749 li
446.805 115.254 li
441.558 116.001 li
436.311 116.001 li
431.307 116.496 li
426.275 116.867 li
490.432 111.002 mo
493.056 110.25 li
495.174 110.652 li
493.056 110.754 li
490.432 111.002 li
.505913 .162368 1 rgb
f
206.555 215.253 mo
202.806 215.253 li
204.561 213.498 li
209.556 208.503 li
214.812 203.247 li
220.059 198.252 li
230.31 188.496 li
235.305 183.753 li
240.561 179.253 li
245.808 174.753 li
250.812 170.496 li
256.059 166.5 li
261.306 162.504 li
266.31 159.003 li
271.557 155.502 li
276.561 152.253 li
279.185 150.503 li
281.808 149.004 li
287.055 146.25 li
292.059 143.496 li
297.306 141.246 li
302.31 138.249 li
307.557 136.251 li
312.804 134.001 li
317.808 132.003 li
323.055 130.248 li
328.311 128.502 li
333.306 126.747 li
338.562 125.001 li
343.557 123.498 li
348.804 122.247 li
354.06 120.996 li
359.055 119.502 li
364.311 117.999 li
369.306 116.496 li
374.562 115.749 li
379.809 114.246 li
384.804 114.498 li
390.06 113.499 li
395.055 111.996 li
396.786 111.587 li
400.311 111.249 li
405.558 110.502 li
410.562 109.746 li
415.809 108.999 li
421.056 107.496 li
431.307 106.254 li
436.311 105.75 li
441.558 105.498 li
446.805 105.003 li
451.809 104.499 li
462.06 103.248 li
467.307 102.753 li
472.554 102.249 li
477.558 101.754 li
482.805 101.502 li
487.809 100.998 li
490.965 99.9479 li
493.056 99.747 li
495.151 99.6502 li
498.312 100.251 li
508.554 99.504 li
513.81 99 li
518.805 98.748 li
529.056 98.253 li
534.312 98.001 li
539.559 97.749 li
549.81 97.497 li
554.805 97.254 li
559.305 97.0382 li
559.305 108.036 li
554.805 108.252 li
549.81 108.252 li
539.559 108.504 li
534.312 108.747 li
529.056 108.999 li
518.805 109.251 li
513.81 109.503 li
508.554 109.746 li
498.312 110.502 li
495.174 110.652 li
493.056 110.25 li
490.432 111.002 li
487.809 111.249 li
482.805 111.501 li
477.558 111.996 li
472.554 112.5 li
467.307 113.004 li
462.06 113.751 li
451.809 114.498 li
446.805 115.254 li
441.558 115.749 li
436.311 115.497 li
431.307 116.253 li
426.275 116.867 li
421.056 117.252 li
415.809 117.747 li
410.562 118.746 li
405.558 119.25 li
400.311 120.501 li
397.683 121.127 li
395.055 121.5 li
390.06 122.004 li
384.804 122.751 li
379.809 123.498 li
374.562 124.254 li
369.306 125.253 li
364.311 126.504 li
359.055 127.746 li
354.06 129.249 li
348.804 130.752 li
343.557 132.003 li
338.562 133.254 li
333.306 135 li
328.311 136.503 li
323.055 137.997 li
317.808 140.004 li
312.804 141.75 li
307.557 143.748 li
302.31 145.998 li
297.306 147.996 li
292.059 150.75 li
287.055 153.504 li
281.808 155.997 li
279.137 157.651 li
276.561 159.003 li
271.557 162 li
266.31 165.249 li
261.306 168.75 li
256.059 172.503 li
250.812 176.247 li
245.808 180.252 li
240.561 184.5 li
235.305 188.496 li
230.31 193.248 li
220.059 202.752 li
214.812 207.504 li
209.556 212.247 li
206.555 215.253 li
.496101 .148451 .988281 rgb
f
236.354 217.251 mo
205.81 217.251 li
204.561 217.251 li
200.808 217.251 li
199.305 217.251 li
201.404 215.253 li
202.806 215.253 li
206.555 215.253 li
207.804 215.253 li
239.159 215.253 li
236.354 217.251 li
.384314 0 .741176 rgb
f
559.305 160.785 mo
559.305 108.504 li
559.305 108.036 li
559.305 97.0382 li
559.305 96.5342 li
560.061 96.498 li
560.061 160.749 li
559.305 160.785 li
.298039 0 .741176 rgb
f
2 lw
49.8076 237.5 mo
55.0576 239.25 li
60.3076 241.25 li
65.3076 243.25 li
70.5576 245.75 li
75.5576 248.25 li
80.8076 251.25 li
86.0576 254.5 li
91.0576 257.75 li
96.3076 261.5 li
101.558 265.25 li
106.558 269 li
113.808 273.75 li
116.808 275.75 li
122.058 278.25 li
126.308 280 li
127.308 280.25 li
129.308 280.5 li
132.308 280.25 li
135.558 279.75 li
137.558 279 li
140.808 277.75 li
142.558 276.75 li
146.808 274.25 li
147.808 273.5 li
153.058 269.75 li
158.058 266.5 li
161.558 263.5 li
163.308 262 li
173.558 254 li
178.808 249.75 li
183.808 245.5 li
189.058 241.25 li
194.308 236.5 li
199.308 231.75 li
204.558 227.25 li
209.558 222.5 li
214.808 218 li
220.058 213.5 li
230.308 204.5 li
235.308 200.25 li
240.558 196.25 li
245.808 192.25 li
250.808 188.5 li
256.058 185 li
261.308 181.75 li
266.308 178.5 li
271.558 175.5 li
276.558 172.5 li
281.808 170 li
287.058 167.5 li
292.058 165.25 li
297.308 163 li
299.308 161.75 li
301.308 160.75 li
302.308 160.25 li
307.558 159 li
310.308 158 li
312.808 157.25 li
317.808 155.5 li
323.058 154 li
328.308 152.5 li
333.308 151 li
338.558 149.75 li
343.558 148.5 li
348.808 147.75 li
354.058 146.75 li
359.058 145.5 li
364.308 144.5 li
369.308 143.5 li
374.558 142.75 li
379.308 141.75 li
379.808 141.5 li
384.808 141.75 li
390.058 141 li
395.058 140 li
400.308 139.25 li
405.558 138.25 li
410.058 138 li
415.808 137 li
421.058 136.75 li
431.308 136 li
436.308 135.75 li
441.558 135.5 li
446.808 135 li
451.808 134.5 li
462.058 134 li
467.308 133.25 li
472.558 133 li
477.558 132.75 li
482.808 132.25 li
487.808 132 li
493.058 131.75 li
498.308 131.5 li
508.558 131 li
513.808 130.75 li
518.808 130.75 li
529.058 130.5 li
534.308 130.25 li
539.558 130 li
549.808 130 li
554.808 129.75 li
560.058 129.75 li
1 1 .6 rgb
@
[4 4 ] 0 dsh
49.8076 236.25 mo
52.5576 234.75 li
55.0576 233.75 li
58.0576 233 li
59.8076 232.75 li
60.3076 232.75 li
61.8076 233.25 li
65.3076 235.25 li
70.5576 237.75 li
75.5576 240.5 li
80.8076 243.5 li
85.3076 246 li
86.0576 246.5 li
91.0576 251 li
96.3076 255.25 li
101.558 259 li
106.558 264 li
111.808 268.75 li
116.808 273 li
121.308 276.25 li
122.058 276.75 li
125.808 279 li
127.308 279.75 li
130.058 280.75 li
132.308 281.25 li
135.558 281.5 li
137.558 281.25 li
140.058 280.5 li
142.558 279.5 li
146.058 277.5 li
147.808 276.5 li
153.058 272.75 li
158.058 268.5 li
163.308 264.25 li
173.558 256 li
178.808 251.75 li
183.808 247.25 li
189.058 242.75 li
194.308 238 li
199.308 233.25 li
204.558 228.5 li
209.558 223.75 li
214.808 219 li
220.058 214.25 li
230.308 205.25 li
235.308 201 li
240.558 196.75 li
245.808 192.75 li
250.808 189 li
256.058 185.25 li
261.308 181.75 li
266.308 178.5 li
271.558 175.5 li
276.558 172.75 li
278.558 171.25 li
280.808 170 li
281.808 169.25 li
287.058 167.5 li
289.808 166.25 li
292.058 165 li
297.308 162.5 li
302.308 160.75 li
307.558 158.75 li
312.808 157 li
317.808 155.5 li
323.058 153.75 li
328.308 152.5 li
333.308 151 li
338.558 149.75 li
343.558 148.5 li
348.808 147.5 li
354.058 146.25 li
359.058 145 li
364.308 144 li
369.308 143 li
374.558 142.25 li
379.808 141.5 li
384.808 141 li
390.058 140.25 li
395.058 139.75 li
400.308 139.25 li
405.558 138.75 li
410.558 138.25 li
415.808 137.75 li
421.058 136.75 li
431.308 135.75 li
436.308 135.25 li
441.558 135.5 li
446.808 135 li
451.808 134.75 li
462.058 134 li
467.308 133.75 li
472.558 133.25 li
477.558 133 li
482.808 132.75 li
487.808 132.5 li
491.558 131.5 li
493.058 131.25 li
498.308 132 li
502.058 132 li
508.558 131.5 li
513.808 131.25 li
518.808 131 li
529.058 130.75 li
534.308 130.75 li
539.558 130.5 li
549.808 130.25 li
554.808 130 li
560.058 130 li
1 .8 .2 rgb
@
49.8076 231.5 mo
53.3076 230.25 li
55.0576 229.75 li
58.5576 229 li
60.3076 229 li
62.3076 229.75 li
65.3076 231 li
70.5576 233 li
75.5576 235.25 li
80.8076 237.75 li
86.0576 240 li
91.0576 243.5 li
96.3076 247 li
101.558 250 li
106.558 254.25 li
112.558 258.5 li
116.808 261.25 li
122.058 264 li
125.808 265.5 li
127.308 266 li
130.558 266.25 li
132.308 266.25 li
135.308 265.75 li
137.558 265.25 li
140.558 263.5 li
142.558 262.25 li
146.808 259 li
147.808 257.75 li
153.058 253 li
158.058 247.75 li
163.308 243 li
173.558 233.5 li
178.808 228.5 li
183.808 223.5 li
189.058 218.5 li
194.308 213 li
199.308 207.75 li
204.558 202.25 li
209.558 196.75 li
214.808 191.5 li
220.058 186 li
230.308 175.5 li
235.308 170.5 li
240.558 165.5 li
245.808 161 li
250.808 156.25 li
256.058 152 li
261.308 147.75 li
266.308 143.75 li
271.558 140 li
276.558 136.25 li
278.308 134.25 li
280.558 133.25 li
281.808 132 li
287.058 129.75 li
289.058 128.5 li
292.058 126.5 li
297.308 123 li
302.308 120.75 li
307.558 118 li
312.808 115.75 li
317.808 113.5 li
323.058 111.25 li
328.308 109.5 li
333.308 107.5 li
338.558 105.5 li
343.558 103.75 li
348.808 101.75 li
354.058 100 li
359.058 98 li
364.308 96.25 li
369.308 94.5 li
374.558 93.25 li
379.808 92.25 li
384.808 91.25 li
390.058 90.25 li
395.058 89.5 li
400.308 88.5 li
405.558 87.75 li
410.558 86.75 li
415.808 85 li
421.058 83.75 li
431.308 82.25 li
436.058 81 li
436.308 81 li
441.558 81.25 li
446.808 80.5 li
451.808 79.75 li
462.058 78.25 li
467.308 77.5 li
472.558 77 li
477.558 76.25 li
482.808 75.75 li
487.808 75.25 li
490.308 74.25 li
492.558 74.25 li
493.058 74 li
498.308 74.25 li
501.558 74.25 li
508.558 73.25 li
513.808 72.5 li
518.808 72.25 li
529.058 71.5 li
534.308 71.25 li
539.558 70.75 li
549.808 70.25 li
554.808 70 li
560.058 69.75 li
@
49.8076 248.5 mo
51.8076 246.75 li
53.3076 245.5 li
55.0576 244.5 li
57.3076 243.5 li
58.5576 243 li
60.3076 243 li
61.3076 243.5 li
65.3076 246.5 li
70.5576 250.25 li
75.0576 254 li
75.5576 254.5 li
80.8076 259 li
83.5576 261.25 li
85.3076 262.75 li
86.0576 263.25 li
91.0576 269.5 li
95.5576 274.75 li
96.3076 275.5 li
99.5576 279 li
101.558 281 li
106.558 288 li
110.558 292.75 li
114.558 297.5 li
116.808 300.25 li
120.808 304.5 li
122.058 305.75 li
125.308 308.5 li
127.308 310 li
129.558 311.5 li
132.308 313 li
135.558 314.5 li
137.558 315 li
139.308 315 li
141.808 314.75 li
142.558 314.75 li
145.308 314 li
147.808 313 li
151.058 311.5 li
153.058 310.5 li
158.058 307.5 li
163.308 304.25 li
171.808 298.75 li
173.558 297.75 li
178.808 294.25 li
183.808 290.5 li
189.058 286.75 li
194.308 283 li
199.308 279.25 li
204.558 275.5 li
209.558 271.75 li
214.808 268 li
220.058 264.5 li
228.058 259 li
230.308 257.5 li
235.308 254.25 li
240.558 251.25 li
245.808 248.25 li
250.808 245.5 li
256.058 243 li
261.308 240.5 li
266.308 238.25 li
271.558 236.25 li
276.058 234.5 li
276.558 234.25 li
281.808 233 li
284.058 232.25 li
287.058 230.75 li
292.058 229.5 li
297.308 228.25 li
302.308 226.75 li
307.558 225.75 li
312.808 224.75 li
317.808 223.75 li
323.058 223 li
328.308 222.25 li
333.308 221.75 li
338.558 221 li
343.558 220.5 li
348.808 220 li
354.058 219.75 li
359.058 219.25 li
364.308 219 li
369.308 218.75 li
374.558 218.5 li
379.808 218.25 li
384.808 218 li
390.058 217.75 li
395.058 217.5 li
400.308 217.5 li
405.558 217.25 li
410.558 217.25 li
415.808 217 li
421.058 217 li
431.308 216.75 li
446.808 216.75 li
451.808 216.5 li
498.308 216.5 li
508.558 216.25 li
560.058 216.25 li
@
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/NDGFMI+Euclid*1 uf
/NDGFMI+Euclid uf
/Euclid uf
/NDGFML+Euclid-Bold*1 uf
/NDGFML+Euclid-Bold uf
/Euclid-Bold uf
/NDGFMJ+Euclid-Italic*1 uf
/NDGFMJ+Euclid-Italic uf
/Euclid-Italic uf
/NDGFMK+EuclidSymbol*1 uf
/NDGFMK+EuclidSymbol uf
/EuclidSymbol uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 13.0.0
%%For: (Vadim Naumov) ()
%%Title: (cvsv2lmn_all2.eps)
%%CreationDate: 2/11/2013 5:29 PM
%AI9_DataStream
%Gb!j.Bm\SoZ7,XaT;V^Adb3tHQ3e0,8]RB(ZKuC&SCl-$b*$QkQ6f$ocX]5P^\t8a!!Rn;Q__rtR="Cje(nW8:^`RU<M;\7]\+:L
%L>DjuW&a_;C/#DM=NF[7a7)n$qenE353hV1-7,1nLuQo,$N4A:>GKL1Zo=Mh(lp_ka^em<(l]oD[>c9q@I74p#_$L>hXq)*d6DBj
%6+_3t\(MZ/VguB>lO<Vqr*d_F^&3-/*qVMpW&Yb!3.!kb%n6YngtqDaCs_Wns%R$t=%9MN.(NMC"(`jnBs#c'*V@&SH@PSlnX%8U
%ZmP'X/^i]HSEZ*@dF#IPG5T8975Ze1O8A>8.<HQf.DSU=dsF1obU1eYHTE&aK'+8"-HFL+1%<BLrB*)Xj"LRpS:j3I5julsJ'cpg
%NDJ<X>$BOn6jra(!lDbRj51(?Gh<nX]"Jn6^:c-*5G;Gi0D)L#RneM>oGadBqlo<\QIT/,s',9&gH4\a:ArT0ditMQ(MK[m]sG0H
%!Jgasptl/H:TJ]lSdhQ#R[V-G5GsDsXmjUR6712S!@'o1Mp24nPK4VLs0jQKruG;90Dmo7,rM[t]Qhgj*jJ12;,+obJcCR!1Il,0
%KZ$(0n"$$Zg=%)p\0OuF[$DCTrnIBg;.4;5]$0IaN_n$"T#h7=E$7(aO7IU['npA\(2<6@Id\AZ[7@oR[l63Th&&r^qYu.%<?eSW
%7;TcOZU&O-C=pS7Ug\ruN+\o'DkI?a1uB4YEHqElU44,@rV$#b2oYGGR,M/KJpd:$kHiY)p5e'T@L3fWG0YEOrR#BnFBOI3;C\fJ
%1spdYkRA-e,\\i2`(\<WQ@$M`M'F=B@l\'Z;D2EMmYq$5rSaak1&LN\$qm5UBbo<@r@_'DSpUJOp)bM2kWYR2L/r[6J(])/-q.#3
%fcG1i*-O81V`4sl2JtE]Xq+qY$q<bL=8+tp!K#L_n%X;GrO8S)q*#`lHP<&3kg^$J!f#d>*d5ECk%m/[M'VXG%bd-'arq0lJ#K's
%!t>>Wgcq;#Jc/3MI<<sXS,^:m/"QYVB#rr(pWo,2hKX?/RSDMRm`Jk64WY&6Nb84jd2qoiV^jiu2'Gmm)Z`3bre<$gSh`r*[1E,3
%K,HqP/%oB#4ZQj5S^N"brB[p%!is&i4)L$eHWZ]#R-M\dhF_uK*Iu](f0ifD]^,9<A'fHu>FD"4h1;sc=$!\X\2WdPJ-WK&0HQeW
%L'MR_k!J/[(4W/:3r<?!Nk:([e,HR9K]ZFM!r_$FZj4LrFQN;<fl:r?1+&1f%D+-gm1,!Wh$SeAEX(YB>0\HFdsm<'1[)4FBY6)`
%*qt!YeF(PX]p7%aXOC^6@,2<O5>_MMfcLXV5\W&s/O5uXp7sJ`O@4AS5CT64a3Y%j4DkZ>2%KeZ^t'L/1h]&QWJ9Qfn4'aXqmXDq
%2c,'j`obEu&Rf77R]gO*A"^-l2;dJ<O#>Kuc/Q!`o9aMUVoL=6M'7u6d1(8@K,q/3Ng=C7gRWp&n"1&<XR&Ub3%&$8KjO#`YIqlY
%\CE\>j8SR^%'uc8Hdr\)g17%^)7Q_3D6J(dZYhR]2K_O%\'hP;dF6?eRX3:;##[U%f@O,QNRdc*oGOP3h(dCf7iHedAK#h'7L"S$
%Fo-[]&YM3qVOPjfVcb.gN8+9W5>S77ITZ+.^[5rS;j]cEZ9Nn'@(#\J-Bd$taO"`54!ShJ<bl'L#K2YOLD9no0gB@K^An1VC(3)E
%[]SqXB>+6cB>'pLAmDXIK>su%A0o1nG6ie\@-A:c+n0cra87e$TH2@A(Wmq8^e0-'<?X3:0-J(=R-dg-@*d0_\,=F-_$kd?3$->i
%*Y/cO^]1`-Na_<DH[6)A3uI;*@a2^\@nel_k]ZtZ$`pi7B8`+<e7//"VbGHmnD@:j[6KCG%>sQnI-Ypjdp"L+pXe9'5ODa1e-k'G
%a2=IAep'<H*7smSUB(a:&BmqO4LdPcc$p097\7X#If/X\^<m/BKYes9giM]*q4/Coe+P8-_0$^k*$ooaruU0LY;Dq71huV-%Y%q'
%eJA0*HuP_gqa6/GC:%qbc]:iI0GRF=4)UZ6(brK^bcAeq;&Y+NhV97;jq,Dld?uon%"Xt^p80u:]@,+G["n$gNIG9hA=6c2_:k0U
%'u:mC'[<Ln)4-[C[@+eXVU3(dUc&**_!lU1l#?9U+[+@V;46AKKNrfZ54-ng_U!RWL^/;)HW8aNJ(97oPft9HLl+_;MZ/](8$DS*
%iZj`5q;Z<2$.oOUm14Sj!e5V#fKX,Vp8muH;cN)^%_qCGbdXhTXm#brp\Sm:'c977A"M&T4NT2j]QWr9Pp$*f92PQL,ktcQ+J18&
%_9[Dj=b3[>R4P'Lk)7B&R0`X68ool5ELO/VNM"T`S?Dsq#ZsOPHFS?2]kBe*Lu'pCIrXrkEgK]te-0djKj@d*3P>FUo0q,b_b>Pt
%JStY<?t?8uCQo4V2C*/-VU_9TJDL./@KAHipt5&.nEo`V%9WDp#_Lg"bI6?9fUH??K/k_2C.s.u$oO6a!/(7PJqi-hL3%#?-d`q!
%M5m]Ep=b/Q_HFM*2-<^mV$U@"D#o7?'*Am`2E;^NbBVs`:CJe4CFbH3QA+a0^M[H-J3'IAfRWC`m'XiL3i_SU0d?)dX&l/*>uj%>
%?#!W6oHC$+0m1nU77;^Jq-_\nGAA3mAsL>h*f=]fga1lrT)g.=V17&M)_`1*WdKFGUY1mkpM')g'ueKbKc)j2kukkIMHJX6I8$(_
%rrk%DBO!W4_p6lu?)#+PNp.C(^<p<$nJTWVH1Hksf1q3eiM^f!K%5nRNd;:T+6H[Pg8c6%$pa5>@4/"(SgE%Jc[+N%fMU,^=Z8E:
%':#FdHL;olE]k8`=OfC,^GD@NJ\6K!_pQ!GZcKD,#hEED3G[s!da8oki/*qNBe8<BI&aG)pSGC6"IC<nHek`;k"nK#N\BbSfS?G0
%g[+X3m=YD25Q0P1h+kkFe_"aMO(Rc(n>Jfh4AD./3nkL4c5P_L])gLC0/b/:n[NH&a?:%=TtJTX>W\^#\(@0\J7*^C9uGkj'A2"o
%euSdeF>2,\s3U2Q[3q^OHPd=H\7XW]DsV='I[m;f@*tffoVR#?F6g`lg7(<FheU!?q]r_[ZeSe-5<M)84W7XRZ?>R&_X3>3]0<d!
%?9R"Af2pR24hUeg5$6Y?Gl-1jGh1!F2WJHG9d/Wk.%7NW[>sZE2qIGGY2<Ah]6cG=T0/*7JBdr(m;$3iojlc=HLu6)I80G/2Yqp[
%n$MBQgIDubgYI(h0PbO]>g;+iS@6.[C<H:oG8mHTm7H@.hXl'W^:HM_C<7E5Rbn=YhZ0.s@J&Vg0!uX$EL=Fgq;GgnJ#!#>I',Zi
%lDO<_PH@XHX-<DE;X<bqg"+$XmNJg.rn@5FAS9RTr:D=O%b:l'<tCe@duEDS]a/rFl`F2XCk#f!HZ8kA-3QY22Ei42*l23m^:,/-
%+(&e9kML/6p6Mlm[1I92h&3FG^+CmY2EU0HKoKU<jka2$Ao_[dq>B[4V=fi&YI6?8ZTIng5Il5jYL@3Xi*ZGZc,8pYc!!Lcm;1Rm
%nTD8>q+8%U\G>(Vnp'EZXKfH_lT6T#\:3ngE<9t+^"8n-)oKtge"o:$h-7ur5Q9?^ZB`O?dMR0LMkuV;_'D+E-^30/F4oqep*PX-
%X8S$C2@Qm9p?0<`h-P/a]f=P']\C02^@?I8qO>aA7>h(?lgY4&rI210qRj3/]),nn5.LTKkh[E<"I8DU44eIS5,^F*jUf&hIe.)I
%/Xm(C]"8u>:Y25H<n_>u[]V3q+!V_Y5C=e-KE>taK0LDMH<@bn[:]DAHaENIj)<`/r2Qa8n)DAAKAT-kp[<%WNEZpRr\T;br4.!S
%qsF2l)GQM7kj:3*b6G2>:KW9G:'@ikk:U6:,f.oEc.3]rmT+8s5cXSD>Gna`qR4m7>^?0oZe`?DUT"`0]e!LFI/BqKZdF0J3o'%N
%?iU+>(!fL@o%j9]h4a:;p\j4jZ1PUVh_oYd>2S1ag$!oa/,'NLD]Wb4*8V:SL\JPqfku#p)!62&:S0Og[dQ?7C+XV$lJAdoXd9#_
%Ja$>9jjJe5mI+5Tq^QNfhqOe&dF`q(SQ1q*Ffs=0Fthd5Y?=bMY_%$VckkJbhn=:LIpIEJMRG^O-Su@b^92=\@#j$Q]@7f8T?H70
%G-4'>FtiR\H#Pm6;*Ua4ITJ\cIb=Gd7*rSL><9CjF_ft*BtY+\mD"\uDgYm?P(YumB"LKMCZ3jtil87W4kX)oY&ClH$L?X+LlBU8
%Aeui[3ioL5>G0dE`JpYQbt3)^o4kas]oV'8a5P"4_<ZXH*tL;smiE27L8?lo4l&@nH2h#k$&m.-U=J%JG;;s#6M9gh^<7!pnSH3B
%r(oSX:7pd/Xi2*/HX!WEICs\%iE,ZlSSFg!kAY4CQ"Eau]^qS.:L-)/I@%IP<kb0]BmuOp:Rd!qlVV0lq!AN`nT9ToS8I+'4cd'i
%/S?.D]8+G9U"Q>J9sq?VCeX#$lgXTm"nI\6[7T/$rUuA]keQ0AVu:.ArTMS:B^`^E%cm/L`iGT"8VhSkZ+L$EOFJ3#YE<sKqZ='C
%#brcp>4Z:`XM;1::b6jgrr)8U[bi[@[s4cS6jL'CKg3>eEB?t\=.IVFe*I>Cm-Rdanuk^\*`!9^IWqrm9edT7B^C.qZ=/26)IM+J
%*c9C-jm-]d#MZ_Vir/4:@rJe/h62Kj2@Ue,lf6:U/NmYD6="lGp0_NCQt9(Jf:s_B&*qWlL!rck=19&1(#=WDlcHb'$i'&TI=S`W
%I@*!/;@@$qUUEn?V[H!6[cKICCU&,X)k#iSK-mCnSS\DaK3e9<>>(_.j>4]."[jo6&@"64Q"bL&F,MCnh3JXCbCn:U'bGuLBMF=/
%MRD*ldkF.KoHH3G]\H.2FIDIgRcticVmZ?i^h`p[]!DTCY9(Ko4uE2o,lS1Df54$\^%=?OGNo"ZcRkF.%G//3-60/`j8608;&Tb]
%-GK3#p(rO"n3>^;>o!!f`cI2eda7VPel<m=e)i-t69=>F/4oGKn;).<`o`fUEP^FTIr3rlbKZAgJ'eeFAmTt$Ff@05O*FhQo%\\j
%$0#Z9qTs@g=`J+c(c%(I*,i6"Kg4?'\0=)\p$I1@DVU>-6`[g08SWY:N-S(9XA!GblbK-m`9Wm1)asJSm_3ek:p7Xab'>e&8)H2P
%lg\ZKQR3pdMc!T#)Qd`7^8Q5A?_e;aU340J1%Ye@2"k9@*H&":md3@]E#AKL8'r0jmWl1Qp%@"MeZEV2lF<rb]n=kjH2u,I^n5>3
%XM;=Fl=csmq9/VHkN)Ll]si8N7QPs;I^nG8,"li&gqdYUN-InCf$X'J"76c9GeEh!D0eK1(0t9sI=%[?31fNOD`rOF^$2TIr6fBI
%%U2$\H_8=`khH[!:IW?:M*d-NkL&52g@Ejt;>Jh/58HIKT_eM$ZZC>?V5`n&b?ej2RKl?bhOVn]cK-5TlH-,HI:KprO84ePh>*WG
%`31!X(PAj;Tm#0?"Puaa[QI`=[em=\JtW8M^3oeVmfY:FLg8#PqO>=E'd=I[%e<"n7ce`"*CRu@:L"$d&*i1FAfP.54>Ca&gF#_d
%E*ZO*;ZG>P*Y`PIM!NI/f$gM-%3-,oRP38WghFL8q.WI(EqJFdaQ@T0+0*]S^TX6[>E?O1D:`hGG[T^&+_V9+AZl?nqi..J:LVtp
%1=^Hq8TJ.]TtBs2;Km@+4DYMWd0GO<J;jpIWhT31=q=DHp0aH)>f62(#QD:rI<bJ+5uB2hPKuV-gZQL/CU];.H.^agX=lm2U[Oq`
%qd:dXIs%kIiU$Q7*q\'@]HfKK^H]9CEW#@\.S0L!Mk'pAlC`):X[)L=fb+E;0+K9]PZ<Y]4uZ9s5HhU>Gg8g[h:"ZC6hM^\UfDJO
%D=_8.WFT5*5M`la[5jc9nr.K&Vn&C+GAjR1aKs1cPNL%)lS%8:GGicHW3^\,)_[iP]uH/hrp]&S@_-i,/':V!#;;h=ZhiV=A>_@=
%Z*qi^`;P1S26c&-\[=UB+2<u>ce^c,%el\&pV():\.K_s)im/A4(lf.9fZuYipNkh[9st<Hu9YmShBUFqso*IhpBd)k2#_#+&<qp
%h-%B@_0!AA!9e<E#i!ntf%-2,CWEAhZG(MOH+<k9jjL9]j/'FQm"WJ<RdQcLY,"*"/[q=1msHuKXZCC'D;NmC]TNA3='N\LC>>O8
%O`E@HXlRF^.5,#ISg:h)+^,j+DY,<)7HoTh&)^E'IbuQ9]L"NlU\jU#D!#mY-fX+)dfH/DMYu1LZiZ0S?;);6hheKWb<MU_n$]g*
%`EbP/(]Jr(r^#&fG][50:<TDJpZjkKTX/KRr_-C??Z5U2=$:l7dN$b\"VBK/OtQlQ1sb?gnkY`^52Z8<iZDH1s5*[d^g#GGcT\SL
%lGcQ^N8cS[5t@CL/+<A/B1)Ci",6M^$f=-7#:b)llte?1cS]IGQ>H7Q5OTS>!KZ=`g7H4$c-B5ZYosp@QXC0XjOugPr0-I4CCab-
%C-=cJIqY^_hpr`"n%:Vpm-ZNDiOZSqn5In#&`'_\^uu6ic^!)A&)2<T"5+t7YgmN9o>JuLDr'(#qJuPc]@J-I=`]\^\D)>8YdcqN
%O0\oK?6%c`JXKC5EUWD:hXMSg'"6?Hal_"lFm/:<3*p6)R\/2=hj@0,oem6Md5<f;hSPqiRI8[nKAUQRM]R@m\7TFDQ:lMZBAX10
%=8TI64p,0\DI]a?ma7SNap!%S'!Sq@C%UBE79Hb^AC!@3G"O1WHCl!L..=V@r9.I:oBthU!&L%#`a67Ll/Cn!c>CMs`l=l2Q`a+l
%Dg?N-h4"Z7mDFqH)m:?J-AX\Z(gm.?0(nsE)!U_^T%dpL7<RhQ2gAk.k9k>jTahJ'WD\4`I=JWT)Jl=s5rJi@q>.MMiSN267fSMg
%.El_@dhpqk4IS3kBP_YUm>O)=`O!GsdF_UXI(Fd1H02a#7^f^Yp$m&W6OUTaa?Fa=[gn>"/"?!Sdp&Y$/\[3_mt3:_q-@KP]Q4<>
%/Y"T_7FC-c-U*@Zi3>4@mf08LH*a;+Bl*2rZ=90uaY0d6QP8/M[FHu%5.\J9dJ.gj[BY1fqrl%lic1_q3GH]-C#&Nmrd+TaHY]`@
%ou$mCI/T-!eMk1:p&&Y(Ki4=[fPJQcGA+Ws0"j6YWik(U$`U3j*'?;g\t;-5K_s$gp\3P7BI.%D2^b!PIgL2WgTC/#L\ilgpjMgG
%euJ1^Qe,<2Ilm0_GPKe(qI=<N@?,5Mh0s:\GSJOfL&E\BK%kpCj5/t&[_$n7mu^+%ZdtntP=b*._:Ic&if0G2?q.m-hE9W)T2m>a
%b<KAr4*aU3e31&:7ShkD+)ZS)FgsYjGVD0@op4Utaeu<QDf/j-\j!k-H.k;!NU(ZJD#sOtd39VA^"qC%I#tjLAE+X$(c"eBC=d7e
%`nPG1-r*Qu>7^2[m"+%k.%Rp9]RE(R](`WK*d?LL!;[;0`S4F3m5"qZZR$D4nhF!^B43Mja7nG@Zh3`k@n/?hLrLO,XKUGE]C%=E
%lQ*fKh%d+<UWM?dlM`<EfgqI%^-n/.k--!['(tis]K^V(qI=;f\CjH/^j<Q*32aN/2mU,0>;-QU?8P-2_hE0a5jpq^c_I`F:/uDC
%qJ7U3]ljA+[4<i^@.p(p3H"q;hEICFEo%lrUA2RU9:/miUWq)rES=TGFS=N7h]8DcVt=eOphkLFa,eg5=ShX2q^5\T_)Cqb3QTci
%:o%M06ku:eA9VX!3d+Sk&(eh&X.QG;p1Q0q%L-QQ96%[)e%Dg\@.PLE]C#LiL8<6^1^<=gSnVHM_k*g345-:7md>Jk=pO>'`aT2M
%%C*IOg%e!`Jk5(YG\]+mI8oo*^-C?-VJuCgiT[IK&D_h7c:+2^'g)Tq]ih667lD/C)Y`*)0(%G#Jj0+FHkG66B<WGLh>l,2om*Wi
%%<I$*^,FVIoH!QZ[Cu/J+Kjhp)p^I$YI)+sh4M>5S=r@"M-Bkgn8e%>7PN.iqU\g#N3@$%[_</N'GsM$=O5hFD)Us?P:7QK05iF)
%=an%-?CajZoi?"%K%@Pl53r+':W^9q$iQaI$VffcOWU)6Grl.shtJeYO2)&A7J@:)]lD^:O7'AU]G>n79JZp[*8a2i#L<,$f%0[0
%9_Q0QIeWDIX=,j$T"lc5)9ed50fUUtcPh.Sf3rKUmL01U1e0JdZTl/\o&]]ikUNU\,_Q&0fPAWnDHFN#p$$Uj4kP"dEVuO-#DQW9
%XKT<25.@+I?2K9#S]f:):YTXAg0DDeknSH=fup3?^AGSG7fWDnCr;$@NSQns-8<R/\*K6s[stcV5"T/U?Z2Ni]8U&E*%EB'/G,XX
%@&a%\mlY<,2VKO\48kF>`I>)V@]RHPlXNarnD\l)s7Q4*,I0DspHD)Seb<b*7lK8Ula`?LN*k@DqQmH[Kb_A[Gge^:T2&dmVX%P4
%;kr^7rj95;Z9FYc4+HI!M7$QWX5.Z+J+`X#KA"i-:U=Q2Icru0NV;Z_\6eX,2c!Vd^MU^R*5%n2EWec!BR-Y`HYmTA1'5%#kP)fA
%5(#[$e,>/1-R$:4^ZTas_;!gao@pbONum_=J`,18e'uib2qq]cQ=/'/X4aQ"97&Q'9)\EP1^D35s5Ej&rtQHaY=O^,>R_e2q7a8F
%eX9[tq`I+WUZTaR.F*`,p$+ti"W$R-]4$L+>Jfs^FZ"XDkQ-CI[iaDB2"EAG`2X8froLK;Vf26?#s[<u*S`3Em/?h4<dt)II,aGU
%EV!c%L2+lQ:hA>Z=a,>+>Obnne2hD@B9_iWVngK:f=)Ne2Y4r6dlVKP:o=hFkk;C%d&fhYS&=C`G%h'Q$%796\^``c+.l'`@/\s2
%*H8$Q]5LnLXrTttir(0J0@.(E;s_'fk[D3sGVca5i+Mshqk*<u2>17<4'o8sgY+*2\9C9j`R[L78TZ)MZ`XT2I(5#L[aqoV2r)G3
%fC$pf#?qT5f+tYNrV^rI-t'qpIcgi]GS:iJ=U+Prr]i<'EE?oh`LZ[)lfe2c)k,9Oes@atdlM252V!,Om]2iM<-J-6`i7g&T"`lk
%Jl0*>c?J,P>Ds',/3d?ap@3Ke-M`Lga:YqMTC1J<EF(8Ml<e0XkDtpHMDY,/s!hu(Q8Y?e(#YB:^VTJ'S&)hCq"k$&c\8p+i]8Vj
%[cP2*VHajELplKh-nd+Bj/V.)p2i@`+3^UqaU4=[^1_A3ff;0boVPjQd:m)QrPrT!ZAZ2=(Or:CrlCB\b1'HVc>32k1`WnmrtnMb
%=;aeN3G9Ckrp#ckNTW0q/+e(gArLr%8&L\"[T@Kp;+kHR3<io=NqLm#d+3B[EI&MW$Ug:^@dM5(E>BAae\cD(LLXSgb<8AUR)Xn2
%Hf8W9Js!tMTSJ5j01LSCk:/WLXFI[ZM6UJY0=JZ^=6=0hC)``6kb()h0-7?5iLKH6M%]:#R\*MTSjr<Q_:<;,>oE$*N6rA$frTkc
%?dM5Cm,KU^k'I9qAVI<i/H/RKA%QqE^!\)5QU56m?DXEj^UeiXoPk[.]RST&NI@XQb'<hY[@<rUFED8d/pqoplh4thk?L-;8'kL'
%J_tV7[Pr'Q:DhG/)krK%]W*7bf!Y8/*NYS4ff.Vt\n\t:o57T65cBaIJ9]Y"c0!("eM[i<.eL<CAEfrhKC=WL$gu*+5HrBuYLiIA
%bR<Nf3K*VbYCO4=4$keP=.7t-,1[9C&hNAk6`8Q*NpcPL=6l<!rCkGY<GMOnmL<rqp0U@s4fmVh/5ePc5W,o;[Is`QFOpZ^jct/Z
%eV"4G^F-Tu5krB5<]^ET>6FcLdmHi=BVJ#arijrql?5%'<nseX@jWm_Suk^W8>t"<or$04eufJ9]%mn0B%+c/96IT^R`mh5..H8*
%X#K8b%371Jg$jWFS:T1b6RP][;O\+kn6TN$r)H6-%?rs7rg>_6cP]*ehB.At^$ZV)S#0Jtc+De#;jq=RG(4c-.u(6J955N'^"EE)
%X3kmtMd:Z5R<IrqW/Gf3jJLNtqq^,94m]Vth('o`_ZWnuVM2K)/lLAids^\rdM7H+p]MOTEf!5:(;X:M$f*N'XnK-2IloeU(q0<o
%X3?]h[J$^"ji5NTnJBGe=T;ok_,e.ZCJc*rnFPo5O8Ghge_]r$BJ=:Uad&^sgkgsUI*&ql\%sT,+CVIF5IJ:2HIFsk=(trS$UQ1)
%]`XPT$.#L"]F3$VekB^5)"]kcV#l2sOOg#B"s_@&#8bu1O3oPTV7[U(cI$oNqpcG--l:dIgjHAN#o/(k-?E=G4E(/3N=P7+3UQ(M
%/gfSK_8Zt^j6.\R"S!fdrNcUY(JcZN2i'E\TjQ\E$%km`FRKboKKg=pTHd<$]rJtJe:o2lB,1/8FS/.f5-&^\a(`TSU?g'hBs<.C
%`J03uG(Z/+91oAh6\q#Z3`Kl!TiuC;<hjTnLuXCknDtF-iNha!VNk2dP.H(SFc!5BYZ>Xaq1WaW:KQofNI=)WS3NS=cG.?"&[1&$
%)ZL/eLNe;D].8!rYH4V-ZZ3Y\2MmFC]Hr/#``'9(H&K$Nca/(VqN$)LH>F.6.I-_SLr]LDZN(1AFR7QgIahQ]ra31Pjt:Id3=O\u
%.eQP>Nq9N90AH+)M_7\1C2\hCHSqA1\:-L(?7bo^>9Aicl5'hGOT+h6ja=F,V`j5u[7_,3\k%4c3ZD>fK5%.,E,oBR!n&pp;!-$6
%UXPG'"CE[!):AP'[?i%Z`p>t8PPYocVsYZIS[h9)nA;;Fo,PoZ8Y'1ZHdR/.e.:blp-g`4lGMIUgUh3L%TWhoJ^Ns"Uk.`kIsZ/f
%#nZX_\bMaZ-iI:,N#.6,UKs)fr9%5]nm!7Z@F"0?klG:9f"!1e-]H/94[9k?g!?R=T]%24HJBN.GKbf4$]P6s[>.+uD9)loQ^Zs[
%WGb3@?Ief82=P-bDZcW1>Pkq7pL`U-a2Qb>nThk1C&L_<26H%'T*o7R>jrTCPNU(@lT>=tdt-=Nc?/@8_HoNMKBE]`"h82Nm%;,`
%l;F-X*5Ebu*YsN6e?a4?^cl?rlN7spjRr-Xj=+<21f#bN4neTN4O34a?AsBl`uu8cQm9b/?G:'<n`G/@?-;oK0?M@uT8o[nJF@$\
%.,Dt3rm\UmYrt,2:J]^]R2<fl8E7!?Fl!njU%J<u?NP>3\;8;QrW0_\rfS:A1e,OTZMm276SOqKU[c+cN&_-&6ApBJ3N`KU3G>$j
%_<3M.(O6=og%L/;fT\$q<-hWC<TT5'"h66ce,IjVr&Imh_M*]'rd2`jS1cE_M>`@]^P"Q>hQ(du[t0s=".)$<^Yc?g!pdre(K\DD
%qWXZrON4&QHPq-;/`rXs&3dh_H;]q($J8,E.j0m+48'03bBE:n2t(R13#Z,5Gfd5M4Oh?+?jTL*d/7B(E$iR>,;]@E#>gJaA<5)e
%dcTbVKWRVkkGX`X1uSe5lN_1Va2Ho"Mt3M$E9P3:cKUAtm@_?:9omWBZ8=,HT4b\n-fXf*b?'#O*58!#]T1j^"clEeoh5:;pWEN;
%_"Z:/i\Z@E'VX7d^]1`-fJTp9gE'8b%Dd>O]lf:o,qf8E:[-iQnGRirhgbN`]GkKbHQf)U(D?;:9CP"iVpO;tXN@nt"J5`;r=>G%
%cNa@CpYXj*rnENAbo,8;&'"C-cBS;V<2<mGR3hWXF8kZ8_YB&Xp4U-k;=0csl!c3-H4m9g-I]K-dPsN]_+DcOfX?F/;-XnA`f9-_
%rRUW7`?`Q=SEg?mI8SuGTKn0nVf=3V,7.6Y$n2KDVqst\ka6?%$1ocl7N0>"0@Iq3!Wr\^p0gD'!1@NM>iW@[fD:Tc(hqh7=\g=:
%\,@.6?'uL<@`oqs-.=,p/d>)cAPr+GMDGLlp0^eK,F(mE<]?TXoNIG0.Z]cMdDP:I8o23t+^(D<..UQ1k!2fZ7\2TVc[ApJ[Kf`F
%4]\68[bl<^cta*]b]&O78%>Ym@SRSjF#'o;0oToq147b7/\(boc?Ys0Nop<K65a,uBHNJCD`4d*=be),!2,tR"!>]X4jB0IYO*Fk
%e-69Lci1\8lBL'F@'m%C"1g]>n8%lE#7Skt84F[;5)Lcc-tN0O`9QCB@Vu.;qGlc-+<E)b=24d4S)`g+'n1htm@/AA&BhZ+,5a]h
%WYb<)d@^U.93p^o>\P'h>i9s$!LUbMc!jg[NpAGtH1G_hMc?FR^T8a*LU[?-p%)?f>5gUk<7*@7#W#,2=I_=40@6rOdauipNSo;0
%!fQi?(!XSaAmf?4(`-F#Y,l94@5*dN-;^>'Wb8ku&fet@M6^JnT5".!M-ne0AbA_3W?.*K^\V3;1^m*?W97lZ_NZW-fY15#,$.A6
%9.Gg+*ktg.(D,a58X\NAH:@3N%KDFArMjm9_H&4QphAh>%K@B&:4apR_&\>q"T1I[(tBA/.l[D#Bc"VF;]h;$gH$,6.Hg9bFgMVX
%h)\$YYAY37jFWAk,t`c5,h&C<o1KPm)qU`##`6:$b`\S>6#QI9<)1cfpi#J#5_P>35@J3I%KGfVb.jueWkatA;OjB0OW4;SFhF`^
%M+fUAAN(cZ<e(8V:*_fZFd53kHs-S`)0hAOM$k.UK]G.d+Tu&ifKhR0@>#BL*a2l'8u+QTEMS=10Z>H`Vj(-t-6>O?MpZ('Ot?4Z
%_PXVVkW?HqA42^H>%bQ1ZD;F@+X]6m*_(`i\4;1DS[&[P!dZ[9T8V1HPJ^j38Mu?$(Sd[Uc4Qb)%]#qRk6RrX-U7N+W)-(`3t@Ln
%p&Q%[AgJIR,kPdr,t=u609&8,Gr:j`,GQX)fm+1/:fAI7KhT`5:(;_%)3qR'26R!1WDH1gL8Gsn;j0=7rV7A990@AK'r0l%6@"t>
%l(-=hLh'(q%qqb5lE\KZKp$bVU=)^>+BbiI9iNNtJ>$\u5V9-/.B,!p4GHlf`_pA7WlttGQI$h48i,3,C2!]8%\M2U+Am#q=E0bF
%NZ1V5/VF!N,iq<oE?@aBqNR-M6WW!/Mp[]L;HZA^H'26FQ31hu'2/Ylr\u6MW,RobD&,A<S)p5E=U-,OI2[sgKsgR7YS_r9.d:D"
%9I_sDJW+[W=GagC-ZR+;!N9P8!#!p8p["-'".SE$84ni2St7bC.1'fk8L(!C%!)SqY#&%=W.b@F/olG^iW4C,A>-F39P#2QaU0=3
%0Jr/68A]\+Op\h>A&hJ%>#?VGPhDbe,'.O'7M2Jk"!GeqbR7uu*)m9[+Fm/l5ruRt>8fsE'hTZXBGrW[<[+RJUdTp3n2OU^(e[jW
%WA6ih4EbMoC$l"]]WndQ7]4lV&Z<3Z[`4sHcQ$Xs*lP&G!KFl9.8f'f<;-N*[%p*iXJ=0+b3G,V2qHdiC4RU009SHjPQD-PdKA;+
%W)P<7['W.L%60f2%+G@UUdTp3n2R^]#0dh<O=KR0FcWYqF.+o+#TGj0BbZFt.LTm-%>J8CXD.11;jTd>6B?rlff2,X5qIa*e^+T0
%d5oDOqF?t(DRBn',U5YH2"r=K68DDKJ[,PTo/O[O'hU5hB\G2&V"H0n$:!M>A$HlQW)+td$qYO!m$uP[!ucH=Z^=30i=)d9>d4$8
%/6SYlj,2t?d)bN$M$cK+nRJg@Xf,&Gap_/=>\P&Xc$c7N(Ei@*dg7.M+)$\TCWJ+n',=Chi+O#a:^cWR&f$GDj2cg,R];HIAWERu
%W$b`iQ3TZ"Y^j^PgN%t'\7EcoN[MKR/Or?<,3;+\mN0^\m#_nqN_Xdo0Le]-Urk_:h(qp9jT/0cS4+`.Nf],M7pp#R&X$0c<GZp\
%e,oNC7"qE*3/4k(&DiKulY(BAb$%#%7@XQ)8jqSnRo%6h!5q$n!%N,'fO1LkW&5$5-8q``!E!%=,Eh<8M.U6=3a+3^Lr6Hk)B,;-
%<l`9a3iAeZ1bqPGBGrHHB3Uq4&R/Y_OqgSE?te7Kcq%q$Yr^+Tf:'\Ld#&1,U<F0+:Xcm)XI6;]q`l_d5[`sb:FCZ`)9G]r!.l_c
%LM3DK8d$,.6O%:V*@\%Rj65aq"S9u>Kp4'.,i'\Xl(%/_cj1UOUM5sMS8ED[8'V5nR]);\Bgm4VBEVpFX;#aJF_ANQ1fY]qarF9&
%)-O-XgD3`iiW8Ro2H)Jd3!WOd)FBsdN"D4!.6MgCciB5aU`@<l1^t=i6/Yo;83opHib0GT/ZKE,6VBaD'ci;%8STiJVn3&:^sY$-
%=t/^h<n:Q&-J5&h'iJb]d55C,d@Ej3V&W!$G:+6&Go@PuAK@o@d$^"BLq_8N#tVcB*m*Js2(@_q+XB]46%kmV!*$38R*j=hWANOH
%)DVkP[XaOB0U*VGQ:n"KZ4j'lL.:c:=psP.mK8HYdPIb(&F%kQ(.:4,Cp@N)Opi1rFpulX4$p6i:3u8/.Rkr2KShNHe6<X<qISB0
%SsFn;57tbeP^Yq)gKT8OF@.t0N$^$M7)72,A0=_T8;R[DiGiDE(en"$WA6ul?.s?2?[!#o"IAaLKp@hpi5O;Rg@H1O9C*6#PO]hk
%G7S?ip.1#I8)\Gu_&,mI8BEVWe3,:_0:V2U^=*]K_=L3N(q1?N@rRA<j#n=e8eU7:a_%p83oWiUK+LQ%OF`P2/]j-,pp.ic5WW(J
%,FF7PPXq'^[(8X!k(RNM[,qe>FRi=!0IiJFUL8B:3DU%f4Hg1F4c>8!1+6jj8Et1MN>P'o<0%HBi]\`92N<YL#0#',&.*L-RO1I3
%mC\;H:J3ri2N$:-))e>sLtPo>Uk9+t])d1jBn]M)E&8"A8ES-o,V';"a,oC<BV+RZ;HZAf\[6N$Rc[JI2>;Vn;"MWn(skAG1k_6U
%`BZtU`9oi2>$<)7"rp?)"ssu-R85<8E/Zr?/=8`pKK#^L3Z?iGg^&aRV-_mW0Zh[V!(9J?c*<QI+[h)/*SjPuo?lP)WArgL)DY,W
%6Ie1rWNP+M3#[TeBE[qRZ3mS4b`R!CXK>Q-D>.jAMudC2$m"]NZe8CC\YC+3]n]HQKntH8(?X:>ToOkf;]Qg'2N<Y@N1qdiPfEtC
%b]7LG;a"tm90bXWZJ=jWb"RsL[p+Z>FEBmVdkFs;G9\Hr6&6aCoRM6O4&W&Go8]Ss(lh'>%o$(qaYHB74g>2SXiG^OB\bfo9eHF5
%XT=@S!=L&_#;Hc&,dnX$UW%C4ZBRHOnMBPL-m[),T2JWs(bnBR/k/K+UrjSobqW8GjrHU/db>"`/2J?GhBei"FplM`6I.%^7K@b<
%@?e,c,kX-b7Kt.2]`O6'7NalBH8^bA0F!6MAKmgC<`A3g&a=IQWjh-kW!Y9hZ2FcPhh[:8j*I^6%RE.eTo;DPU*UOP8\i_1A>#XS
%O\.)C'9=@G`b9XO<*n^C]&WI>aRg&J[AP=D%VjJ:mL@TtY\@^Y&-G3i!,-No%kXoF8ct*NT`HJeg308)'9PA:#%AJh_&//cB2W:]
%XmWGOkb^2rZim11*_RRIemL!O!+L*_"6o#mAu"nCi\I>ii+Lau&G44^!@:TO-p358(SbOV;H]D4C+_;XjC:CK%Y2,/7V6hQM"Qlg
%6Hk`.o>*?ec+`53M$b[DE&8"A8B5+%V51s^nJJQ:N2Fa^<1+hB*a:]Z37[!hA"=]-LtOOmSO5]!fi_cZ[33h45`@&V-H2bt+uo*)
%!%C.lOV0^1ic,[&C@MGuct%ip/9=58'Bnkocu!V"('#du63rO$+p^V<8HQ&<AoMPdL;6L&EJUJaUcaGBLB8Se9cg9)7og\OL]]>,
%0LkYe2l+SW>2<\(q'5'qqEXFJi\`X-Kg`rP9SD57,3PWYm4u?mH"^oG<#T^4%2l+X8g]f=`q*`$(1J1s_&Smk]HL;+dHDW%A,DrO
%q_13qX:51%/cl%?S,brq2AX`gmIZFuUEsJD8\iZZA"\!-HqI7i@H9.R\JQp%ONP`d8TS='bubc!>Ko=(9Mo,)dahMOQk9R3ZJ-/C
%dHu#ggd`#h8g<2+g+cFb,d'WdW\BAoL+F.9W<t(Sk(oH6)`=M8=a2$ec*FRI,XAa$(+-7q84PVg>EY$_=%L:28(3QNZsnGU8VLU4
%0k@g3/LscBb5=eOCQ@cOb\7B^[glh`'Hb=#@kehKd1*KlEG3qu3)Ug9-G0DQhU?jMU;BcP**FsbP8.!$bRnuYPd1.cFB6ZlC=<:s
%]nl_WRkK<U]uEB"\tRuD**R*c/P!s9Ya+g2g,(ffM(r@tA)aS['?ih-'iM?]O`VDZnu&baA::+o567K;Ojo[g7?Q8=/;,:*ba.=b
%W=gWj_Odh2g57LQb#WpNNl$(I:,#.IiL*YJ8$.,sQT7qp:<(a?Ze>L(/Q%13$*I9Ycn\(HM@>MNm0Jr6%'t_T<(J;98(3QN3'@@9
%8VLU40k@g3/MC&FbPXp&aB3nZF1O(+;N;;3H4uFOc6FN$mkkm/d1'N[M@_A=O@fS7VBH$r8Jk9e'o(.HaDs"=?D`sRq4ZqrC+R+V
%`H%k&+QY=fHCY%>.;;E7&>Jn;$gHl0Z,4p^+&,^*M1D@8a?WA%HDF62T?#>E9LC%lLScPs<1+uq*Z<]c-'u@L5ba2K]o)lDkTE93
%2AX`g%Dc]&6aX?i.LnG,L('je4Wl%#*/2Fq"_4p@67OL,7,>3!fR?ESh1+"D6A-VgN-#btd^.eBoQ*M]dX.*FO_2(C6l\V(i+H!(
%kg?%97urW`kseG]7ZeE0dUPWO7OFEn^r%^^1%Ts,.hE>iBJ8ns?D>hDKar;DJg(1k7n#V1$;(%)ib05cOGm:,.]IA\/4X&$NTLVP
%8QBjh\mnKo%".&0:BI2t6(#B\]co2O+u(F615!L,%.dl6oD!"!7*:.d3V.f4KR?Ct_N<$10:+urACm'g)B-l:F4UU[0kX@]-")ko
%$qed3-&FX16AXJq/>T$[lA`hS9.Ha#J>6i"5`3`I;W\h@j(KR4Tb5L9b:BCZ1.TbuRXcT=go1*84]LX"@?cnAdO><\cd.]5D?m%-
%KkO>;;A:fA%2h](j\q<WL=0RF`F>pU9IML!6bR&>bWF[+YUeN7lK'H&ZW#eI#?jq(d2RssFEBm`n+^Rj6:qA#9g]-Mjlqt$.NB+_
%,7DM)W^9=C3MPqT$HV_UOk[a#T\an>L6)Ru:#-LM[$e=`Nc(e4YsZ]o]lp26#]F-8;"$J0.8f%P4H:s0UWEil=lr8d94Rog<k"NE
%+?C6&Lc2#Q/#8h>#A@>BT1OdU(hADr8jkdt'q@Q^T*fgRd*(o=.<DlS$"He6>UC*KA2K;5X[/(gat3TkW.tot6moRd&>H?W>"D.B
%e=j($PuK.X!CP=rJMafq;QPZ2itldRbnJ8fb:AhJ1.0JP0t&_*G&\V&(F28Qfo5:k$kR8],B"A'TJjYN>#HN/"<:-'#3lBVP=d;E
%'9=@G`b9XO<*n^C\dOuMMVNbs!2LhIKTP/ObX!WY[!@YdGprg&(&$%L$Df.YBGrXfN`%u;jri16kfuhl>TQpLTp1i\P3.V+G*,G$
%HU*c.7u0'nOia(;7,->7V:Q<Xc*36U.\oJJd55AV/T$Q5ad[Vs?$b<?bX5;D;Q@qQFcUR6-&E"rC^bjHW<f0@#m.%5&OLaOL3.N!
%r>n.XQKaWiUZ;Gll7W-8L+o87<>\1H6^EYXA;-7!F!T#pG%FoLY']\('^4I2h'to#Kf*j<f/WSoA2&3j"/IIj_p>df_uikG0d%*q
%35s+`'?;6#^kPO]PL`\IVPKLZGEZ\HJ7L;F6JDYIn!MH%Vao&JL30Yn.?4ka</HhEZ&+MALiteOPZ/JHbg;QsTR!hY8nAI6k-;Ad
%ELu\D63+r16\*Gm!J!oM&4.<D6TVe!D'qMJ;C7V2lqB2>;W?R]'NNdS*]o[FdIIX@]Z^r[c==3[nqbaG!K_=H#ba\TRnG7;TI%I:
%Nc%>k3'`BOPbN]%BuiP3NHh8C*?:,M`*!j'Q\Ui,.&CL0W-O]n6u/='>1EUDfl)Q-pZ#iIa;#k_g1<fF2l$kdLSf0ZfH]KDCg&n#
%;YE0p,q9mga,pO81g(tJb8a+JfN>`/Q%T9*b1\",)pQUVH6>W1f$'D4+AeP8LF.tJG,.6V/^OcRFB00=8h(eoO!>%PBX0rsQ8t]-
%]!O<>g^_UPZfqgs2FT]jR>kA5)GklP)/Q![J<U4Jbd6%o4V6:&O,2JNR?QC54`M<qFYI>mSZJ^XM!t,VFGr@8$%UN\#b_<GKM[^Q
%7-+Wn*g[u\leV^p=eR)CL8Gsnl%js@.<F)+paLD4m)8JBM@-2SbRcYPF$-aO=[Yl/cT;(Rm("1F9^,\!<rLh$NQClUN2/eX6>Qc&
%$kcM8O%E_oc"EcC9cG[>6cgi8EfUU--Zfem0Spgsc9HhUigD/B!2rR<R)c1SZ($e$.[3?:cno:+Sq`8iSZ%RD2kO5*%nfnNWA6ij
%*0]VtbVNJ2(P!n`7L3i<)-,bVUY[sc>I9/.]t67gW'Va"(n!htAErPE1/sD!EO&#[:):i?.l>\9&a:aGi@_W`.fe"0-geNM!C5Ip
%&@5:L>e>\TZ_9'VA2bN%aTL0fWW5Qn<rjUE@446m//P)'$7T-?Lmf\j+<9Rm3M6kXIE'4\3^nku.hh"c:k6KKqg')Y&F@g&BD+A,
%Lce+u7cJJtGLMnr@TZ2ZM,5"`@@S72V)+hEZS=!2dA@EsBR8T>gIM4td>c5%3Xf/b@3N(1Guhqh0F:16a"^HB3&ru9V5V`h4>*F9
%A25Ko/%H(=FLmDBSU?8f/L<`*N[AcmQO'B\NfTH)-m\m]e'7qfRA?Tg.OdN0Y2I_Ab<sH'Pk$Rse6JfH1t'PR"[L5?+GB#+D6=*E
%qCOC-8dL"EAMHB;W)+*-6dq-JPfF)$,o)Gsa3i&K=K4\ZPo5bIp?!_F36aUZOV][5juG_d:A1iiKqKQN]opNOOhJ3GUjNHKmK9l4
%5,k?pdAcO?`b7q7WhQ994\AGb7P+=F-NMS7$pr#^-F#"06\m?,Z&ju`W%1FZRP`PANg'dRk:?XqNak1LVCKpP./7>n'?ih-'iM?]
%O`Vu&-p]@kh%0rl`c[(]o83Nq/N)qh;</dK:15+_L)&bU0a7HAZ6S9Mj=E7lWUV?l6g>X$-\K=@Jnok2Uki'TJ1f*^\C&]bao(of
%b1RL&VJ'EKZn]*))[r54.EnVe%nDqbaFKOn`%Xg;GZ<ZXVq>uuE@b!bVG`X]J[0Qp/U:g/5bEcbMV\B,hrS=N3s1!k%0gpQ'tkC&
%_i\L[116pt0oY+8VIFF[4&1sVIj^7D.`t_J1+Q>T<'hjeHbY@IUEjPkMB`Zt^Z;7iJH6d+V%^$ROslM+!AE8d@<@grP7_A4_XV)d
%/<VKH;.X(,Y4_Zc9ni>?SH\$WRVE/pOL]ZEEn[JQ`?L+YHODOkk0]DZ\FrlLi>C3>$5UGVY0--s7isUo(GNWp[0[6`7S*i4@jtQ'
%!)QuG1]'$3OL;bk_+=9s"dAHV2Ncq8.,EgF8]n\^hSL)M+seD#Z<g^?Htd:5jgsrs=<\hV2FQ61SV\d9"[F+H$u:]a]dN(gV.DDr
%^e;.G(`<pX9O-]p4'jJ"7e/suABK44Fg(LA'kQ:cMg].`JDT.YX:=ftd_D\>CBq4s$m`7mXF`_D/=;A=R#BQ-rE'm`M82W"$dIm<
%7,F60+a1%'MOr5?,Rg@qclQ_&>2:AWoqZSi(pR=J"g_cJ_FR#88MpjKos84f\HNq.Bh^"XU5;8B8_IWaDEEA(DApVZB?]&'jQ=<J
%>R3t@o?bW"Pus-]^DOqY)]_TX;rqa:pAUeB$un>+dbQ2eA1oG?.fu8M>$oC'EXPb\Ph:?_$'S0O)k@Wh06plk^7u;O1K3qPSJ>8&
%8.]@GX42<D/rkg2TrnE-G&lMh07mSWSA)&@''4:ci8l*k.dRjHk1NKA7?\,fC<^mi69j5aif'`Kek;KFe+H[_:+\6%2V$`$:hl)$
%1M)_C)+j$5L.9>YZa.oG1LJkX,Q2EkbXijY&uiR9P7%S+L/DjM;mD$%qUnW84L'n8`hu:7(&7W@DS)Dk!UGJ`OjabQ$Skh<SNaU4
%cdm4!AnKKg!%]BO+?O^d)?olTLcdJpkQMmAJ2AO[k/0Il#;MGV4.Gm-`Y[eTb'(YN$]#4KTp)>`@d%>7e$5S$:5-@-cZUM"k<`9b
%$H"?Qm$N,BjZj_.Gi5]LU%ae+89*dJCIf("6DdnO<'dsjM^Wt=<\Jd&FW"_F?5B4sp,T9P@D+K)^89"L/]'^6->l'hLe$9i#<+LW
%&pYtFV('D,2\0I@c;U/$"Lk_j"!nFV=r9$T[?<3l>[`d34"ip7/Z;mQ;MC$3>,/na?DaDbOM"9?BZQuU1+Uf,4D0&WV[L_4'VP\'
%lni]oN]1`d#nu&.Cb$/6g=!oU\'E\SCk11clWrA8m5V<%p/k=<J=-'Hj[\:+bsW9)Ag:8d7hSC)hhmdAmqu!#f`RutfHr==([e,>
%_91IP2s0eYqf9n-P;dF+<NnQ4X>^7E"P=a6Gm^QZs2+UG8l]++Q'D4[,sop(AS6br)\6JM+N8d9qamgK7k&>phA/b$4gLI"-p):m
%On?jm>nlU;CU#+ji14@+lpepr@n_NmNb-?(N3-XWSL1'-Rb3>?rbZ,VP$R"a\2*,-s84eroqVKf+Oe7:@"DOQ>3!JoV--spe;D9B
%V.SPgri'l=\:7EB)nA^S'BsgHQJ?7m2k55cn<@Dn4%[VJmWtA##$%f1PD:c*"uFITHCfo;2"5<MK+cIB2G60qd3b/[L=ps!nSjQZ
%!i%\<Pe??6$C3,fFjA%Q7BkR<BB'uu_Rf%!?Pe"@[c!(*9)^\)%ZHVdCc8@DPHgZ0D"+7,\(2nK,VN@sBf?JZYEHS<CP-25ENGk"
%.20"q>ZUf=WVpPf';Y/jm@GK-[(NZb/2(p+Ot@kr;UYE(]T#MMDt,_5$Z9K66i9DNBucHlh8\fiRRU.gj2KV[QX&o79$8/5^+)8#
%j\n<Ulj1t]ejEdf($o"+O+L\A+1`Jl0]!iI-7SD,m(oK;;Kd*MK::B!:+Sp>hGP7Rf32>h4&FMs_QUn4c5D)Mde[a5"]8gH^37X"
%+M6C-FqNBY:(uf>V[d5C>@0*Z/9bZa8h+]I_]F(Q=Wm$mV`H?E*dOap)LLQ7Cmu-]K'\Y3-U"k$+8`>mgIh0a;otWDFc$cqKjK(_
%a7Z-qSu/cAcM6)$P'01E[E&8jRS*OK>Io!J;nJBlWNf4brMQXCcZ\Apj'[tm<2l"4=Mb=ubq+2A"ld']brSC2/6Pi<KcM<m=mdmF
%KmbF,)m")+HgU1paNUdi*^lF8je7tuFQ`H"OC5f\$_tTWKoe9aG;?LO.F1c2Xq+<:amL$BF9JGVC64=N^0NEjfq?p!.XWJJ^Zpnr
%\25N#?+bUu<*JD3\q4`*!"tY+2!60;,*hC)[Q=&pk0Q"Xp(uD4iFW[*3LNq--L;Th-h6MO3Q/0l'm?=em)mh8A8O-pB4/H!2e*LS
%9n^NUJ1U($lnZ*,6ja.O%4<UA/LefY?&S*BgY8g]kVg5d#WKgaXmDa$-#/Td6ZCebc@*85S+di1X%1^Bhg$.,+IKs!K;QMs3?0gi
%,4J$agieYbR&nt[nWI0NcLFcnLafU8bBZou-')bqg\G8oZCS%.4B;+;fI:?lchWaj'ZS]1AC",.&^IjrVoq)ngs+,=e[rQeA0^7;
%>Ba.:%'i&O#GTLb(9AAMf@Jif0"B`(SWfX!*VSOd]_#HW4'im;88D6dADg5EW.K4Q(O;CAE5@AWirU'$X=h;nH;i=8fiR9@1Js0j
%Qk?Y_KBInDf%ib`ekS:ID(OfF+YEAO%51snk*6G>8API![Y)8Ej0<^D>Ei_b>+I$'Qopjk(!4_0UbjB7PjRV8b73sj:9*p#Er;#4
%O3XjP.B6$8Q.I6B3SpLl`!`bb`E7$R1D\^NB/S>%=FP(%3:#s7,S%JWdB`.!3/U,Sp9F.!$gGr2fT$<.f5ekh0:V"S`d)C+@o]i"
%eqCBok@i--%\.b4[ZG6KA<0aG<[;6:3c[e_\"shuY/^Y-2Fb%+o#@)piRVc2Za]aNWg.dA'nn_/3t^mr%S>jj-n@Kn$TpA<:SB6U
%>A6iJfK%>&]5q>$o]\K.N+3'8K%MSa7u=oNk>&9$lC9KmX#e9PZQZ(7h6`sD]XuC6GO,BOnE^"jXQiMlja]nedimn>g&jn/]&kV/
%iY^Be?Hr`"X+#(qoqldLOg*$2:J%*Yc=p#9]B<0!5Neu\7KN@qa@-Cq7iNF?nD\TlLH[A3!=>A7\Zj&E%_9r@:PW3QUJH[#F"G3U
%k*_(3'm661&.9K4hI<T,,^,9Ze2\#W>o4qt009jh#]"\?@)X,KfFa+DiuXOR+8]ke&*Fne'T4sei`R+VE1Y'HAMtJAT(!5D=%+*/
%((Te@DL(L6dk*g^3A"^Hm+/J`_ppC7KTL&&9>@^a&6W[IKXH,BG^/\#k"1dgQuIh\f$&uHC^<K*\/%3%nsQWpQ'5Rs5,L-\&apBL
%]fAI!p,ulkb.Bo<g*NJh]Tkm)\Cj8n]\IcE-T0_*;;nr=HXKg+)dpP5%dq9VSXAo'Oj3g71F$[qgl[^VJ*t6'j6S1d(pOg"-Uo*"
%]D.0!'Qtdeh:pW?81P#$,`P.*`?+2&haUX0TYr.8Xe1hs*66o8SEjhRE&h9c]eUNK3nI)j:Q1IXc@+jW7_70)]gNoEG@"84@"Q^_
%$6(kmED]SQ>3Sq$kh=$=*ScKK;)pA:!jN]hMo[F>iE#<.oBDoL/>ShRp?WHQGduPM:(S3`fQH=c+;2^02;-r/KhnT'Zh!Xn/"K;G
%F!IpU8nJe0#^oH9hjZ9Q5=lFi5=pQE&rOZeLHG%K"3#)Pl^aBq5'2Qpp-aYId"T(!ClYD)%nDie,8M)@0VWP.7Qn#!!PF#b\2&On
%_r,-p"1b/,nmPA=/r*MM`TKTnG/Y-9Q!MLNnO-5cL"TWbYN@=<XAi%gBXi+&=*%sKHSnmUTXg49>MnKkY$BP3/$;L!MMpp#H7Kp=
%\[Xi1ME2pJ'jHqs/"]'2V,el]XW;`&bfWQ;<E`Dr"&>"c=DqcGT8O)[b!cj@>npG7,Oi/LY0t*ER9+<,Y(gpB=I"-a0=fNW?G2Ws
%^b.%FddGX=<EjHSOFs?&VX/\:Xo=3k>ZLJEJeG03adujEA_m9s!b*rk/u:VD[#/Y+*/Jm.\gZu%o?:M*MP?gPiLo*XoO7\2.!@lH
%b'YsE;1?2Wl$1W,JTCEYS>>>L:_kYaaa!qhm_jAPYMuPB`4A:pT^'WOA?L6AiPMapn!tp"b+@r[03]%oiOYqe78!-tB\D1H=8,\b
%@6#Y"=$;gs=AB+3Z7"h?nig@M?ocEkPru<IlW$*5p&uVWI=o"KYMr->G9E5)F#?`rGr'N5Sh#+B`s&X*M4ImQnK`b329t$,b8!h7
%'Rjk>K3lBXm4kg&aee@7i[LjO%]WFUc,X!Rbu<;P[?5u@ojll*=7jFq>h,%;9=H3C3W!!ZmBa%\.CN4`c9I6RKOuUW7X+4]#pR5]
%+BQ=_UWA!EH]i@pK?oBi[W>^#6S>HrMEJb5-OC0kON)pDQc,6@,_!g>HQFel+-eVVZ>sG?S!fm>hb+Gm>lMJ&_^<t"G_JlCn*g[R
%p^"tpCau@P\^nl&2AN(1k$gHVYXt,CXd=EZV+kjEgCVZ%H[*M(=a;_Jp/K]qDQ6qbaEV^:qPL($\D9@8PrQmkTs/0eY.uJ<)]Zu&
%EoQ1mim;Ydf]LjmKp+&j5fkA-.r^Y_9.K`ob:@RqJORRPG59dU9o!*6<)2IdPqual"TNS+'42_u78=WXb++(.n!k;o;CX);3?)&]
%PQ]`\b(Jc?3*E`-.rd&8YiZ`^"YN4.nn5,@.I]]&SL*oCRjt6?F).7].E!O_9a5'bRretB=5(UW;-2JI.u@MF;jbX%oatt9f4=ea
%/o0I2]rc%43b@bpRV]Bg.qu;W>Had#SA\4VOn.e+=DM!i`$J'ZY,QI;+Os%6=4NNBrG8Bf4n81pRWM$QPr!FVgJp)`e`Tph)/ku0
%RHuqaX(]rE!3Vik>a^8,;YiT=RM)fu.19<N%Kh?8VNQ/lWh*He;tV+S.ihX"W[ClsPa;0hR0'RhM6!/ZP,<8'h\A>cOsXDKj!pL\
%?llha/6C4u9'ag,B1df53PV(5R,.],<ALDe$?;td?6rNN?>&\nc`:[;,!E]0.9tBJ0RM>D]S]u\P:0Xt\HP]Y.Dfhso#YC1#PQB4
%K)2<;V3&c70,N1oQ*^=.$CON6OQ=4BJm,$j^G*,[cEC]_'YQQ)E:95o`5GlVX(*V$G:2?Ml2h^(KW27)g[gN"LoGbi+7XJ=YDB1=
%.(JkuYDfGa2o#_U=35"IG?9@2j]J[MW=fKi%%+)+1.cgFM-sC/Wal4El3bgI]3;((\rrg[YEhOUI)Xa&M7B8krTof/P]Ej3XU/($
%kfC^rA1G.*/kbO<?!PgLb@,3K=377*5aTBt/ugG8W@"V-AFZe]mT+=)%O8hEUO73Pk,lhagQ?Ubr5'cL1",#r*:WE&%o4!_T)'<I
%Y4$aufXhta7<&M^T2#AsJb;k%!!!,"[ge]F[=?[o<.">N3t7:+Xud3!?1,S>9!)-!\Kt^+#;09BnB/&BB1C[g>cmFb'1Ce-75ge,
%%LG,WEd)m\!EQ;.A\slfRhA8.7-meQmO3VmgKc/WgV*?A/9f6I$"`PI[ghAC7173RY&jXr$iA/a(Ztl[s,]jrXa3\"JI70t#"oL&
%g\=QJO@rL@lRI/tEHWRJbFDpAkmAAH:<$=m\C:gdH+<bZVaar-`a*!46k,dB\TCT_Od)=;&Xu.'rp2)>1QYHLg/'u`G*Z0.O&biR
%^9cJc,lk3WFtKlJIW8qggCDH86dD/IeI.(&2?0OZG*eqe>ifPGGih1O-i.?hCkJmJd\R?#n4HB;\hYu.,?j1BG#p6>kt>)UbrJPZ
%WGib4[G`@n9't;kbGI<RannJ;i/"n$oIbE)bK4%E=+q,[_F7b#-!$_kPh8n-i2b&_;\377mS_Uoj6#pdMN<)9P3HaQ/jF6GfeQXg
%7*^q),7mkcEpfH$4p%_[\R>-qR8`tER?'TIT8N,pLBI('LNTTP5m9XNn:3Hb3IB&CT8OqH'-uU+\-l=q&Dd]K5+7eH>'lCU-03_T
%\LfnHm-CJUT;Li%A`KMJn%_Mu`2eD:3ur;\qBbKJ8?O8+;jV>QV)'-g@W$BfSpE%'.m$MWfAbk?=u,pA_P=`QaHY@h9@C+QV[\aZ
%r+*o09Z'8Eic8/fA_Mk'>Z!SDS@*O*0l4#ciM\Qa\]aPhB4<0&?*Ite=ZqrUjHQ5aHg9J<7X!tTW,/"NVghrb&6Eq!8`eZ8if:3Z
%-mC0Q7oEC5X)56qa#kfKUc:&K;'3hRXrN`0/7jjK\bO_2d-'ndhoW]C)IMcLOW7RhcE"N4FUnH,R6!io=iJ0t0#>MqmKfB$;0-'h
%&Sk^QlZJ!A*;&Bi_VVq'fUGqMHh5CjUb&7U`63aniX782_3)Bim0d"OCGPtaqCS#M)+`j-<5HPeS6iFD?sF&5W#URcIPD@f_`C;a
%-bE"j7O$Ik0UH:<E9<8NR_%"Bopo@Q0ObVSHPhIkL!/>ajC,t^F7PE.<a>2L19W9,r*7N0ERNGb%Y[Igg;K]0k.B-:5)aN=6W$Gq
%MK4h164@AL)mVip;MQ6T\D3d\]QC\O;7R%U-H>-Wp&1jQ]$4U#,0fTi5Q"UAjo$1q28qdZN2Kp*AVL+Za*nSs.;tP:2sLM)1].2L
%D1;\Cg(o(4puu7Ue5H/.(VW2.[XUbKJ)S.dn6\\As,WV%?uZ,LrAMBG_EJ71nmumn)>(Nu]LW[5E=M:JQ=)<)kC"JoW9k\djrDbf
%*;BL+qesYL>2,\KrnG[NW7a)BXe<*e+EjsIBDa"k&.l8JcL8M"I#MV.1!3DjYC\u;"cqZ<dL["%+(;q_-t5Wk$NNa^$M[W"=T=#g
%66cb`FGgu>Um_36Q12D:9*$`CnYmNk91'_=()Lc`s.lgM5Pb8eIH[k9^]10bJ(o\9W@][PhS,E4o+A\>)Df`c!P@UoI\56L@6;65
%QQK#XK79_Q?c":-pdL(QLhk2D?Y&*.QFf8jW5Bk/d394<X<P5\6H5?dXuT*T>0^(<b&cl`MMh%`M?:/hIu@Ljbj'65OYjb%,P<fN
%Jhf7d[o'fCL?D*iU(<F&SePTAB0k8n#h(CUM%Sm=c3:f!LS<A`RKG^`n=>^ZWJ9GU1dCMPrZ&=Vrf<GA=K%FaZHcO>UUK:aarJrt
%:IZ(Qb9I>*5UMBaHHdD71B,hK\<_-Nfjd>A(p'Qkc83Kb_;FcIg<(=lX:f0.-!8u&n8fk?Z.+VG-]h>#s0]em.Vn@ON:frR79<R"
%f)AQ%CHJ:E@DIB;Mfs4)PksgbV2\hd`8)$c_'7.Kg<QH=F0KL'L0qG`;n\4%nQ_`&rH#"Y]_s%,0_K@eDG0-lLt)s[E\=ZW(KS"^
%q;8`okNR-:lCOouYH@6R!bY0%HKh;=#tM7DY4*M6YfMnM$NUC4S[cTHr/KfbiJ!$p(,()@.95T$X4/]W/:s7@@G<sS^Po0J]1u)\
%\Nnbmmc)dWN?U"8+O][114$>;L;UhaB%s-&37/gFRcE^T$Zje1k2$,^d1S[1hn7&A^Z*9GUkC)f9I3-tpXZf%O6b%D.uj)+eaH3/
%ULANIUUH&a"bC#XaU5FX>M5L+qno2_6F5A/FCqG_UM1Ze(Me4,o,dns+u@(#iho$2CG&T-F1Icd?G!`p!d9D/Ca!0nXQBOfpc#d!
%NfSLX.N&&87sL&*3$1Al$l;I\L-aPDCH#N4/kNa6p$*jUr:PE^35[@9s7\`;cM6OFr;Pa&NcV2UQ+Q8C#<4TdMlLXqs4_seel;hR
%-Dj-qpRg]PEm(]%;Xe$kr+o*@:e?\:9qLCC=F[HjiqS#4UTS(+AHAYA1M!^(k&fA(f^&@A3FM@VJo-5o'8rE7/:Q/2q^qh`ln]!&
%B9#P%cB!mJYkW^c5+e;GqiBJMZENdON,b]Us!tN<c!_j6!cs4-fmh""LFrNZ[a!o/P7Y/L"W_%XI%eda]O`^:#WjucrY8P@\r<8*
%_2jTU;SU'Sr<J:ec?&tim9!59-P31t4t,nXSYr>+.0,gs%h-_L!D$Nf+nD'sTB>c/&1%/S->r3L<9lTfGue!\>bZ%crn5>_frp@?
%3V]P$+Kftg>nfoY5q.4*dX4EM^04,6Wd)ZY&3P2(LnkR'!@6",4<[*@+m^S9o-dO:%%LrAGU#W<=\96Z't*[.@o6oq9FKT-_36OP
%/'\c%*eJ-d"lVVG?p#+I7H,H>:uE:fV2kgA9;*L8/U`#!7?Qeg.=RP?)WF7g;pE^;pD6'ERV3E>^*XgC\L*=\$dB9uk7\6"d9tQL
%Zpa&F'_I3!#ViUPL(n!Ke'UTp.aO)Z0usNK3)=!Zp+4+O=WFGtT0H@Z&u(4.1KE*&9cj3D1N\WEXgh2]rAq:/$f*Lf+[CS!:!]`A
%;$$mH4;0;[-@kdo[^3b+Y=GI7d(qIWp4AaqBqunTX>I15Q5ZK,r=qdQgW.Y?+q3V;,V40_JB[LmRK,l&**3M&m9nbg+W>b@cD)Xn
%<N.h9LYp13;I:o(6s8eJc4I,8L1s.34CX9B>A=4I&Z9p!OiNO_A;0N+!/SF/Hl;1VXB76.6gXFG87K.rCMa'K)0LpoUH?dLUV"%S
%9ojr@MMIH#pE68=0[L/J,,TV+#=eR=hZ1LeMP5l'7A<!W*l2/RO9@cKD5J92j2*5.';ASa.MBFD<0ZX%;G`Fo0MbW=VeK`Y?DJ!5
%Q:\cEl"cR\]AesE\s\_=^EThF??cg\fcqc%c!#[`*f!CG+D*(BR7M`_quU')dB].*7ZMDYf>:%_P'6B9HMm;cmUl!e&TNbPa-)"p
%;VbWOI\FC-"&b1s#J_=tQ=ct=^au?oCHe/CO;r)%2G?_X8<G8NRk`VN%HqU#PSl;V1GP1L<eUc5Q;GS8&u)3paafO(@N"a[,Q.X)
%-Pf%UKsm`Q&CPO81t4e>(P;\n>6qrJM@=d!BL>Fbf0a$i'q(I<H!],D+I9m'*57^K+X"<SjMBE`P5p-;1J/`@[ei&0-gD#*VNE_/
%1%dH*8B#2);hUFs;Thi'&lk4Uf>I72)=t+*";\8q6aK`N`/bi#ab(ZQ,=mucm21=.%9$Ds%`9nH#eobrQ6b=^%j8(WADBu`m97Ns
%=;ZibKPm/',_LYaR!h*jd0@T@O>KhE/I35^[Y?t5HndaV2BW-Z2'aU`h%cV*d\/eoSQG%8(p=AhSf#3NWc^qMlI3fF@f1[g*Z$l5
%`#F@8ac"q>n;X@Ld>#G%:sT2-e4;[6!H&--oF^^AT)^;/*IS&&2";bPP>2F9UQ>/>$688iDO7:q?[e`qF!="jqZ+`Z*4l93H0,+(
%>uX4;L_Z&KEKor3Fm-^G$t2"Cnoe+d%(J+PMs`l%_[Y'k"9#r)?u=950u/>E_Yj'\&X!hp\,d_.-k[SuNc#Y+_h#Ns8.ZBt@F?5R
%oc\Tm5"+f@$f%[C;YF=sNZiX-EPW*D>d+sjf3k09pg$,^)R!)e5f1f#^hk0LpC;jr&q$A/jELe=JnEI@<(=F!N(98T1W/\0VKuk<
%0h4c(d[HS4!N)EZ5<bC)@m23-M'[Us^,iOcS9CWR&CN7;,d&f5j^`lD"4XBs!54Y3#/FHXDO_7D0"2co!iSMs&J$"-@K\rb5E:np
%@MO60Sm;r4c=.[Cr'6'gGdthG&43[]gisJ<&L>M6IN4"pW`S.=#U/,H)d`d/+G;#gGk!*j65V['=cMGaX;W^S6oaWW+Y'3]G!Q02
%Kh?bEn:-]mU*p9J16+307R7<=Z<.>X'Epd5K;U)#5Dk%(U6ONWC_27R.16e>@1\)'E9oD-$A)a`!4LQ-D%M@cMEEj*MY/@3F'j%e
%jEsp-:kHS5$Qfh%(o\HP'SI#DD%p]Y+9X%.p-b2Z<[9G[7C'i5#M6Nu-44cY(Bo(<'2'GN@d_mf)[M#Z(Agr8_Bb^@EU8:=31!qg
%KFg2Ep;<P*#lG01iM-^$p4Z9L4]X!uL&rS)iJT!95nf("&.X=4bR9%)+@Qs(]T"n@&7/c(A@:rce&R,$:2:XM\\@TqFS@dV[Z^f:
%FtB._4KpBI#I/91#BXr^!$pHV+;n?_lc('#^*rEi5mT$9<3IF%K4r7r*>jp,7=[rn\1i`A$q-5d2&$8BHq'UI@1YbG:,SCm#a\"[
%,^GBe+G;#>(Z#9fau[>JntMii4rOQs\R!-./IeqbAt@[!#a]j:Qp?^a+G;"s2A+H<#QW+l=4nE=!88:2"1f<t!)aq*&=$u9"WM!<
%^^[=>0aUu9D6J*CJq,%>be-W.*Ag'8Mh,>`5tYC8BLs@16FbfCb[A+Ujbj8"/IJ:s!#tkrQj\?_beu[JYgF$$4pZ^&>L+c<qk2K#
%Cefgr+,#a;o>];70&4g+KR#QL\BjA#'fu')]dQK^@hhp\K1a?m_q51pYc>sL7A#2T3\#?Y%rHKa0\^3*l@sV?1nbE\P_idakX3-:
%X)[2fJ3;CUNZt(q@RCV9aK)ecrOSqIoKlcfo"pe(ZZ2n?SIKu=SmQB(-V6j7"%!kVba=;TIs@HXSuU6oa#eS.o%+;>T@3_XKQ%Mh
%c_0+4=7utn!#Jb]K@<'&q\A1%ijU4Qi":Q.JrggS5R4!u&Ml@<3oIFW"SY[1qLpa,OSf]B(rq`d8,01Q-?pK/1`9mJTgoQB=:1"K
%'LG<A,WURT!(iDo&CZ_aci?cI'iIY'*`j1*=AIk675d4=S0=]#km7e-H6Ur&eA=m]:"I2S/-b?@gZEf(+gJC!A4(]K\GDslREY^;
%4[KH%K0tHSV0nrS7!V$)^LZeS9>(`sbENbhj1o]aa4Gb,#Z0pn!cA6.WQiPX%&E*K]:SG+;dRG'&:SCYnjXD8&Rhulj.V5H+W/f"
%KJ3DT8l$B:8^Ar[Nh1bIDDY"7REUoijE;)6YIlX#,Q'De^k#X9G,a_dop;HAI"0E3(a6++29eB%OZ@18Z1]>',m#46*1rCc>pU`c
%+0\[g4&Y&GA"9)V:f:hATb'HrcR9q^L57E8;_d,4Pd[8gL^6]F1h[8YR-"\'LWCYURF_lN_O"_Q?P+RSq_NoXi7/(\kQI]#!!@Cf
%Qij=$2?]2lN!U3*CGG#[455?.1MpEq)Y.4T4"1/3,ag#1ee_u9=3#qQXaQl1*069I^i6*!IBljgRso@<bb.a0F=_LcbVPV*Vu$;l
%0aS]UladZ0/lPM`TVIk\O"t,&#_IlL*V:$IIBm,AUDnlJT8X>X&,@Je2lR$:a'4\:+)8#6Gsr/;(c0Re0J]FXK%e1g@#tuIS6Np6
%2Gk#R;,T*+otIB48RgFNUko:RG9I*2eW?LrKn`FL"g=^o@oG.VJ&N5mM+B%SQKB*[<(;Bt_T@e'?^g?tV4d)r[$Msh[%q6'EkJuc
%gL[`hi1W-%&Q:c5TVrn+`0(U=nQo^&&;65:#gqTL^1oCKL$d;*?g`I5!u/"(<`J.>kNG:1qWLet<51.AZ_q(XY*P#s=_c5iUHHq;
%GtJu*XKCPrF4QV7[.'23"d<UdFCBbJOjNL$.(:R0PZC5?&jjo$g4fSM1K"]1A#<*9&Z,2oMfQV/S.tg%MsBH0%gj1GI12Y`8/<Yj
%-Y.qF5\uHfnZWoF2gD0$d#hdTV^uf,_Ags!i)(c8?tMuYrg)"9b4%5[+43Y`8^J3p*lqn>MSMs=SeU=1*mem<!6BoACan^%9//N*
%#RD:DTG'X!NCF'S31`0,PiD`M*d-u'$nt\-h8"]oUj)rT:WYrI4>X=$$>8lH(0!cL;&\aH),mnmb9<4\Q!'@0&I=e</5.IT5uE>J
%8*;T$C/Bs/=`HPE&a0Lp9]WV>ZDB@EbhTNjLl@5DfniBA!Kh$+([t-]A/4`n-V.=7R=gn+1in5qn8LD8YLLKJ8k6D2DPVP'm-mH$
%<X?jI-aaH96(*CHe2TUVZ'>JR&uJr3k[#EPBte?IVXVZ$.#DZnN$k#K0R[9O;petb,h:4S4#W$(a-/BnQt-[^n@_#jZ#4h\BAGSm
%2?[R5bkocVlchuM>$?B\&@f@s%.MNE+B2e9LCh&bK%;t7el8&49RMZ$%71a0>&)2oO;*[`CA]i7`t2EE1M@t.1ffi1\kKrmK"S8P
%#4Q6<2LHtJU;XAMZ_B1g7u5GSj,/k<]a7,IY#fP!p;Y<Kb%]>6U#JU=GmjgrASi>4@PMkVM\ig'Ss)U/3?V$^>ZV'M0`oPbE<1CK
%?tQo"Jhkrg%CiWLW8%R$"g'e]rA3.b^eSlT5ud(@S)aCsBHSLqf6EEJg)AA=-1cf$>AI1TXXPBf&fbEHP_Br)B'-L8Vp\OgZOS]%
%65_nmXbeeS682ur3KJu8K&Q5+jkRtH\\h1BF4@)1*-N\(,#EmD_bNh;0P&'B3$j7\D?iFKLtlDd"-l#(///s9X:;D3M?P_ooWbhf
%I#Q/a7G:EZ,U74?+Gi;&b^h*8<s(/ds8V)]A_2ss#jr/c+7;Tk-,\=sQF:9."p?2;Z8WK`68kKlEM_=Xhrh3c<D?AS'uN=\\h0Kk
%%]@G6lK5=X`Y=oqR"n>&_iArj`)>r(5-5@Z4=iuNGFC7H7Sc/f@GGBMDMsrY<\npB=j<3j/U-pDE4bV6^=1s[RtHoj48\gp2H-oI
%4+i67//YFR42[n:$H*nO.!LDp*Eqk>I6YC"M+9Zp\J'U8KQ<t/Y9)W,g^.K]Ei6X&DXhbF^8O[giBI0.l2/+2M\[c?STfu-1>OhC
%@R!g&MTsYoihb-BV`Up)Z=E=Sm!Q$RU#:caEeK#lVUQ1bSsXeY(HaE6%kW$\3P;-Ffjb+g_-4/o]Bea#07C'T5"/u4MJ'FudZWe#
%C4*8HfnVZVGELBG-1R3i1/]?Bm]C+SSCC)1IB+,i>g0nE/bc:`WKD5<Ff8mGdbYEnK#LB0)Hrlg%:P^\&S9)4PAf.[B/SKnq\d1a
%U`d!jGZ7HjdHiq9Ve"<;b+V:52;M.e`]$pC<N&Re5ZT+!WW"rZOWS>VTWCVc/c3otX-$_)mO'$aV5I3U2c_.lU>s\Kfia:K0@dgr
%eT?_O"NG3Qn>0BsNO,'k1t&2$VAl[=/X/5a(1(c7#33(f)fOb6mQbQ`[Nh7LS?ZaafGTSZ)_J*mn7'Y&*]Y,<kn0rF:bJLk`b`4\
%pXhO5OeP<Z('YfMKK#71N"J(Xksd7s4111Q[[L&-Tf1`$e`K,6`-=*JNi]+(Zg<,+LiXNGP^4smNSO':!kH^YqdIu2CVf0LBildj
%Ha2\`gmNlHrsmf=Cue'$m']SL\WI2`q?@NZ2c>X9(;Ioo\g>tWT`7]1q+!Zg#inIPfQ$/Pi(%E72g'-SS4gq_'Hkk*mm(c$*]Aqi
%NSK2tC#h`7q9gs#aGjFr$9;WUEjoB4"hTml8]ep(NRTl46eaT4dCfNOl%ZD]EVC6j9Xj6ZoK[?)qgcq/"'KgGU!2)*3GMTQ'--OR
%WOj(bOV_:V>ri.RV".QU>+FN,;=\qVE5[SYH05S`\.pHQ31r%AlG[/@Ubrgp/]HE\bE4Zq>rp>%F/7O!flAGs7kI;:$-ubZ+Rg@:
%JGlKlOlqO)2kqD1F2Y2WVWS(O"uA]+q/tN9e82a[>',hFc-_SFP;:F)AAOFgnBQ)cmt`S)b&_Zi900O$`j4<Y=slAe;Ph7h6q8`h
%aZd(NU*D2SSoqmXd1LRR(+7cb=*/(@UcNNR.Gq^6gbGFUm[`Xabh[+g44TJVQMmZd$Y3q2I-4I!\),aHSa+9U?PW_Le^=&7dk1pV
%&K`X;5."6/=cuR-DFo-Jb&atUDg.,ABr!dfNn,o)W/`\rD-7URZ[0mb:c.srDp$r161;t9EnHp`3.">AFd=Wb'hXJQAuSd+`)DgH
%+]_B]]&cR8f?);f2a33j!<THD#,CT`Pf&*tn$^IjB)]Lt<#fs47&cAU>+"[8_l!)"4Di\f/*8uB8t<T'T(CU9b.b*)WNr/:ElTAn
%^-]Rcp^(5]-)&?C`]+b4f]9*FPT)4',&(eND;T;^j;Q%Q>B4T[Ot>"%]=GVaAdK[;piC;@!Z3N7TV>;t"r],EF&(\;8TRZ#46onp
%4Z2SN\ma?m?OGHGR:R?D1Hlh<<OXHjS;ik89m,seLelbgY4(T>Rk2J#PulXu>+YB<h(;,+:14?N-?5U'8A-N[8"FV1S[rS&PrX<W
%3A%1N_AJ%01WbSVn?iScA'7I._p=_ihGQ;T??(I]Z@mt!c+i3L_5+L/E"-rlBp&2*<B,=3)XEV&iu7*;($reBd^n:<L36*<J8G\;
%),$Jir,)Ia:Ab4G:J*/u%U,2MQ%LBK`8QZ)a7<j%9,T@&Tt$N^n8:UCbQU>*btZ'ME=.FdTSnN/_J_0#\3:*[G,%Q3220>I]%&r+
%:U$@!F`WTg'<ZG]]#hGZqc#N3qk^NhQB_7aT7'4;=5MED2O=r.PFX)N_Zoo:p@]$oA9I3CVN]d-+6.R_+2$KM:;I`b?9Z-)rCH&L
%D0EO<dW\CY1sU%;-G,nCQK8CL)uJ!Gdup8p-:]ko#<n*AdsAah('_KsFOl4OReMTd5!:@#J$MhAMl41V?[gqi7FH2;;suk.kIiSk
%jT>`m/FK9k<<)snma&@Hr1QD!_bSS'H>`a53L!OiLkVo<O*b/,)<^ro=1VPkWiPl@$b)4=Wd][L7i!+q=$0l]^\mu(cON#<2iD_A
%X'gacE;ee-R=8":@f(Un\Fpm/?l@[hf6f_`@_3RXR+fqC[**a+0.fQ'i_gP*#KtI(_Am4obL!EBBs;:hg?iGiDHbmUhBgG,6VD7Q
%O22m0S!Kc(0g?1#6b@,_ca:W632mh`BGoP"iSeU>(I.?T8t)?(QD%U?VY<U(fZrZ@O#JZZp$Y(S+#VXP^t!.U^VX^3CffKfoPL4m
%MO)mi\Cd^\'VWQ*foQ)!^DcOE]BY8'iPfEU`f&)Pqp<^Vf\U\W*XN=Y:-8Be0/,"cT\oc7F^Q`K<E.iu2K?QcfVn.(PHrLDTH8YB
%/IWSEK;5ZuCso%SUT0d'B$`OKc0CV7Y,buGPg5tZmXu'u;Rt0,`:ZLX<SB?RgalC1IJ*aa^E8r9ZQGQGlrcP&5!#F0*$;>YU7&8X
%g6\tsfcFg)Ae/QtnpjcE`K-IfY/FAf@JTP-)B4.rTrlioKq/%=a.0&);60LlTfSN%'ST3X'i;EY]nsTP1+H6TnWul\0g?C;aHf)r
%MRk*1(PZN>1mBD(VU\e+QhZW?NWoq?C8aF1Mom;VO^ccmmjZgWV/&W55mn#L,8nX"'S`r)LMMiFLkGhN/joc7OW[=&XZDd\J^d6;
%\:a.=I@L9p+)">F3=cH;&/tq=HVi[*29V\.'a4K^MR%^akQep988/>-5Z\>Hh?`5BTJr#\Yn7C'eOD7J<#^B$>L5im(*_6tFQQJ<
%6s&??_78b8]7);r7d;HJ;PB(<5tG5fU*1jT"iV&%We=VJK,=pe6D/m$oh$#.L1&(4d:$^C5_!i^j\VTgZB+ju'fo3R$rK/8l@laD
%9p#%$%LVhoTZg/Z&;ZrF%E-fN-jF-1X,mC6/fUWP>kaN#V@]Jsr945B%Z$ptWMu[#4ZA8#*r[S;@m-J;m%UTna.or@b0Er`oe\C*
%W(fX*":DHtU+q"t6F8B16FGM\U)_Oe4]gTH=1>%fmKo.a8EcXAkCq:NWLCO4i]SI^$b>-cQir*n<WWX.T!B,/)]6.BPRfr`@LJJ1
%#nm/2V(6h4q]#LWM^EI$AX]LDJ-@/%SL]`$IZ2=@a,7e/PPJP`/NO=19gcmWrfAM4i!d"3\5\330H<mS#]rchB$l0^BqoC2$[L7I
%TjTE!<A7F?`lXXoH28l31!FVcc#Y%!MhYInq4a$A/\7C:KaCT$e]ZLiI<A0dX.m4]$a4TA9N27?pAcCWab<b+f4@L]A+>9^&D-Xc
%,#!N;D:P-0cr%Rbe;=Mm)S&bEn:I)Bj:%_+8^YGV%epjYGp/^aKhA?q3XMP[,*jU61nG(q;q)UmO''=L#mkjLC8A]T@gU4O1ZE(H
%:]fptcik91!2h"D5o<Ru8-rJ/%&PFtL6)d8EsTro+d908EbSgtG:)=,&.mhuN"WTs5.Jdb:>og!1m!Ca.90]JR<hjLfQ/s!NNqs>
%,(<fcaH.'H)!tYS5W^-n76#1Srt)D=KbH1(,ifO3kB#(i/ae@+&.19&UdT&Z_*Oa@9V*FY.4'Ydft[OIK,hq\ic2'[,WLbT,4=`7
%OmK$jSZh>]\l3S[p3E1dMh*"]^*8=O3fPCUAU/.EnnrSIV7:#eLa5+b6joN!,E7<EnE=Uu,HX"@)Efo6CB".cWf4W*+.EcHel7ec
%8?4&8H=Fi'.bp-Rp5)6ZDG3P*0fdZu+!rkBYan<SRIE$c"!FgQ.pNs]$VI8`UG"]:F]b$PlEGZD@p.l9Qc:VPjsjG)O0#m^Sr7@\
%\Oa>VYk@,5(N0Wq@tf]n44or-:P,#9bt-*pqS:<5+!M7P5Vo?A)UY\`nk*Ku-RVN$CfPjZ);.ji&s4O"2QrdT$&/onf&RZf4Su0&
%g?35]$.N)p1jEbfO[Z6Zn,[`BLf0`D,)efoPedi-.u]8=%2h!&f-Egn"`B7F$]*I<%+*gui`2p=(0WiOoC,PB@n):),"<YPXJ61[
%!TAG\m8kbdN-MajWkY*:k:,Up8Q!LHFX;3R+a-T?@YE[a,A4sZc$5iW>!q)*BYS7p%mGLH/m1OdOVlOIj;s;&"DNC?`Mb%6Gn.3_
%abFI1B55^@_5c35oN4!%,,)?X6-Q"B9)@+*DY_%/lBjQsH0rM9qW;$Ea=4a?f5Mc#@oQirfF5q0+n2k3oeiL%nsrHeel@CVYSn+s
%2.?6Za]p4O-;8nCZ`/IR]_?,I?osc'1C=i;:D1ZuRakJ`_cjo:!7D6LAOAA=3*oW*7h0[>`>aM(bs2d/Afn5$"),J0i_dR;?=A4g
%5T9_)E'%D?DO2*IJ[P]!nco0h0u5ab'k,keNi;>o)dn#b?lOb'\:#KL)1['"mC]1%Ru#c#Af$PfhZL;MlO*WM@->*J-muA`Gcp8E
%+YU's@e2LQr?#&cGAnpm0-iZP^Q.+KU]1@>YLl#$1/s;s+Es8n4"mNqVcDRUd<3HAa0,KjNg.;1d[ll?(>pN9YBedp@Ppg[Y)hHA
%f:HXP#[Z[3Y6j1b!9"#d4,!&Z)*E9G!7)7p4]P,`<s2%nb(Su?C'LQ=)9t,d6/*U>*)/\?LOEVm?pDI'N9LQ1X:uGF_S4CV.R`Ji
%K_Er8`+/W7F?Dj9J?_9]OBCBF@G%-'3"1fQi2m[Z!ic:6[K.2C>M=nE/Cp'h@%L#Ma>O]E%BTZ:^(DJe*&#@b\X:GNj;BZ&J$j6,
%;LG,<kUSoaF\/fK$SY\o`:s@D9-+Z\KS'h?o8'RZkqGV0THF6cMc.LFh:hp9O$(90W]>aaF0/UY#(`s15Ym'HXoVjcAuJh/lB[M=
%+5tbM&?JoEn7GL+/M[rC0mppjMLY]b=smuPrNJY)ogOnf3iudX=0!eP=u""=L/l-"$.+R0,/A?I,IHkh[-eSVAhakDlIcG0l[e=M
%T[i@SKN?DE'3r3b7r1>>d/_c3<#+VC:=+;.,IAZ`6$0f1-Nd_<2CH3_3C880$;A0g?7X$%?GlubH;]G&HQ<L2,2Woa[EU7Qf8`uI
%]J^H:\eeJL3l%ltm9&*S]E;u>#Od2t#-n6=D9*CmELR4*!8RRI<^b[HWWKtQ84!As)sT*T?[?GIr*&Z,#F"se=-8=N*1HZF+&.N[
%&n'=WY3+st!-(A8**D!D1C9_a+Vk7r[fger=D_cgig*%bDJ@n<AVA%20)8`1"rdQL-\7Yt2W)Mt1<2lB[BAl?D9JP""F5'cl##B]
%1\mBp;q#-uHZ'R]2FQ97eX-R8]:b*$ape98M"=q#9Zcag4=hcMqm)iWUPCR4"9U\0&.Eda`i!8M_s1H^e`;F(":#enel47\GqL1=
%R=bfiHd[:dR"8-FPO!OuA)=PV'f<bJZZ!<\c03MH<9*[C%0Fap\2f^`VdMjKdL\J7I?2Vpa*Zs26p@.7HRt;?\Or/`Z?>UG2Coud
%aOlK&#U<],6OtnJ#XaE1Z#2>:fVTJfAN@aIL^ao)Up>XjC!+)8Z+Y)/9d,ol7\Aj<;@GD(kuj,OVam_BS/tZ7Y^2k>XP%p>MKN3*
%85]<p;2/Gu1S:`e,OSrJ=i9g%l1$mk9^)q0#`I9YJ_m/\*[Q-t*L,KP"-(_G=<nD([lN#IQ3G)oYoq%2%IT-AW52q!@Z=h9UHHu7
%rB7F\ZB%l&mI*(8?Ee,WZ%h@f&8:_*f/)a\GTIGAd--cEd'/ZDU5X[5ZA:9IBoFf\nL0#O!YJuHP=HL%*u")AG72$DVnFRr"DI@s
%A&)PW156gc^k!j@>FYX.^1quj`M:a#J,W1>p8cfkT0E/6ro(t_S)NmET=qc7a2>5*?J[n/qWu2UB0Y504a[.=b5gE!Gl+\V(D$7Y
%hn=<F^O,kVS"I<hrs1jar:uh3hLGFIbEr6TqsNFrXkgIq45Bf)h>P6l+(!hWEVJJlh;/%En%\IkDngeqr.ilWDU$If2>cshb;Tsh
%]XlqeeoLdmbBL`!pu]Q5ZQHs^jk"DK?%7He20aEHe,@JfiQF?4r7,/gIe;<C!;jFT_Z~>
%AI9_PrivateDataEnd
