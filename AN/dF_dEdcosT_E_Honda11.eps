%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: dF_dEdcosT_E_Honda11.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Vadim Naumov
%%CreationDate: 1/25/2013
%%BoundingBox: 0 0 509 292
%%HiResBoundingBox: 0 0 508.6363 291.1124
%%CropBox: 0 0 508.6363 291.1124
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2013-01-25T13:49:01+04:00</xap:CreateDate>
         <xap:ModifyDate>2013-01-25T13:49:01+04:00</xap:ModifyDate>
         <xap:MetadataDate>2013-01-25T13:49:01+04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>148</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAlAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7f5JvNMvfNnmO1u7pLjz&#xA;Xo1yovUgjuYFhtbqIG1Rucs0codUaQUb4dvhUipVZ1irz/8ALzyH5Ln8h+XZ7zy1pJuZdOtZJX+q&#xA;QSFy0KnmztEpLPXk3uep64qyD/lXnkD/AKlnSv8ApBtv+aMVWQ/lt+XsKFE8s6XxLO55WcDGrsXb&#xA;dkJpVth0HQbYq5Py2/L1JZJR5Z0vnJTnWzgI+EUFAUoPoxVYfyw/Lk20tsfLOmelN6nP/RYeX70l&#xA;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</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:5519EA67D466E2119F9B9E5D933C7C45</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:5619EA67D466E2119F9B9E5D933C7C45</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:5419EA67D466E2119F9B9E5D933C7C45</stRef:instanceID>
            <stRef:documentID>uuid:5319EA67D466E2119F9B9E5D933C7C45</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>SymbolMT</stFnt:fontName>
                  <stFnt:fontFamily>Symbol</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 1.60</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>SYMBOL.TTF</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Times</stFnt:fontName>
                  <stFnt:fontFamily>Times</stFnt:fontFamily>
                  <stFnt:fontType>Unknown</stFnt:fontType>
                  <stFnt:versionString>OTF 1.006;PS 001.000;Core 1.0.23;hotunix 1.28</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName/>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Times-Italic</stFnt:fontName>
                  <stFnt:fontFamily>Times Italic</stFnt:fontFamily>
                  <stFnt:fontFace>Italic</stFnt:fontFace>
                  <stFnt:fontType>Unknown</stFnt:fontType>
                  <stFnt:versionString>OTF 1.006;PS 001.000;Core 1.0.23;hotunix 1.28</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName/>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -291.112 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 291.112 li
508.636 291.112 li
508.636 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
37.8267 228.765 mo
32.7266 228.765 li
35.2769 234.435 mo
32.7266 234.435 li
35.2769 240.735 mo
32.7266 240.735 li
35.2769 247.979 mo
32.7266 247.979 li
35.2769 256.169 mo
32.7266 256.169 li
35.2769 266.04 mo
32.7266 266.04 li
32.7266 266.04 mo
32.7266 .600098 li
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
@
%ADOBeginSubsetFont: Times Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /Times def
/FontInfo 7 dict dup begin
/Notice (Copyright (c) 2000 Adobe Systems Incorporated. All Rights Reserved. U.S. Patent Des. pending.Myriad is a registered trademark of Adobe Systems Incorporated.) def
/Weight (Regular) def
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 51 /three put
def
/UniqueID 44757 def
/FontBBox {-46 -250 1126 881} def
end
systemdict begin
dup /Private
15 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def
/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def
/FamilyBlues [-11 -0 674 686 484 495 650 661 710 721 241 248] def
/FamilyOtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def
/BlueScale 0.0604583 def
/StdHW [67] def
/StdVW [88] def
/StemSnapH [67] def
/StemSnapV [88 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/hyphen <1C60D8A8C9B8391507657B8D1429650EAD682B1E1FA8FF445B393CF
432> |-
/zero <1C60D8A8C9B7BA8F6239473D6D0952B7B27F0FFDEC3D4AC23BBF14E07
C71BE987C9038E6F2704D61FFFBA46C6292A7A756C4A69FC815972E4E11A2A0C
0412401CF7552C1D65F52A94A448EA77E94FBDFC5B9B2B53FC28F1DB3E682A5> |-
/one <1C60D8A8C9B7BA8F425ECEA255C7F445C46B341EF282C71048D555A5D5
98E89496E7235E7E5E61E755DE1DD927709B69AF39C5FFA2F961FADB> |-
/three <1C60D8A8C9B7BA8F622456C4A5B0CA9B1BA284AF806928062A6B7B09
FB3F0AFA0642E6C0751425F3A334CD3C228AEC4E90E461897DA0B6E68544752B
67A4F1AF2BA515FBEB3354381D1AEEE9228166830748EBCCD49650729B252BA0
AF9C83ED55793E92C62149841E4908A8558158DB07B1A2459DA9352556689C84
555CD18A1256253A8BD45BD25F8CE8656AC404840665CF1FB17FCFAF> |-
/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364C
BBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0
D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917
B17192> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/TEICCZ+Times /Times findfont ct_VMDictPut
/TEICCZ+Times*1 
[45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /.notdef /three 204{/.notdef}rp]
TEICCZ+Times nf
TEICCZ+Times*1 [8.4 0 0 -8.4 0 0 ]msf
15.1064 231.633 mo
(10)
[4.30908 0 ]xsh
TEICCZ+Times*1 [6.75 0 0 -6.75 0 0 ]msf
24.1909 227.127 mo
(-3)
[2.07227 0 ]xsh
37.8267 105.18 mo
32.7266 105.18 li
35.2769 110.745 mo
32.7266 110.745 li
35.2769 117.15 mo
32.7266 117.15 li
35.2769 124.29 mo
32.7266 124.29 li
35.2769 132.585 mo
32.7266 132.585 li
35.2769 142.35 mo
32.7266 142.35 li
35.2769 154.319 mo
32.7266 154.319 li
35.2769 169.755 mo
32.7266 169.755 li
35.2769 191.595 mo
32.7266 191.595 li
@
%ADOBeginSubsetFont: Times AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
TEICCZ+Times dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7BA8F694E6FA15FFB6B382A3EE4F45111A59DACAF941116
582617B9738BB5AF1D396C826652BF6DBB79EF1DD0AC1F7B54C0F37BCAD75B93
5293F3F71168A81E7D38CDD63CCC9A6CCC00BE68E00357641B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TEICCZ+Times /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/TEICCZ+Times*1 
[45{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two /three 204{/.notdef}rp]
TEICCZ+Times nf
TEICCZ+Times*1 [8.4 0 0 -8.4 0 0 ]msf
15.1064 106.531 mo
(10)
[4.30908 0 ]xsh
TEICCZ+Times*1 [6.75 0 0 -6.75 0 0 ]msf
24.1909 102.032 mo
(-2)
[2.07227 0 ]xsh
142.977 261.271 mo
142.977 266.04 li
137.877 263.056 mo
137.877 266.04 li
132.177 263.056 mo
132.177 266.04 li
125.877 263.056 mo
125.877 266.04 li
118.377 263.056 mo
118.377 266.04 li
109.677 263.056 mo
109.677 266.04 li
99.0269 263.056 mo
99.0269 266.04 li
85.2266 263.056 mo
85.2266 266.04 li
65.877 263.056 mo
65.877 266.04 li
32.7266 266.04 mo
507.026 266.04 li
35.2769 .600098 mo
32.7266 .600098 li
35.2769 8.89502 mo
32.7266 8.89502 li
35.2769 18.6602 mo
32.7266 18.6602 li
35.2769 30.7349 mo
32.7266 30.7349 li
35.2769 46.1699 mo
32.7266 46.1699 li
35.2769 67.9048 mo
32.7266 67.9048 li
@
TEICCZ+Times*1 [8.4 0 0 -8.4 0 0 ]msf
140.82 277.192 mo
(1)sh
253.227 261.271 mo
253.227 266.04 li
248.127 263.056 mo
248.127 266.04 li
242.577 263.056 mo
242.577 266.04 li
236.127 263.056 mo
236.127 266.04 li
228.777 263.056 mo
228.777 266.04 li
220.077 263.056 mo
220.077 266.04 li
209.277 263.056 mo
209.277 266.04 li
195.477 263.056 mo
195.477 266.04 li
176.127 263.056 mo
176.127 266.04 li
@
TEICCZ+Times*1 [8.4 0 0 -8.4 0 0 ]msf
248.914 277.192 mo
(10)
[4.30859 0 ]xsh
363.477 261.271 mo
363.477 266.04 li
358.377 263.056 mo
358.377 266.04 li
352.827 263.056 mo
352.827 266.04 li
346.377 263.056 mo
346.377 266.04 li
339.026 263.056 mo
339.026 266.04 li
330.327 263.056 mo
330.327 266.04 li
319.676 263.056 mo
319.676 266.04 li
305.877 263.056 mo
305.877 266.04 li
286.377 263.056 mo
286.377 266.04 li
@
TEICCZ+Times*1 [8.4 0 0 -8.4 0 0 ]msf
359.164 277.192 mo
(10)
[4.30859 0 ]xsh
TEICCZ+Times*1 [6.75 0 0 -6.75 0 0 ]msf
368.787 271.636 mo
(2)sh
473.727 261.271 mo
473.727 266.04 li
468.776 263.056 mo
468.776 266.04 li
463.077 263.056 mo
463.077 266.04 li
456.627 263.056 mo
456.627 266.04 li
449.276 263.056 mo
449.276 266.04 li
440.577 263.056 mo
440.577 266.04 li
429.926 263.056 mo
429.926 266.04 li
416.127 263.056 mo
416.127 266.04 li
396.627 263.056 mo
396.627 266.04 li
@
TEICCZ+Times*1 [8.4 0 0 -8.4 0 0 ]msf
469.414 277.192 mo
(10)
[4.30859 0 ]xsh
TEICCZ+Times*1 [6.75 0 0 -6.75 0 0 ]msf
479.043 271.636 mo
(3)sh
507.026 2.38525 mo
507.026 .600098 li
473.727 5.37012 mo
473.727 .600098 li
468.776 3.58496 mo
468.776 .600098 li
463.077 3.58496 mo
463.077 .600098 li
456.627 3.58496 mo
456.627 .600098 li
449.276 3.58496 mo
449.276 .600098 li
440.577 3.58496 mo
440.577 .600098 li
429.926 3.58496 mo
429.926 .600098 li
416.127 3.58496 mo
416.127 .600098 li
396.627 3.58496 mo
396.627 .600098 li
363.477 5.37012 mo
363.477 .600098 li
358.377 3.58496 mo
358.377 .600098 li
352.827 3.58496 mo
352.827 .600098 li
346.377 3.58496 mo
346.377 .600098 li
339.026 3.58496 mo
339.026 .600098 li
330.327 3.58496 mo
330.327 .600098 li
319.676 3.58496 mo
319.676 .600098 li
305.877 3.58496 mo
305.877 .600098 li
286.377 3.58496 mo
286.377 .600098 li
253.227 5.37012 mo
253.227 .600098 li
248.127 3.58496 mo
248.127 .600098 li
242.577 3.58496 mo
242.577 .600098 li
236.127 3.58496 mo
236.127 .600098 li
228.777 3.58496 mo
228.777 .600098 li
220.077 3.58496 mo
220.077 .600098 li
209.277 3.58496 mo
209.277 .600098 li
195.477 3.58496 mo
195.477 .600098 li
176.127 3.58496 mo
176.127 .600098 li
142.977 5.37012 mo
142.977 .600098 li
137.877 3.58496 mo
137.877 .600098 li
132.177 3.58496 mo
132.177 .600098 li
125.877 3.58496 mo
125.877 .600098 li
118.377 3.58496 mo
118.377 .600098 li
109.677 3.58496 mo
109.677 .600098 li
99.0269 3.58496 mo
99.0269 .600098 li
85.2266 3.58496 mo
85.2266 .600098 li
65.877 3.58496 mo
65.877 .600098 li
32.7266 .600098 mo
507.026 .600098 li
504.477 .600098 mo
507.026 .600098 li
504.477 8.89502 mo
507.026 8.89502 li
504.477 18.6602 mo
507.026 18.6602 li
504.477 30.7349 mo
507.026 30.7349 li
504.477 46.1699 mo
507.026 46.1699 li
504.477 67.9048 mo
507.026 67.9048 li
501.926 105.18 mo
507.026 105.18 li
504.477 110.745 mo
507.026 110.745 li
504.477 117.15 mo
507.026 117.15 li
504.477 124.29 mo
507.026 124.29 li
504.477 132.585 mo
507.026 132.585 li
504.477 142.35 mo
507.026 142.35 li
504.477 154.319 mo
507.026 154.319 li
504.477 169.755 mo
507.026 169.755 li
504.477 191.595 mo
507.026 191.595 li
501.926 228.765 mo
507.026 228.765 li
504.477 234.435 mo
507.026 234.435 li
504.477 240.735 mo
507.026 240.735 li
504.477 247.979 mo
507.026 247.979 li
504.477 256.169 mo
507.026 256.169 li
504.477 266.04 mo
507.026 266.04 li
507.026 266.04 mo
507.026 .600098 li
507.026 264.255 mo
507.026 266.04 li
@
.5 lw
229.227 34.6201 mo
199.227 46.7998 li
256.827 27.27 mo
178.527 58.875 li
274.377 23.8047 mo
163.527 68.6401 li
288.327 21.915 mo
152.277 76.8301 li
303.026 19.605 mo
142.227 84.6001 li
169.377 77.355 mo
132.327 92.3701 li
317.426 17.5049 mo
206.127 62.5498 li
154.677 87.0151 mo
121.077 100.665 li
329.276 16.4551 mo
225.477 58.4551 li
145.527 94.4702 mo
112.677 107.7 li
340.676 15.6147 mo
238.377 56.8799 li
138.027 101.19 mo
104.727 114.63 li
351.776 14.7749 mo
251.127 55.5151 li
131.427 107.595 mo
96.0269 121.875 li
362.426 14.145 mo
261.327 55.0952 li
125.427 113.685 mo
88.9766 128.385 li
372.327 13.9351 mo
271.526 54.6748 li
120.027 119.565 mo
82.2266 134.895 li
381.776 13.8301 mo
281.727 54.2549 li
115.077 125.34 mo
76.5269 140.88 li
390.926 13.8301 mo
291.477 53.9399 li
110.427 130.905 mo
71.127 146.76 li
399.477 14.04 mo
300.026 54.2549 li
106.377 136.26 mo
66.1768 152.431 li
408.026 14.355 mo
311.577 53.3101 li
102.627 141.51 mo
61.9766 157.89 li
415.827 14.8799 mo
319.676 53.73 li
98.877 146.655 mo
58.2266 163.14 li
423.627 15.4048 mo
327.176 54.4648 li
95.2769 151.8 mo
54.4766 168.284 li
431.276 16.0352 mo
333.477 55.6201 li
91.8267 156.944 mo
51.1768 173.431 li
438.627 16.77 mo
341.426 56.04 li
88.5269 161.985 mo
47.877 178.47 li
445.676 17.7148 mo
349.077 56.6699 li
85.5269 166.919 mo
44.5767 183.511 li
452.577 18.5547 mo
356.577 57.4048 li
82.5269 171.854 mo
41.5767 188.444 li
459.627 19.5 mo
363.776 58.1401 li
79.6768 176.685 mo
38.5767 193.38 li
466.676 20.3398 mo
370.676 59.085 li
76.8267 181.62 mo
35.7266 198.21 li
473.426 21.2852 mo
377.577 60.0298 li
74.127 186.345 mo
32.877 203.04 li
479.877 22.335 mo
384.176 61.0801 li
71.5767 191.069 mo
32.7266 206.819 li
486.627 23.3853 mo
390.926 62.0249 li
69.1768 195.794 mo
32.7266 210.495 li
493.676 24.2251 mo
397.526 63.0752 li
66.627 200.521 mo
32.7266 214.274 li
499.827 25.4849 mo
403.827 64.23 li
64.377 205.14 mo
32.7266 217.95 li
505.827 26.7451 mo
410.127 65.3853 li
62.127 209.761 mo
32.7266 221.624 li
507.026 30 mo
416.127 66.645 li
59.877 214.38 mo
32.7266 225.405 li
507.026 33.6748 mo
421.977 68.0103 li
57.7769 218.999 mo
32.7266 229.081 li
507.026 37.4551 mo
427.827 69.375 li
55.6768 223.515 mo
32.7266 232.755 li
507.026 41.1299 mo
433.526 70.8452 li
53.5767 228.03 mo
32.7266 236.534 li
507.026 44.8047 mo
439.077 72.3149 li
51.4766 232.649 mo
32.7266 240.21 li
507.026 48.585 mo
444.327 73.7852 li
49.5269 237.165 mo
32.7266 243.886 li
507.026 52.2603 mo
449.577 75.4648 li
47.5767 241.575 mo
32.7266 247.665 li
507.026 55.9351 mo
454.827 77.04 li
45.7769 246.091 mo
32.7266 251.341 li
507.026 59.7148 mo
459.627 78.8252 li
43.8267 250.604 mo
32.7266 255.015 li
507.026 63.3901 mo
464.426 80.6099 li
42.0269 255.015 mo
32.7266 258.794 li
507.026 67.0649 mo
469.377 82.29 li
40.2266 259.425 mo
32.7266 262.47 li
507.026 70.8452 mo
474.176 84.0752 li
38.2769 263.94 mo
34.8267 265.306 li
507.026 74.52 mo
478.526 85.9648 li
507.026 78.1953 mo
483.026 87.855 li
507.026 81.9751 mo
487.227 89.8501 li
507.026 85.6499 mo
491.276 91.9502 li
507.026 89.3252 mo
495.026 94.1548 li
507.026 93.105 mo
499.077 96.2549 li
507.026 96.7798 mo
503.276 98.25 li
0 0 1 rgb
@
gsave
32.7266 266.04 mo
32.7266 .600098 li
507.026 .600098 li
507.026 266.04 li
32.7266 266.04 li
cp
clp
.75 lw
38.127 264.255 mo
43.8267 250.604 li
49.377 237.479 li
54.9268 225.091 li
60.4766 213.015 li
66.0269 201.675 li
71.5767 190.966 li
77.127 180.886 li
82.8267 171.435 li
88.377 162.3 li
93.9268 153.794 li
99.4766 145.815 li
105.027 138.045 li
110.577 130.695 li
116.127 123.975 li
121.677 117.57 li
127.377 111.69 li
132.927 106.02 li
138.477 100.77 li
144.027 95.73 li
149.577 91.1099 li
155.127 86.5952 li
160.677 82.71 li
166.377 79.1401 li
171.927 75.9897 li
177.477 73.1548 li
183.027 70.6353 li
188.577 68.4297 li
194.127 66.54 li
199.677 64.335 li
205.227 62.7603 li
210.927 61.395 li
216.477 60.1353 li
222.027 58.98 li
227.577 58.1401 li
233.127 57.1953 li
238.677 56.8799 li
244.227 56.25 li
249.927 55.4102 li
255.477 55.6201 li
261.026 55.0952 li
266.577 54.8853 li
272.127 54.5703 li
277.676 54.4648 li
283.227 54.1499 li
288.776 53.9399 li
294.477 54.0449 li
300.026 54.2549 li
305.577 53.9399 li
311.127 53.2051 li
316.676 53.73 li
322.227 53.73 li
327.776 54.5703 li
333.477 55.6201 li
339.026 55.8301 li
344.577 56.355 li
350.127 56.7749 li
355.676 57.2998 li
361.227 57.8252 li
366.776 58.5601 li
372.477 59.2949 li
378.026 60.1353 li
383.577 60.9751 li
389.127 61.71 li
394.676 62.6548 li
400.227 63.6001 li
405.776 64.6499 li
411.327 65.7002 li
417.026 66.855 li
422.577 68.2202 li
428.127 69.48 li
433.676 70.8452 li
439.227 72.3149 li
444.776 73.9951 li
450.327 75.6748 li
456.026 77.355 li
461.577 79.5601 li
467.127 81.5547 li
472.676 83.4453 li
478.227 85.8599 li
483.776 88.1699 li
489.327 90.8999 li
494.877 94.0498 li
500.577 96.9897 li
506.127 99.6147 li
511.676 102.765 li
32.5767 203.354 mo
38.127 193.905 li
43.8267 184.771 li
49.377 176.159 li
54.9268 167.761 li
60.4766 159.886 li
66.0269 152.64 li
71.5767 146.235 li
77.127 140.145 li
82.8267 134.265 li
88.377 129.015 li
93.9268 123.765 li
99.4766 118.725 li
105.027 114.42 li
110.577 109.59 li
116.127 104.445 li
121.677 100.035 li
127.377 95.9399 li
132.927 91.9502 li
138.477 87.54 li
144.027 83.3398 li
149.577 78.9297 li
155.127 74.625 li
160.677 70.6353 li
166.377 66.645 li
171.927 62.8647 li
177.477 59.5049 li
183.027 56.145 li
188.577 53.415 li
194.127 50.1602 li
199.677 46.4849 li
205.227 43.8599 li
210.927 41.3398 li
216.477 38.9248 li
222.027 36.6147 li
227.577 35.04 li
233.127 33.5703 li
238.677 31.6797 li
244.227 30.3149 li
249.927 29.0547 li
255.477 27.48 li
261.026 26.5352 li
266.577 25.3799 li
272.127 24.2251 li
277.676 23.1748 li
283.227 22.335 li
288.776 21.8101 li
294.477 21.1797 li
300.026 20.2349 li
305.577 19.1851 li
311.127 18.0298 li
316.676 17.6099 li
322.227 17.085 li
327.776 16.5601 li
333.477 16.1401 li
339.026 15.7202 li
344.577 15.2998 li
350.127 14.9849 li
355.676 14.5649 li
361.227 14.25 li
366.776 14.04 li
372.477 13.9351 li
378.026 13.8301 li
389.127 13.8301 li
394.676 13.9351 li
400.227 14.145 li
405.776 14.25 li
411.327 14.5649 li
417.026 14.9849 li
422.577 15.4048 li
428.127 15.7202 li
433.676 16.2451 li
439.227 16.875 li
444.776 17.6099 li
450.327 18.3452 li
456.026 18.9751 li
461.577 19.71 li
467.127 20.3398 li
472.676 21.1797 li
478.227 22.125 li
483.776 22.9648 li
489.327 23.7002 li
494.877 24.4351 li
500.577 25.5898 li
506.127 26.7451 li
511.676 27.8999 li
511.676 102.765 mo
506.127 99.6147 li
500.577 96.9897 li
494.877 94.0498 li
489.327 90.8999 li
483.776 88.1699 li
478.227 85.8599 li
472.676 83.4453 li
467.127 81.5547 li
461.577 79.5601 li
456.026 77.355 li
450.327 75.6748 li
444.776 73.9951 li
439.227 72.3149 li
433.676 70.8452 li
428.127 69.48 li
422.577 68.2202 li
417.026 66.855 li
411.327 65.7002 li
405.776 64.6499 li
400.227 63.6001 li
394.676 62.6548 li
389.127 61.71 li
383.577 60.9751 li
378.026 60.1353 li
372.477 59.2949 li
366.776 58.5601 li
361.227 57.8252 li
355.676 57.2998 li
350.127 56.7749 li
344.577 56.355 li
339.026 55.8301 li
333.477 55.6201 li
327.776 54.5703 li
322.227 53.73 li
316.676 53.73 li
311.127 53.2051 li
305.577 53.9399 li
300.026 54.2549 li
294.477 54.0449 li
288.776 53.9399 li
283.227 54.1499 li
277.676 54.4648 li
272.127 54.5703 li
266.577 54.8853 li
261.026 55.0952 li
255.477 55.6201 li
249.927 55.4102 li
244.227 56.25 li
238.677 56.8799 li
233.127 57.1953 li
227.577 58.1401 li
222.027 58.98 li
216.477 60.1353 li
210.927 61.395 li
205.227 62.7603 li
199.677 64.335 li
194.127 66.54 li
188.577 68.4297 li
183.027 70.6353 li
177.477 73.1548 li
171.927 75.9897 li
166.377 79.1401 li
160.677 82.71 li
155.127 86.5952 li
149.577 91.1099 li
144.027 95.73 li
138.477 100.77 li
132.927 106.02 li
127.377 111.69 li
121.677 117.57 li
116.127 123.975 li
110.577 130.695 li
105.027 138.045 li
99.4766 145.815 li
93.9268 153.794 li
88.377 162.3 li
82.8267 171.435 li
77.127 180.886 li
71.5767 190.966 li
66.0269 201.675 li
60.4766 213.015 li
54.9268 225.091 li
49.377 237.479 li
43.8267 250.604 li
38.127 264.255 li
32.7266 266.04 li
32.7266 203.354 li
32.7266 203.354 li
38.127 193.905 li
43.8267 184.771 li
49.377 176.159 li
54.9268 167.761 li
60.4766 159.886 li
66.0269 152.64 li
71.5767 146.235 li
77.127 140.145 li
82.8267 134.265 li
88.377 129.015 li
93.9268 123.765 li
99.4766 118.725 li
105.027 114.42 li
110.577 109.59 li
116.127 104.445 li
121.677 100.035 li
127.377 95.9399 li
132.927 91.9502 li
138.477 87.54 li
144.027 83.3398 li
149.577 78.9297 li
155.127 74.625 li
160.677 70.6353 li
166.377 66.645 li
171.927 62.8647 li
177.477 59.5049 li
183.027 56.145 li
188.577 53.415 li
194.127 50.1602 li
199.677 46.4849 li
205.227 43.8599 li
210.927 41.3398 li
216.477 38.9248 li
222.027 36.6147 li
227.577 35.04 li
233.127 33.5703 li
238.677 31.6797 li
244.227 30.3149 li
249.927 29.0547 li
255.477 27.48 li
261.026 26.5352 li
266.577 25.3799 li
272.127 24.2251 li
277.676 23.1748 li
283.227 22.335 li
288.776 21.8101 li
294.477 21.1797 li
300.026 20.2349 li
305.577 19.1851 li
311.127 18.0298 li
316.676 17.6099 li
322.227 17.085 li
327.776 16.5601 li
333.477 16.1401 li
339.026 15.7202 li
344.577 15.2998 li
350.127 14.9849 li
355.676 14.5649 li
361.227 14.25 li
366.776 14.04 li
372.477 13.9351 li
378.026 13.8301 li
389.127 13.8301 li
394.676 13.9351 li
400.227 14.145 li
405.776 14.25 li
411.327 14.5649 li
417.026 14.9849 li
422.577 15.4048 li
428.127 15.7202 li
433.676 16.2451 li
439.227 16.875 li
444.776 17.6099 li
450.327 18.3452 li
456.026 18.9751 li
461.577 19.71 li
467.127 20.3398 li
472.676 21.1797 li
478.227 22.125 li
483.776 22.9648 li
489.327 23.7002 li
494.877 24.4351 li
500.577 25.5898 li
506.127 26.7451 li
511.676 27.8999 li
@
grestore
300.176 24.855 mo
234.177 71.0547 li
76.5269 182.985 mo
32.7266 213.646 li
302.727 24.54 mo
236.277 71.0547 li
75.0269 185.505 mo
32.7266 215.114 li
305.426 24.2251 mo
238.527 71.0547 li
73.6768 188.024 mo
32.7266 216.69 li
308.276 23.8047 mo
240.927 70.9502 li
72.1768 190.544 mo
32.7266 218.159 li
311.127 23.2798 mo
243.327 70.7397 li
70.8267 192.96 mo
32.7266 219.735 li
313.377 23.2798 mo
245.727 70.5298 li
69.627 195.374 mo
32.7266 221.206 li
315.627 23.1748 mo
247.977 70.5298 li
68.2769 197.79 mo
32.7266 222.78 li
317.877 23.0703 mo
250.227 70.4248 li
67.0767 200.206 mo
32.7266 224.249 li
320.276 22.9648 mo
252.177 70.5298 li
65.877 202.515 mo
32.7266 225.72 li
322.526 22.8599 mo
254.127 70.7397 li
64.6768 204.931 mo
32.7266 227.294 li
324.627 22.9648 mo
256.227 70.7397 li
63.4766 207.239 mo
32.7266 228.765 li
326.727 22.9648 mo
258.477 70.7397 li
62.2769 209.55 mo
32.7266 230.341 li
328.827 23.0703 mo
260.727 70.6353 li
61.2266 211.86 mo
32.7266 231.81 li
330.926 23.0703 mo
262.827 70.7397 li
60.0269 214.169 mo
32.7266 233.28 li
333.026 23.1748 mo
264.926 70.7397 li
58.9766 216.374 mo
32.7266 234.854 li
335.127 23.1748 mo
267.026 70.8452 li
57.9268 218.685 mo
32.7266 236.325 li
337.377 23.0703 mo
269.127 70.8452 li
56.877 220.995 mo
32.7266 237.899 li
339.477 23.0703 mo
271.227 70.8452 li
55.8267 223.2 mo
32.7266 239.37 li
341.577 23.0703 mo
273.327 70.9502 li
54.7769 225.511 mo
32.7266 240.944 li
343.827 23.1748 mo
275.426 70.9502 li
53.7266 227.716 mo
32.7266 242.415 li
345.926 23.1748 mo
277.526 70.9502 li
52.6768 229.919 mo
32.7266 243.886 li
348.026 23.1748 mo
279.776 70.9502 li
51.7769 232.124 mo
32.7266 245.46 li
350.127 23.1748 mo
282.026 70.9502 li
50.7266 234.331 mo
32.7266 246.931 li
352.227 23.2798 mo
284.127 70.9502 li
49.8267 236.534 mo
32.7266 248.505 li
354.176 23.3853 mo
286.227 70.9502 li
48.7769 238.739 mo
32.7266 249.976 li
356.127 23.5952 mo
288.327 71.0547 li
47.877 240.841 mo
32.7266 251.55 li
358.227 23.7002 mo
290.426 71.1602 li
46.9766 243.044 mo
32.7266 253.021 li
360.176 23.8047 mo
292.377 71.2651 li
46.0767 245.146 mo
32.7266 254.489 li
362.127 23.9102 mo
294.327 71.3701 li
45.1768 247.351 mo
32.7266 256.065 li
364.227 23.9102 mo
296.426 71.4751 li
44.2769 249.45 mo
32.7266 257.534 li
366.327 24.0151 mo
298.377 71.5801 li
43.377 251.655 mo
32.7266 259.11 li
368.426 24.1201 mo
300.477 71.5801 li
42.4766 253.755 mo
32.7266 260.581 li
370.377 24.2251 mo
302.877 71.4751 li
41.5767 255.854 mo
32.7266 262.155 li
372.477 24.3301 mo
305.127 71.3701 li
40.6768 258.06 mo
32.7266 263.624 li
374.426 24.4351 mo
307.377 71.2651 li
39.7769 260.159 mo
32.7266 265.095 li
376.377 24.54 mo
309.627 71.2651 li
38.877 262.261 mo
34.6768 265.306 li
378.327 24.75 mo
311.727 71.2651 li
380.276 24.855 mo
313.676 71.4751 li
382.077 25.0649 mo
315.477 71.6851 li
384.026 25.2749 mo
317.426 71.895 li
385.977 25.3799 mo
319.377 72 li
387.926 25.5898 mo
321.327 72.21 li
389.727 25.7998 mo
323.127 72.4199 li
391.676 26.0103 mo
324.926 72.7349 li
393.477 26.2202 mo
326.577 73.0498 li
395.426 26.4297 mo
328.377 73.3647 li
397.227 26.6401 mo
330.026 73.6797 li
399.026 26.8501 mo
331.676 73.9951 li
400.827 27.0601 mo
333.327 74.415 li
402.776 27.27 mo
335.276 74.52 li
404.577 27.48 mo
337.227 74.625 li
406.377 27.7949 mo
339.176 74.835 li
408.176 28.0049 mo
340.977 75.0449 li
409.977 28.2148 mo
342.926 75.2549 li
411.926 28.5298 mo
344.727 75.4648 li
413.727 28.7397 mo
346.526 75.6748 li
415.377 29.0547 mo
348.327 75.9897 li
417.176 29.2651 mo
350.127 76.2002 li
418.977 29.5801 mo
351.776 76.5151 li
420.776 29.895 mo
353.577 76.9351 li
422.426 30.105 mo
355.227 77.25 li
424.077 30.5249 mo
357.026 77.5649 li
425.877 30.8398 mo
358.676 77.7749 li
427.526 31.1548 mo
360.477 78.0898 li
429.176 31.4702 mo
362.276 78.4048 li
430.977 31.7852 mo
363.926 78.6147 li
432.627 32.1001 mo
365.727 78.9297 li
434.426 32.415 mo
367.526 79.2451 li
436.077 32.73 mo
369.176 79.5601 li
437.877 32.9399 mo
370.827 79.875 li
439.676 33.2549 mo
372.477 80.1899 li
441.327 33.6748 mo
374.276 80.6099 li
442.977 33.9897 mo
375.926 80.9248 li
444.627 34.4102 mo
377.577 81.3452 li
446.127 34.7251 mo
379.227 81.6602 li
447.776 35.145 mo
380.877 81.9751 li
449.426 35.46 mo
382.526 82.395 li
451.077 35.8799 mo
384.176 82.71 li
452.727 36.1953 mo
385.827 83.0249 li
454.377 36.5103 mo
387.477 83.3398 li
456.176 36.9297 mo
389.276 83.7603 li
457.827 37.2451 mo
390.926 84.0752 li
459.327 37.665 mo
392.577 84.3901 li
460.977 37.98 mo
394.377 84.7051 li
462.627 38.3999 mo
396.026 85.02 li
464.276 38.7148 mo
397.676 85.335 li
465.926 39.1353 mo
399.327 85.7549 li
467.577 39.5547 mo
400.977 86.0703 li
469.227 39.8701 mo
402.627 86.4897 li
470.877 40.1851 mo
404.127 86.9102 li
472.526 40.605 mo
405.776 87.3301 li
474.026 41.0249 mo
407.426 87.645 li
475.676 41.4453 mo
409.077 88.0649 li
477.176 41.8647 mo
410.727 88.3799 li
478.676 42.2852 mo
412.227 88.7998 li
480.176 42.7051 mo
413.877 89.2202 li
481.676 43.125 mo
415.377 89.6401 li
483.327 43.6499 mo
416.877 90.0601 li
484.827 44.0703 mo
418.377 90.585 li
486.477 44.4897 mo
419.877 91.0049 li
487.977 44.8047 mo
421.377 91.5298 li
489.627 45.2251 mo
422.877 92.0547 li
491.276 45.645 mo
424.377 92.4751 li
492.926 45.96 mo
425.877 92.895 li
494.577 46.2749 mo
427.377 93.4199 li
496.227 46.6953 mo
428.877 93.8398 li
497.727 47.1147 mo
430.377 94.3647 li
499.377 47.5352 mo
431.877 94.7852 li
500.877 47.9551 mo
433.227 95.3101 li
502.377 48.375 mo
434.727 95.73 li
503.877 48.8999 mo
436.227 96.2549 li
505.377 49.3203 mo
437.577 96.7798 li
507.026 49.7397 mo
439.077 97.3047 li
507.026 51.3149 mo
440.577 97.7251 li
507.026 52.7852 mo
442.077 98.25 li
507.026 54.2549 mo
443.577 98.6699 li
507.026 55.8301 mo
445.077 99.0898 li
507.026 57.2998 mo
446.577 99.6147 li
507.026 58.875 mo
448.077 100.035 li
507.026 60.3452 mo
449.577 100.56 li
507.026 61.9199 mo
451.077 101.085 li
507.026 63.3901 mo
452.426 101.61 li
507.026 64.8599 mo
453.776 102.135 li
507.026 66.4351 mo
455.127 102.765 li
507.026 67.9048 mo
456.477 103.29 li
507.026 69.48 mo
457.827 103.815 li
507.026 70.9502 mo
459.327 104.34 li
507.026 72.5249 mo
460.827 104.76 li
507.026 73.9951 mo
462.176 105.285 li
507.026 75.4648 mo
463.526 105.915 li
507.026 77.04 mo
465.026 106.44 li
507.026 78.5103 mo
466.377 106.965 li
507.026 80.085 mo
467.727 107.595 li
507.026 81.5547 mo
468.926 108.225 li
507.026 83.0249 mo
470.127 108.855 li
507.026 84.6001 mo
471.327 109.485 li
507.026 86.0703 mo
472.676 110.115 li
507.026 87.645 mo
474.026 110.745 li
507.026 89.1147 mo
475.377 111.27 li
507.026 90.6899 mo
476.727 111.9 li
507.026 92.1602 mo
478.077 112.425 li
507.026 93.6299 mo
479.276 113.055 li
507.026 95.2051 mo
480.627 113.685 li
507.026 96.6748 mo
481.977 114.21 li
507.026 98.25 mo
483.176 114.84 li
507.026 99.7202 mo
484.526 115.47 li
507.026 101.295 mo
485.727 116.1 li
507.026 102.765 mo
486.926 116.835 li
507.026 104.235 mo
488.127 117.465 li
507.026 105.81 mo
489.327 118.095 li
507.026 107.28 mo
490.526 118.725 li
507.026 108.855 mo
491.877 119.46 li
507.026 110.325 mo
493.077 120.09 li
507.026 111.9 mo
494.276 120.72 li
507.026 113.37 mo
495.477 121.455 li
507.026 114.84 mo
496.676 122.085 li
507.026 116.415 mo
497.877 122.82 li
507.026 117.885 mo
499.077 123.45 li
507.026 119.46 mo
500.276 124.08 li
507.026 120.93 mo
501.477 124.815 li
507.026 122.505 mo
502.676 125.445 li
507.026 123.975 mo
503.877 126.18 li
507.026 125.445 mo
505.077 126.81 li
507.026 127.02 mo
506.276 127.44 li
1 1 0 rgb
@
197.727 49.5298 mo
228.627 71.2651 li
198.927 49.0049 mo
230.727 71.1602 li
200.277 48.375 mo
232.677 71.0547 li
201.627 47.7451 mo
234.927 71.0547 li
202.827 47.1147 mo
237.027 71.0547 li
204.177 46.5898 mo
239.127 71.0547 li
205.527 45.96 mo
241.077 70.8452 li
206.877 45.4351 mo
243.027 70.7397 li
208.227 44.8047 mo
244.977 70.6353 li
209.577 44.2798 mo
247.077 70.5298 li
210.927 43.7549 mo
249.177 70.4248 li
212.427 43.23 mo
251.427 70.5298 li
213.777 42.7051 mo
253.827 70.7397 li
215.277 42.1797 mo
256.077 70.8452 li
216.627 41.6548 mo
258.177 70.7397 li
218.127 41.1299 mo
260.276 70.7397 li
219.477 40.605 mo
262.526 70.7397 li
220.977 40.0801 mo
264.776 70.7397 li
222.327 39.5547 mo
266.877 70.8452 li
223.827 39.0298 mo
269.127 70.8452 li
225.177 38.5049 mo
271.377 70.8452 li
226.527 37.98 mo
273.627 70.9502 li
228.027 37.5601 mo
275.877 70.9502 li
229.527 37.0352 mo
277.977 70.9502 li
231.177 36.6147 mo
280.077 70.9502 li
232.677 36.1953 mo
282.327 70.9502 li
234.177 35.7749 mo
284.426 70.9502 li
235.677 35.355 mo
286.676 70.9502 li
237.327 34.9351 mo
288.926 71.0547 li
238.827 34.5151 mo
291.327 71.1602 li
240.327 33.9897 mo
293.577 71.3701 li
241.977 33.5703 mo
295.977 71.4751 li
243.477 33.1499 mo
298.227 71.5801 li
244.977 32.73 mo
300.477 71.5801 li
246.477 32.3101 mo
302.577 71.4751 li
248.127 31.8901 mo
304.526 71.3701 li
249.627 31.4702 mo
306.627 71.3701 li
251.427 31.1548 mo
308.727 71.2651 li
253.077 30.8398 mo
310.827 71.2651 li
254.877 30.5249 mo
313.377 71.4751 li
256.526 30.21 mo
315.926 71.79 li
258.327 29.895 mo
318.327 72 li
260.127 29.6851 mo
320.727 72.105 li
261.927 29.3701 mo
323.426 72.4199 li
263.727 29.1602 mo
326.276 72.9453 li
265.377 28.8452 mo
329.276 73.5752 li
267.176 28.6353 mo
332.426 74.2051 li
268.977 28.3203 mo
334.977 74.52 li
270.627 28.0049 mo
337.377 74.73 li
272.426 27.6899 mo
339.926 74.9399 li
274.227 27.375 mo
342.477 75.1499 li
275.877 27.165 mo
345.026 75.5703 li
277.676 26.8501 mo
347.727 75.8853 li
279.477 26.5352 mo
350.577 76.3047 li
281.276 26.3252 mo
353.577 76.9351 li
282.926 26.0103 mo
356.426 77.46 li
284.877 25.7998 mo
359.276 77.8799 li
286.676 25.5898 mo
362.127 78.2998 li
288.477 25.3799 mo
364.977 78.8252 li
290.577 25.1699 mo
367.827 79.3501 li
292.526 25.0649 mo
370.827 79.875 li
294.477 24.96 mo
373.827 80.5049 li
296.577 24.96 mo
376.977 81.1353 li
298.827 24.96 mo
380.127 81.8701 li
300.776 24.855 mo
383.127 82.5 li
302.577 24.645 mo
386.276 83.1299 li
304.526 24.3301 mo
389.276 83.7603 li
306.327 24.1201 mo
392.276 84.2852 li
307.977 23.8047 mo
395.276 84.8101 li
309.776 23.4897 mo
398.276 85.4399 li
311.577 23.2798 mo
401.426 86.1748 li
313.676 23.2798 mo
404.877 87.0151 li
315.776 23.1748 mo
408.026 87.75 li
317.727 23.0703 mo
411.176 88.4849 li
319.827 22.9648 mo
414.776 89.4297 li
321.776 22.8599 mo
418.526 90.585 li
324.026 22.8599 mo
422.727 91.9502 li
326.276 22.9648 mo
426.477 93.105 li
328.526 23.0703 mo
430.377 94.3647 li
330.776 23.0703 mo
434.426 95.73 li
333.026 23.1748 mo
438.776 97.2002 li
335.127 23.1748 mo
442.676 98.355 li
337.227 23.0703 mo
446.426 99.5103 li
339.477 23.0703 mo
450.477 100.77 li
341.577 23.0703 mo
455.877 103.08 li
343.827 23.1748 mo
460.227 104.55 li
346.077 23.1748 mo
464.877 106.335 li
348.176 23.1748 mo
471.776 109.695 li
350.426 23.2798 mo
477.627 112.32 li
352.827 23.3853 mo
484.077 115.26 li
355.077 23.4897 mo
493.676 120.405 li
357.477 23.5952 mo
504.026 126.18 li
359.877 23.8047 mo
507.026 126.705 li
362.127 23.9102 mo
507.026 125.235 li
364.377 23.9102 mo
507.026 123.765 li
366.627 24.0151 mo
507.026 122.19 li
369.026 24.1201 mo
507.026 120.72 li
371.276 24.2251 mo
507.026 119.145 li
373.676 24.3301 mo
507.026 117.675 li
376.077 24.54 mo
507.026 116.1 li
378.627 24.75 mo
507.026 114.63 li
381.026 24.96 mo
507.026 113.16 li
383.577 25.1699 mo
507.026 111.585 li
385.977 25.3799 mo
507.026 110.115 li
388.526 25.6953 mo
507.026 108.54 li
391.077 25.9048 mo
507.026 107.07 li
393.627 26.2202 mo
507.026 105.495 li
396.176 26.5352 mo
507.026 104.025 li
398.877 26.8501 mo
507.026 102.555 li
401.426 27.165 mo
507.026 100.98 li
404.127 27.48 mo
507.026 99.5103 li
406.676 27.7949 mo
507.026 97.9351 li
409.377 28.1099 mo
507.026 96.4648 li
412.077 28.5298 mo
507.026 94.8901 li
414.776 28.9502 mo
507.026 93.4199 li
417.627 29.3701 mo
507.026 91.9502 li
420.477 29.79 mo
507.026 90.375 li
423.327 30.3149 mo
507.026 88.9048 li
426.327 30.9453 mo
507.026 87.3301 li
429.327 31.4702 mo
507.026 85.8599 li
432.327 31.9951 mo
507.026 84.3901 li
435.176 32.52 mo
507.026 82.8149 li
438.026 33.0449 mo
507.026 81.3452 li
441.026 33.5703 mo
507.026 79.77 li
444.176 34.3047 mo
507.026 78.2998 li
447.327 35.04 mo
507.026 76.7251 li
450.477 35.7749 mo
507.026 75.2549 li
453.627 36.4048 mo
507.026 73.7852 li
456.627 37.0352 mo
507.026 72.21 li
459.926 37.77 mo
507.026 70.7397 li
463.077 38.5049 mo
507.026 69.165 li
466.377 39.2397 mo
507.026 67.6953 li
469.526 39.9751 mo
507.026 66.1201 li
472.676 40.605 mo
507.026 64.6499 li
476.127 41.5498 mo
507.026 63.1797 li
479.727 42.6001 mo
507.026 61.605 li
483.627 43.7549 mo
507.026 60.1353 li
486.926 44.5952 mo
507.026 58.5601 li
490.227 45.4351 mo
507.026 57.0898 li
493.377 46.0649 mo
507.026 55.5151 li
496.676 46.7998 mo
507.026 54.0449 li
499.977 47.6401 mo
507.026 52.5752 li
503.877 48.7949 mo
507.026 51 li
167.577 66.2251 mo
150.027 78.5103 li
183.777 56.355 mo
120.627 100.56 li
190.977 52.8901 mo
106.677 111.9 li
198.177 49.3203 mo
98.2769 119.25 li
204.627 46.2749 mo
92.127 125.025 li
209.877 44.1748 mo
86.877 130.275 li
214.377 42.4951 mo
81.3267 135.735 li
218.877 40.8149 mo
76.0767 140.775 li
223.527 39.1353 mo
71.877 145.29 li
228.027 37.5601 mo
68.5767 149.07 li
231.627 36.5103 mo
65.5767 152.745 li
235.227 35.46 mo
63.0269 155.999 li
135.477 106.755 mo
60.4766 159.36 li
238.827 34.5151 mo
165.777 85.6499 li
129.027 112.845 mo
58.2266 162.405 li
242.577 33.3599 mo
172.227 82.605 li
123.477 118.305 mo
55.9766 165.556 li
246.177 32.415 mo
177.327 80.5049 li
118.977 122.925 mo
53.877 168.495 li
249.627 31.4702 mo
181.227 79.3501 li
115.377 127.02 mo
51.9268 171.435 li
252.627 30.9453 mo
185.127 78.1953 li
112.227 130.695 mo
49.8267 174.374 li
255.477 30.4199 mo
188.877 77.04 li
109.377 134.16 mo
48.0269 177.104 li
258.327 29.895 mo
192.327 76.2002 li
106.677 137.52 mo
46.2266 179.835 li
261.177 29.4751 mo
195.477 75.4648 li
104.127 140.88 mo
44.5767 182.669 li
263.877 29.0547 mo
198.327 75.0449 li
101.727 144.135 mo
42.7769 185.294 li
266.577 28.7397 mo
201.027 74.52 li
99.3267 147.285 mo
41.127 188.024 li
269.426 28.2148 mo
203.877 74.1001 li
97.0767 150.331 mo
39.4766 190.755 li
272.276 27.6899 mo
206.727 73.6797 li
94.9766 153.374 mo
37.8267 193.38 li
275.127 27.27 mo
209.277 73.2603 li
92.877 156.315 mo
36.1768 196.005 li
277.977 26.8501 mo
211.977 72.9453 li
91.0767 159.149 mo
34.6768 198.63 li
280.827 26.3252 mo
214.827 72.5249 li
89.2769 161.985 mo
33.0269 201.255 li
283.526 25.9048 mo
217.377 72.21 li
87.4766 164.716 mo
32.7266 203.04 li
286.077 25.5898 mo
219.927 71.895 li
85.8267 167.341 mo
32.7266 204.511 li
288.776 25.2749 mo
222.477 71.6851 li
84.1768 170.069 mo
32.7266 206.085 li
291.176 25.1699 mo
224.877 71.4751 li
82.5269 172.694 mo
32.7266 207.556 li
293.426 24.96 mo
227.277 71.3701 li
81.0269 175.319 mo
32.7266 209.13 li
295.827 24.96 mo
229.677 71.2651 li
79.5269 177.841 mo
32.7266 210.601 li
297.926 24.96 mo
231.927 71.1602 li
78.0269 180.466 mo
32.7266 212.175 li
@
32.7266 237.06 mo
45.627 246.091 li
32.7266 235.485 mo
46.2266 244.935 li
32.7266 234.015 mo
46.6768 243.78 li
32.7266 232.44 mo
47.127 242.624 li
32.7266 230.97 mo
47.5767 241.47 li
32.7266 229.396 mo
48.1768 240.21 li
32.7266 227.925 mo
48.627 239.056 li
32.7266 226.456 mo
49.0767 237.899 li
32.7266 224.88 mo
49.6768 236.745 li
32.7266 223.409 mo
50.127 235.591 li
32.7266 221.835 mo
50.7266 234.435 li
32.7266 220.364 mo
51.1768 233.28 li
32.7266 218.79 mo
51.7769 232.124 li
32.7266 217.319 mo
52.2266 230.97 li
32.7266 215.851 mo
52.8267 229.815 li
32.7266 214.274 mo
53.2769 228.659 li
32.7266 212.806 mo
53.7266 227.505 li
32.7266 211.229 mo
54.3267 226.351 li
32.7266 209.761 mo
54.7769 225.3 li
32.7266 208.185 mo
55.377 224.146 li
32.7266 206.716 mo
55.8267 222.989 li
32.7266 205.245 mo
56.4268 221.835 li
32.7266 203.669 mo
57.0269 220.681 li
32.7266 202.2 mo
57.4766 219.524 li
33.1768 201.044 mo
58.0767 218.37 li
33.7769 199.995 mo
58.5269 217.319 li
34.5269 198.944 mo
59.127 216.165 li
35.127 197.79 mo
59.7266 215.011 li
35.7266 196.739 mo
60.1768 213.854 li
36.4766 195.69 mo
60.7769 212.7 li
37.0767 194.64 mo
61.377 211.649 li
37.6768 193.591 mo
61.8267 210.495 li
38.2769 192.54 mo
62.4268 209.341 li
39.0269 191.489 mo
63.0269 208.29 li
39.627 190.44 mo
63.4766 207.136 li
40.377 189.39 mo
64.0767 205.979 li
40.9766 188.235 mo
64.6768 204.825 li
41.5767 187.185 mo
65.2769 203.774 li
42.3267 186.136 mo
65.7266 202.62 li
42.9268 185.085 mo
66.3267 201.466 li
43.6768 184.034 mo
66.9268 200.415 li
44.2769 182.985 mo
67.5269 199.261 li
44.877 181.935 mo
68.127 198.21 li
45.627 180.886 mo
68.7266 197.056 li
46.2266 179.94 mo
69.3267 196.005 li
46.9766 178.89 mo
69.9268 194.851 li
47.5767 177.841 mo
70.377 193.8 li
48.3267 176.79 mo
70.9766 192.646 li
48.9268 175.739 mo
71.5767 191.595 li
49.6768 174.69 mo
72.1768 190.44 li
50.2769 173.64 mo
72.7769 189.39 li
51.0269 172.591 mo
73.5269 188.341 li
51.7769 171.646 mo
74.127 187.185 li
52.5269 170.595 mo
74.7266 186.136 li
53.127 169.544 mo
75.3267 185.085 li
53.877 168.495 mo
75.9268 183.931 li
54.627 167.55 mo
76.5269 182.88 li
55.2266 166.499 mo
77.127 181.831 li
55.9766 165.45 mo
77.7266 180.78 li
56.7266 164.505 mo
78.4766 179.624 li
57.4766 163.456 mo
79.0767 178.575 li
58.2266 162.511 mo
79.6768 177.524 li
58.9766 161.46 mo
80.2769 176.476 li
59.7266 160.515 mo
80.877 175.319 li
60.3267 159.466 mo
81.627 174.271 li
61.0767 158.521 mo
82.2266 173.22 li
61.9766 157.47 mo
82.8267 172.169 li
62.7266 156.524 mo
83.4268 171.12 li
63.4766 155.581 mo
84.1768 170.069 li
64.2266 154.53 mo
84.7769 169.021 li
64.9766 153.585 mo
85.377 167.97 li
65.7266 152.534 mo
86.127 166.919 li
66.4766 151.591 mo
86.7266 165.765 li
67.2266 150.645 mo
87.4766 164.716 li
68.127 149.7 mo
88.0767 163.665 li
68.877 148.755 mo
88.6768 162.614 li
69.7769 147.81 mo
89.4268 161.669 li
70.5269 146.865 mo
90.1768 160.62 li
71.2769 145.919 mo
90.7769 159.569 li
72.1768 144.975 mo
91.5269 158.521 li
73.0767 144.135 mo
92.127 157.47 li
73.8267 143.19 mo
92.877 156.419 li
74.7266 142.246 mo
93.4766 155.37 li
75.627 141.405 mo
94.2266 154.425 li
76.5269 140.46 mo
94.9766 153.374 li
77.4268 139.515 mo
95.7266 152.325 li
78.3267 138.675 mo
96.4766 151.38 li
79.2266 137.73 mo
97.0767 150.331 li
80.127 136.89 mo
97.8267 149.385 li
81.0269 136.05 mo
98.5767 148.335 li
81.9268 135.105 mo
99.3267 147.285 li
82.8267 134.265 mo
100.077 146.34 li
83.7266 133.32 mo
100.827 145.29 li
84.627 132.48 mo
101.577 144.345 li
85.5269 131.64 mo
102.327 143.4 li
86.4268 130.695 mo
103.077 142.35 li
87.3267 129.855 mo
103.827 141.405 li
88.2266 128.91 mo
104.577 140.355 li
89.127 128.07 mo
105.327 139.41 li
90.0269 127.23 mo
106.077 138.465 li
90.9268 126.285 mo
106.827 137.415 li
91.8267 125.445 mo
107.577 136.47 li
92.7266 124.5 mo
108.327 135.525 li
93.627 123.66 mo
109.077 134.475 li
94.5269 122.82 mo
109.827 133.53 li
95.4268 121.875 mo
110.727 132.585 li
96.3267 121.035 mo
111.477 131.64 li
97.2266 120.195 mo
112.227 130.695 li
98.2769 119.355 mo
113.127 129.75 li
99.1768 118.41 mo
113.877 128.7 li
100.077 117.57 mo
114.627 127.755 li
100.977 116.73 mo
115.527 126.81 li
102.027 115.89 mo
116.277 125.865 li
102.927 115.05 mo
117.177 124.92 li
103.827 114.21 mo
117.927 124.08 li
104.877 113.37 mo
118.827 123.135 li
105.777 112.53 mo
119.727 122.19 li
106.827 111.69 mo
120.477 121.245 li
107.877 110.955 mo
121.377 120.405 li
108.927 110.115 mo
122.277 119.46 li
109.977 109.275 mo
123.177 118.62 li
110.877 108.54 mo
124.077 117.675 li
111.927 107.7 mo
124.977 116.835 li
112.977 106.965 mo
125.877 115.89 li
114.027 106.125 mo
126.777 115.05 li
115.077 105.39 mo
127.677 114.21 li
116.127 104.55 mo
128.577 113.265 li
117.027 103.71 mo
129.477 112.425 li
118.077 102.87 mo
130.377 111.585 li
118.977 102.03 mo
131.277 110.64 li
119.877 101.19 mo
132.177 109.8 li
120.927 100.35 mo
133.227 108.96 li
121.827 99.5103 mo
134.127 108.12 li
122.877 98.6699 mo
135.027 107.28 li
123.927 97.9351 mo
136.077 106.335 li
124.977 97.0952 mo
136.977 105.495 li
126.027 96.3599 mo
137.877 104.655 li
126.927 95.52 mo
138.927 103.815 li
128.127 94.7852 mo
139.827 102.975 li
129.177 94.0498 mo
140.877 102.24 li
130.227 93.21 mo
141.777 101.4 li
131.277 92.4751 mo
142.827 100.56 li
132.477 91.7397 mo
143.877 99.7202 li
133.527 91.0049 mo
144.927 98.9849 li
134.427 90.165 mo
145.977 98.145 li
135.477 89.4297 mo
147.027 97.4102 li
136.527 88.5898 mo
148.077 96.6748 li
137.577 87.75 mo
149.127 95.835 li
138.627 87.0151 mo
150.177 95.1001 li
139.677 86.1748 mo
151.227 94.3647 li
140.727 85.4399 mo
152.427 93.6299 li
141.627 84.6001 mo
153.477 92.895 li
142.677 83.8647 mo
154.527 92.1602 li
143.727 83.0249 mo
155.727 91.4248 li
144.777 82.29 mo
156.777 90.6899 li
145.827 81.4502 mo
157.977 89.9551 li
146.877 80.7148 mo
159.177 89.2202 li
148.077 79.98 mo
160.227 88.4849 li
149.127 79.1401 mo
161.427 87.855 li
150.177 78.4048 mo
162.777 87.2251 li
151.227 77.6699 mo
163.977 86.5952 li
152.277 76.8301 mo
165.177 85.9648 li
153.327 76.0952 mo
166.527 85.335 li
154.377 75.3599 mo
167.727 84.7051 li
155.427 74.52 mo
169.077 84.0752 li
156.477 73.7852 mo
170.427 83.4453 li
157.527 72.9453 mo
171.627 82.9199 li
158.577 72.21 mo
172.977 82.29 li
159.627 71.4751 mo
174.327 81.7651 li
160.677 70.6353 mo
175.827 81.2397 li
161.727 69.8999 mo
177.177 80.6099 li
162.927 69.165 mo
178.527 80.1899 li
163.977 68.4297 mo
180.177 79.665 li
165.177 67.6953 mo
181.677 79.2451 li
166.227 66.96 mo
183.177 78.7202 li
167.427 66.3301 mo
184.677 78.2998 li
168.627 65.5952 mo
186.177 77.8799 li
169.827 64.9648 mo
187.677 77.46 li
171.177 64.335 mo
189.177 76.9351 li
172.377 63.6001 mo
190.827 76.5151 li
173.427 62.8647 mo
192.327 76.2002 li
174.627 62.1299 mo
193.977 75.7798 li
175.677 61.5 mo
195.627 75.4648 li
176.727 60.7651 mo
197.427 75.1499 li
177.927 60.0298 mo
199.227 74.835 li
178.977 59.2949 mo
200.877 74.625 li
180.177 58.5601 mo
202.677 74.3101 li
181.377 57.8252 mo
204.477 73.9951 li
182.427 57.0898 mo
206.127 73.6797 li
183.627 56.46 mo
208.077 73.4702 li
184.977 55.8301 mo
209.877 73.2603 li
186.177 55.2002 mo
211.677 72.9453 li
187.527 54.5703 mo
213.477 72.7349 li
188.877 53.9399 mo
215.277 72.4199 li
190.077 53.3101 mo
217.077 72.21 li
191.277 52.6797 mo
218.877 72 li
192.477 52.0498 mo
220.827 71.895 li
193.827 51.4199 mo
222.777 71.6851 li
195.027 50.79 mo
224.727 71.5801 li
196.377 50.1602 mo
226.677 71.3701 li
@
32.7266 265.831 mo
32.877 265.935 li
32.7266 264.255 mo
34.2266 265.409 li
32.7266 262.784 mo
35.7266 264.886 li
32.7266 261.21 mo
37.0767 264.36 li
32.7266 259.739 mo
38.2769 263.624 li
32.7266 258.165 mo
38.877 262.47 li
32.7266 256.694 mo
39.3267 261.315 li
32.7266 255.226 mo
39.7769 260.159 li
32.7266 253.649 mo
40.2266 259.005 li
32.7266 252.181 mo
40.8267 257.851 li
32.7266 250.604 mo
41.2769 256.591 li
32.7266 249.136 mo
41.7266 255.435 li
32.7266 247.56 mo
42.1768 254.28 li
32.7266 246.091 mo
42.627 253.124 li
32.7266 244.62 mo
43.2266 251.97 li
32.7266 243.044 mo
43.6768 250.815 li
32.7266 241.575 mo
44.127 249.556 li
32.7266 239.999 mo
44.7266 248.399 li
32.7266 238.53 mo
45.1768 247.245 li
@
gsave
32.7266 266.04 mo
32.7266 .600098 li
507.026 .600098 li
507.026 266.04 li
32.7266 266.04 li
cp
clp
.75 lw
37.2925 266.022 mo
38.127 263.94 li
43.8267 250.499 li
49.377 237.479 li
54.9268 225.091 li
60.4766 213.331 li
66.0269 202.095 li
71.5767 191.595 li
77.127 181.726 li
82.8267 172.274 li
88.377 163.245 li
93.9268 154.845 li
99.4766 147.075 li
105.027 139.725 li
110.577 132.585 li
116.127 125.97 li
121.677 119.985 li
127.377 114.525 li
132.927 109.17 li
138.477 104.235 li
144.027 99.6147 li
149.577 95.52 li
155.127 91.7397 li
160.677 88.1699 li
166.377 85.335 li
171.927 82.8149 li
177.477 80.5049 li
183.027 78.8252 li
188.577 77.145 li
194.127 75.6748 li
199.677 74.73 li
205.227 73.8901 li
210.927 73.1548 li
216.477 72.3149 li
222.027 71.6851 li
227.577 71.3701 li
233.127 71.0547 li
238.677 71.0547 li
244.227 70.6353 li
249.927 70.4248 li
255.477 70.8452 li
261.026 70.6353 li
266.577 70.8452 li
272.127 70.9502 li
283.227 70.9502 li
288.776 71.0547 li
294.477 71.3701 li
300.026 71.6851 li
305.577 71.3701 li
311.127 71.2651 li
316.676 71.895 li
322.227 72.21 li
327.776 73.2603 li
333.477 74.415 li
339.026 74.835 li
344.577 75.4648 li
350.127 76.2002 li
355.676 77.355 li
361.227 78.1953 li
366.776 79.1401 li
372.477 80.1899 li
378.026 81.3452 li
383.577 82.605 li
389.127 83.7603 li
394.676 84.7051 li
400.227 85.8599 li
405.776 87.3301 li
411.327 88.5898 li
417.026 90.0601 li
422.577 91.9502 li
428.127 93.6299 li
433.676 95.415 li
439.227 97.3047 li
444.776 98.9849 li
450.327 100.77 li
456.026 103.08 li
461.577 105.075 li
467.127 107.28 li
472.676 110.115 li
478.227 112.53 li
483.776 115.155 li
489.327 118.095 li
494.877 121.14 li
500.577 124.185 li
506.127 127.335 li
511.676 130.8 li
32.5767 201.886 mo
38.127 192.749 li
43.8267 183.825 li
49.377 175.11 li
54.9268 167.024 li
60.4766 159.36 li
66.0269 152.114 li
71.5767 145.605 li
77.127 139.725 li
82.8267 134.265 li
88.377 128.805 li
93.9268 123.345 li
99.4766 118.095 li
105.027 113.16 li
110.577 108.75 li
116.127 104.55 li
121.677 99.6147 li
127.377 95.3101 li
132.927 91.4248 li
138.477 87.1201 li
144.027 82.8149 li
149.577 78.8252 li
155.127 74.73 li
160.677 70.6353 li
166.377 66.855 li
171.927 63.915 li
177.477 60.2397 li
183.027 56.7749 li
188.577 54.1499 li
194.127 51.21 li
199.677 48.585 li
205.227 45.96 li
210.927 43.7549 li
216.477 41.7603 li
222.027 39.6602 li
227.577 37.665 li
233.127 36.0898 li
238.677 34.5151 li
244.227 32.9399 li
249.927 31.3647 li
255.477 30.4199 li
261.026 29.4751 li
266.577 28.7397 li
272.127 27.7949 li
277.676 26.8501 li
283.227 25.9048 li
288.776 25.2749 li
294.477 24.96 li
300.026 24.96 li
305.577 24.2251 li
311.127 23.2798 li
316.676 23.1748 li
322.227 22.8599 li
327.776 22.9648 li
333.477 23.1748 li
339.026 23.0703 li
344.577 23.1748 li
350.127 23.1748 li
355.676 23.4897 li
361.227 23.8047 li
366.776 24.0151 li
372.477 24.2251 li
378.026 24.75 li
383.577 25.1699 li
389.127 25.6953 li
394.676 26.3252 li
400.227 26.9551 li
405.776 27.6899 li
411.327 28.4248 li
417.026 29.2651 li
422.577 30.21 li
428.127 31.2603 li
433.676 32.3101 li
439.227 33.2549 li
444.776 34.4102 li
450.327 35.6699 li
456.026 36.8252 li
461.577 38.085 li
467.127 39.4502 li
472.676 40.605 li
478.227 42.0752 li
483.776 43.7549 li
489.327 45.2251 li
494.877 46.3799 li
500.577 47.7451 li
506.127 49.5298 li
511.676 51.21 li
511.676 130.8 mo
506.127 127.335 li
500.577 124.185 li
494.877 121.14 li
489.327 118.095 li
483.776 115.155 li
478.227 112.53 li
472.676 110.115 li
467.127 107.28 li
461.577 105.075 li
456.026 103.08 li
450.327 100.77 li
444.776 98.9849 li
439.227 97.3047 li
433.676 95.415 li
428.127 93.6299 li
422.577 91.9502 li
417.026 90.0601 li
411.327 88.5898 li
405.776 87.3301 li
400.227 85.8599 li
394.676 84.7051 li
389.127 83.7603 li
383.577 82.605 li
378.026 81.3452 li
372.477 80.1899 li
366.776 79.1401 li
361.227 78.1953 li
355.676 77.355 li
350.127 76.2002 li
344.577 75.4648 li
339.026 74.835 li
333.477 74.415 li
327.776 73.2603 li
322.227 72.21 li
316.676 71.895 li
311.127 71.2651 li
305.577 71.3701 li
300.026 71.6851 li
294.477 71.3701 li
288.776 71.0547 li
283.227 70.9502 li
272.127 70.9502 li
266.577 70.8452 li
261.026 70.6353 li
255.477 70.8452 li
249.927 70.4248 li
244.227 70.6353 li
238.677 71.0547 li
233.127 71.0547 li
227.577 71.3701 li
222.027 71.6851 li
216.477 72.3149 li
210.927 73.1548 li
205.227 73.8901 li
199.677 74.73 li
194.127 75.6748 li
188.577 77.145 li
183.027 78.8252 li
177.477 80.5049 li
171.927 82.8149 li
166.377 85.335 li
160.677 88.1699 li
155.127 91.7397 li
149.577 95.52 li
144.027 99.6147 li
138.477 104.235 li
132.927 109.17 li
127.377 114.525 li
121.677 119.985 li
116.127 125.97 li
110.577 132.585 li
105.027 139.725 li
99.4766 147.075 li
93.9268 154.845 li
88.377 163.245 li
82.8267 172.274 li
77.127 181.726 li
71.5767 191.595 li
66.0269 202.095 li
60.4766 213.331 li
54.9268 225.091 li
49.377 237.479 li
43.8267 250.499 li
38.127 263.94 li
32.7266 266.04 li
32.7266 201.886 li
32.7266 201.886 li
38.127 192.749 li
43.8267 183.825 li
49.377 175.11 li
54.9268 167.024 li
60.4766 159.36 li
66.0269 152.114 li
71.5767 145.605 li
77.127 139.725 li
82.8267 134.265 li
88.377 128.805 li
93.9268 123.345 li
99.4766 118.095 li
105.027 113.16 li
110.577 108.75 li
116.127 104.55 li
121.677 99.6147 li
127.377 95.3101 li
132.927 91.4248 li
138.477 87.1201 li
144.027 82.8149 li
149.577 78.8252 li
155.127 74.73 li
160.677 70.6353 li
166.377 66.855 li
171.927 63.915 li
177.477 60.2397 li
183.027 56.7749 li
188.577 54.1499 li
194.127 51.21 li
199.677 48.585 li
205.227 45.96 li
210.927 43.7549 li
216.477 41.7603 li
222.027 39.6602 li
227.577 37.665 li
233.127 36.0898 li
238.677 34.5151 li
244.227 32.9399 li
249.927 31.3647 li
255.477 30.4199 li
261.026 29.4751 li
266.577 28.7397 li
272.127 27.7949 li
277.676 26.8501 li
283.227 25.9048 li
288.776 25.2749 li
294.477 24.96 li
300.026 24.96 li
305.577 24.2251 li
311.127 23.2798 li
316.676 23.1748 li
322.227 22.8599 li
327.776 22.9648 li
333.477 23.1748 li
339.026 23.0703 li
344.577 23.1748 li
350.127 23.1748 li
355.676 23.4897 li
361.227 23.8047 li
366.776 24.0151 li
372.477 24.2251 li
378.026 24.75 li
383.577 25.1699 li
389.127 25.6953 li
394.676 26.3252 li
400.227 26.9551 li
405.776 27.6899 li
411.327 28.4248 li
417.026 29.2651 li
422.577 30.21 li
428.127 31.2603 li
433.676 32.3101 li
439.227 33.2549 li
444.776 34.4102 li
450.327 35.6699 li
456.026 36.8252 li
461.577 38.085 li
467.127 39.4502 li
472.676 40.605 li
478.227 42.0752 li
483.776 43.7549 li
489.327 45.2251 li
494.877 46.3799 li
500.577 47.7451 li
506.127 49.5298 li
511.676 51.21 li
@
grestore
180.927 84.8101 mo
364.827 213.54 li
183.177 83.3398 mo
375.776 218.265 li
186.327 82.5 mo
385.077 221.624 li
189.177 81.4502 mo
399.327 228.556 li
191.577 80.085 mo
411.627 234.12 li
193.977 78.7202 mo
420.327 237.165 li
196.227 77.25 mo
431.276 241.89 li
198.327 75.7798 mo
448.227 250.815 li
200.877 74.52 mo
471.776 264.149 li
203.877 73.5752 mo
478.676 266.04 li
206.727 72.5249 mo
483.026 266.04 li
209.427 71.4751 mo
487.377 266.04 li
212.277 70.4248 mo
491.727 266.04 li
215.127 69.375 mo
496.077 266.04 li
217.977 68.3252 mo
500.426 266.04 li
220.677 67.2749 mo
504.627 266.04 li
223.677 66.3301 mo
507.026 264.569 li
226.827 65.3853 mo
507.026 261.524 li
230.277 64.7549 mo
507.026 258.479 li
233.727 64.125 mo
507.026 255.54 li
236.877 63.3901 mo
507.026 252.495 li
240.177 62.6548 mo
507.026 249.45 li
243.627 62.1299 mo
507.026 246.405 li
247.227 61.605 mo
507.026 243.36 li
250.827 61.0801 mo
507.026 240.315 li
254.276 60.3452 mo
507.026 237.271 li
258.026 60.0298 mo
507.026 234.331 li
262.077 59.8203 mo
507.026 231.284 li
265.827 59.3999 mo
507.026 228.239 li
270.026 59.2949 mo
507.026 225.194 li
274.377 59.2949 mo
507.026 222.149 li
278.727 59.2949 mo
507.026 219.104 li
283.526 59.7148 mo
507.026 216.06 li
288.926 60.4502 mo
507.026 213.12 li
293.727 60.8701 mo
507.026 210.075 li
299.426 61.8149 mo
507.026 207.03 li
305.276 62.7603 mo
507.026 203.985 li
311.577 64.23 mo
507.026 200.94 li
318.627 66.0151 mo
507.026 197.896 li
325.676 68.0103 mo
507.026 194.956 li
333.477 70.4248 mo
507.026 191.909 li
342.776 73.8901 mo
507.026 188.864 li
354.627 79.2451 mo
507.026 185.819 li
503.577 180.466 mo
507.026 182.774 li
369.776 86.8047 mo
476.727 161.565 li
171.627 90.585 mo
159.327 99.2998 li
188.427 81.8701 mo
126.927 124.92 li
205.227 73.1548 mo
110.727 139.305 li
214.677 69.585 mo
98.2769 151.065 li
223.677 66.2251 mo
90.627 159.36 li
230.127 64.7549 mo
84.0269 167.13 li
236.427 63.4951 mo
78.3267 174.06 li
242.427 62.3398 mo
72.9268 180.989 li
247.827 61.5 mo
68.2769 187.185 li
253.677 60.5547 mo
64.0767 193.169 li
258.627 60.0298 mo
60.0269 199.05 li
263.426 59.6099 mo
56.127 204.825 li
124.677 159.78 mo
52.6768 210.284 li
268.227 59.2949 mo
159.477 135.525 li
115.527 169.229 mo
49.2266 215.64 li
272.577 59.2949 mo
168.927 131.85 li
108.927 176.999 mo
46.0767 220.89 li
277.077 59.2949 mo
175.677 130.17 li
103.227 183.931 mo
42.9268 226.14 li
280.977 59.5049 mo
180.777 129.645 li
98.2769 190.44 mo
39.9268 231.284 li
284.727 59.9248 mo
185.127 129.645 li
93.7769 196.636 mo
37.2266 236.22 li
288.477 60.3452 mo
189.177 129.855 li
90.0269 202.2 mo
34.6768 241.05 li
292.227 60.6602 mo
193.377 129.96 li
86.5767 207.659 mo
32.7266 245.46 li
295.977 61.1851 mo
197.577 130.065 li
83.2769 213.12 mo
32.7266 248.505 li
299.426 61.8149 mo
201.177 130.485 li
79.9766 218.37 mo
32.7266 251.55 li
302.877 62.3398 mo
204.477 131.325 li
76.8267 223.62 mo
32.7266 254.489 li
306.327 62.9702 mo
207.627 132.06 li
74.127 228.556 mo
32.7266 257.534 li
309.627 63.7051 mo
210.777 132.9 li
71.4268 233.489 mo
32.7266 260.581 li
312.776 64.5449 mo
213.777 133.845 li
68.877 238.319 mo
32.7266 263.624 li
315.926 65.3853 mo
216.777 134.79 li
66.4766 243.044 mo
33.627 266.04 li
319.077 66.2251 mo
219.477 135.84 li
63.9268 247.771 mo
37.9766 266.04 li
322.227 66.96 mo
222.327 136.995 li
61.5269 252.495 mo
42.3267 266.04 li
325.227 67.9048 mo
225.027 138.045 li
59.127 257.22 mo
46.5269 266.04 li
328.377 68.7451 mo
227.727 139.2 li
57.0269 261.735 mo
50.877 266.04 li
331.377 69.6899 mo
230.577 140.25 li
334.227 70.7397 mo
233.427 141.3 li
337.077 71.79 mo
236.127 142.455 li
339.776 72.8398 mo
238.677 143.61 li
342.627 73.8901 mo
241.077 144.975 li
345.477 74.9399 mo
243.477 146.34 li
348.026 76.2002 mo
245.877 147.706 li
350.727 77.355 mo
248.127 149.174 li
353.276 78.6147 mo
250.527 150.54 li
355.827 79.77 mo
252.776 151.905 li
358.526 81.0298 mo
255.177 153.374 li
361.077 82.29 mo
257.577 154.739 li
363.477 83.5498 mo
259.827 156.104 li
366.026 84.8101 mo
262.227 157.47 li
368.577 86.0703 mo
264.477 158.94 li
370.977 87.4351 mo
266.727 160.409 li
373.377 88.6953 mo
268.977 161.774 li
375.776 90.165 mo
271.377 163.245 li
378.026 91.5298 mo
273.627 164.61 li
380.426 92.895 mo
276.026 165.976 li
382.676 94.2603 mo
278.276 167.341 li
385.077 95.73 mo
280.676 168.81 li
387.327 97.0952 mo
283.077 170.175 li
389.727 98.5649 mo
285.327 171.54 li
391.977 99.9297 mo
287.727 172.905 li
394.227 101.4 mo
290.127 174.271 li
396.477 102.87 mo
292.526 175.636 li
398.727 104.34 mo
294.926 176.999 li
400.827 105.81 mo
297.176 178.47 li
403.077 107.385 mo
299.426 179.94 li
405.176 108.96 mo
301.676 181.306 li
407.276 110.43 mo
304.077 182.669 li
409.377 112.005 mo
306.627 183.931 li
411.477 113.58 mo
309.477 184.979 li
413.727 115.05 mo
312.026 186.136 li
415.827 116.52 mo
314.426 187.499 li
418.077 118.095 mo
316.827 188.97 li
420.176 119.67 mo
319.227 190.229 li
422.276 121.14 mo
321.627 191.595 li
424.377 122.715 mo
323.877 193.065 li
426.477 124.29 mo
326.127 194.534 li
428.577 125.865 mo
328.227 196.005 li
430.676 127.335 mo
330.477 197.476 li
432.926 128.91 mo
332.727 198.944 li
435.026 130.485 mo
335.577 199.995 li
436.977 132.06 mo
338.577 200.94 li
439.077 133.635 mo
341.276 202.095 li
441.176 135.105 mo
343.977 203.146 li
443.426 136.68 mo
346.377 204.511 li
445.526 138.15 mo
348.776 205.979 li
447.627 139.725 mo
350.877 207.45 li
449.877 141.3 mo
353.127 209.024 li
451.827 142.875 mo
355.227 210.495 li
453.776 144.555 mo
357.926 211.649 li
455.727 146.13 mo
360.776 212.595 li
457.827 147.81 mo
364.077 213.435 li
459.926 149.385 mo
367.227 214.169 li
462.026 150.855 mo
369.926 215.431 li
464.127 152.431 mo
372.477 216.585 li
466.377 153.899 mo
375.026 217.845 li
468.477 155.476 mo
377.577 219.104 li
470.727 156.944 mo
380.577 220.05 li
472.827 158.521 mo
383.426 220.995 li
474.776 160.095 mo
386.276 222.149 li
476.877 161.669 mo
388.977 223.2 li
478.827 163.351 mo
391.377 224.669 li
480.926 164.925 mo
393.627 226.034 li
482.877 166.604 mo
396.176 227.294 li
484.977 168.181 mo
398.877 228.45 li
487.227 169.649 mo
401.577 229.499 li
489.327 171.12 mo
404.426 230.655 li
491.727 172.485 mo
406.977 231.81 li
494.127 173.851 mo
409.526 233.069 li
496.377 175.319 mo
412.077 234.331 li
498.477 176.896 mo
414.926 235.38 li
500.577 178.364 mo
417.776 236.325 li
502.827 179.94 mo
420.776 237.374 li
505.077 181.409 mo
423.477 238.425 li
507.026 183.091 mo
426.176 239.581 li
507.026 186.03 mo
428.877 240.735 li
507.026 189.075 mo
431.426 241.995 li
507.026 192.12 mo
433.977 243.149 li
507.026 195.165 mo
436.526 244.409 li
507.026 198.21 mo
439.077 245.669 li
507.026 201.255 mo
441.327 247.14 li
507.026 204.194 mo
443.727 248.505 li
507.026 207.239 mo
446.127 249.87 li
507.026 210.284 mo
448.827 251.024 li
507.026 213.331 mo
451.526 252.075 li
507.026 216.374 mo
454.377 253.124 li
507.026 219.419 mo
456.926 254.386 li
507.026 222.466 mo
459.026 255.96 li
507.026 225.405 mo
461.127 257.64 li
507.026 228.45 mo
463.077 259.216 li
507.026 231.495 mo
465.176 260.79 li
507.026 234.54 mo
467.276 262.261 li
507.026 237.585 mo
469.977 263.415 li
507.026 240.63 mo
472.827 264.569 li
507.026 243.675 mo
475.827 265.409 li
507.026 246.614 mo
479.276 266.04 li
507.026 249.659 mo
483.627 266.04 li
507.026 252.706 mo
487.977 266.04 li
507.026 255.749 mo
492.327 266.04 li
507.026 258.794 mo
496.676 266.04 li
507.026 261.841 mo
501.026 266.04 li
507.026 264.78 mo
505.227 266.04 li
0 1 0 rgb
@
32.7266 265.831 mo
33.0269 266.04 li
32.7266 262.784 mo
37.377 266.04 li
32.7266 259.739 mo
41.5767 266.04 li
32.7266 256.694 mo
45.9268 266.04 li
32.7266 253.649 mo
50.2769 266.04 li
32.7266 250.604 mo
54.627 266.04 li
32.7266 247.56 mo
55.9766 263.94 li
32.7266 244.62 mo
57.0269 261.63 li
33.9268 242.415 mo
58.0767 259.319 li
35.127 240.21 mo
59.2769 257.114 li
36.1768 238.005 mo
60.3267 254.806 li
37.377 235.8 mo
61.5269 252.601 li
38.5767 233.595 mo
62.5767 250.396 li
39.9268 231.39 mo
63.7769 248.19 li
41.127 229.29 mo
64.9766 245.985 li
42.3267 227.085 mo
66.0269 243.675 li
43.6768 224.985 mo
67.2266 241.47 li
44.877 222.886 mo
68.4268 239.265 li
46.2266 220.681 mo
69.4766 237.06 li
47.4268 218.581 mo
70.6768 234.854 li
48.7769 216.479 mo
71.877 232.649 li
50.127 214.38 mo
73.0767 230.444 li
51.3267 212.28 mo
74.2769 228.239 li
52.6768 210.181 mo
75.4766 226.034 li
54.0269 207.976 mo
76.6768 223.935 li
55.377 205.979 mo
78.0269 221.729 li
56.7266 203.88 mo
79.2266 219.63 li
58.2266 201.78 mo
80.5767 217.53 li
59.5767 199.784 mo
81.7769 215.431 li
60.9268 197.685 mo
83.127 213.226 li
62.4268 195.69 mo
84.4766 211.124 li
63.7769 193.694 mo
85.8267 209.024 li
65.127 191.595 mo
87.0269 206.925 li
66.627 189.601 mo
88.377 204.825 li
68.127 187.604 mo
89.7266 202.726 li
69.4766 185.505 mo
91.0767 200.624 li
70.9766 183.511 mo
92.4268 198.63 li
72.4766 181.515 mo
93.7769 196.53 li
73.9766 179.624 mo
95.2769 194.534 li
75.4766 177.63 mo
96.7769 192.54 li
77.127 175.739 mo
98.2769 190.544 li
78.627 173.745 mo
99.7769 188.55 li
80.127 171.854 mo
101.277 186.556 li
81.7769 169.86 mo
102.777 184.56 li
83.2769 167.97 mo
104.277 182.669 li
84.9268 166.081 mo
105.777 180.675 li
86.5767 164.085 mo
107.427 178.784 li
88.0767 162.194 mo
108.927 176.79 li
89.877 160.409 mo
110.577 174.899 li
91.5269 158.521 mo
112.227 173.011 li
93.1768 156.63 mo
113.877 171.12 li
94.8267 154.845 mo
115.527 169.335 li
96.4766 152.956 mo
117.177 167.444 li
98.2769 151.065 mo
118.977 165.659 li
99.9268 149.28 mo
120.627 163.771 li
101.727 147.6 mo
122.427 161.985 li
103.677 145.815 mo
124.227 160.2 li
105.477 144.03 mo
126.027 158.521 li
107.427 142.35 mo
127.977 156.735 li
109.227 140.67 mo
129.777 155.056 li
111.177 138.99 mo
131.727 153.271 li
112.977 137.205 mo
133.527 151.591 li
114.927 135.525 mo
135.627 150.015 li
116.727 133.74 mo
137.577 148.44 li
118.677 132.06 mo
139.827 146.865 li
120.477 130.38 mo
141.927 145.395 li
122.427 128.7 mo
144.177 143.924 li
124.377 127.02 mo
146.427 142.455 li
126.327 125.445 mo
148.677 140.985 li
128.277 123.66 mo
151.077 139.62 li
130.227 121.98 mo
153.477 138.36 li
132.027 120.195 mo
156.027 136.995 li
133.977 118.515 mo
158.577 135.84 li
135.777 116.835 mo
161.277 134.685 li
137.727 115.155 mo
164.127 133.635 li
139.827 113.58 mo
166.827 132.48 li
142.077 112.11 mo
169.827 131.64 li
144.177 110.64 mo
172.977 130.8 li
146.277 108.96 mo
176.277 130.065 li
148.227 107.385 mo
180.177 129.75 li
150.327 105.81 mo
184.377 129.645 li
152.427 104.235 mo
188.877 129.855 li
154.527 102.765 mo
193.527 129.96 li
156.627 101.19 mo
198.027 130.065 li
158.877 99.6147 mo
203.877 131.115 li
160.977 98.04 mo
210.477 132.795 li
162.927 96.4648 mo
218.877 135.63 li
165.027 94.8901 mo
228.927 139.62 li
167.277 93.4199 mo
240.177 144.45 li
169.527 91.9502 mo
271.227 163.14 li
171.777 90.48 mo
300.026 180.255 li
174.027 89.1147 mo
316.077 188.55 li
176.277 87.645 mo
337.977 200.729 li
178.527 86.1748 mo
357.627 211.44 li
@
gsave
32.7266 266.04 mo
32.7266 .600098 li
507.026 .600098 li
507.026 266.04 li
32.7266 266.04 li
cp
clp
.75 lw
54.9268 266.04 mo
58.9766 257.534 li
60.4766 254.489 li
66.0269 243.78 li
71.5767 233.069 li
75.7769 225.511 li
77.127 222.989 li
82.8267 213.854 li
88.377 204.931 li
92.7266 198.21 li
93.9268 196.425 li
99.4766 188.864 li
105.027 181.62 li
110.577 174.899 li
116.127 168.601 li
121.677 162.614 li
127.377 157.261 li
132.927 152.22 li
137.127 148.755 li
138.477 147.706 li
144.027 144.03 li
149.577 140.355 li
154.377 137.835 li
155.127 137.415 li
160.677 134.895 li
166.377 132.69 li
171.177 131.22 li
171.927 131.01 li
176.127 130.065 li
177.477 129.855 li
181.977 129.645 li
183.027 129.54 li
188.577 129.75 li
194.127 129.96 li
199.077 130.065 li
199.677 130.17 li
205.227 131.535 li
210.927 132.9 li
216.477 134.685 li
222.027 136.785 li
227.577 139.095 li
233.127 141.195 li
237.777 143.19 li
238.677 143.61 li
244.227 146.865 li
249.927 150.225 li
255.477 153.585 li
261.026 156.735 li
266.577 160.306 li
272.127 163.771 li
277.676 167.024 li
283.227 170.28 li
288.776 173.534 li
294.477 176.685 li
300.026 180.255 li
305.127 183.3 li
305.577 183.511 li
311.127 185.61 li
316.676 188.864 li
322.227 191.909 li
327.776 195.794 li
332.727 199.05 li
333.477 199.364 li
335.127 200.101 li
339.026 201.044 li
343.227 202.726 li
344.577 203.354 li
348.026 205.456 li
350.127 206.819 li
355.676 210.81 li
357.776 211.755 li
361.227 212.806 li
365.877 213.749 li
366.776 213.96 li
370.077 215.431 li
372.477 216.479 li
378.026 219.315 li
383.577 220.995 li
388.227 222.886 li
389.127 223.306 li
394.676 226.665 li
397.977 228.136 li
400.227 228.976 li
405.776 231.181 li
411.327 234.12 li
417.026 236.114 li
422.577 238.005 li
428.127 240.315 li
433.676 243.044 li
439.227 245.774 li
444.776 249.239 li
447.776 250.604 li
450.327 251.655 li
454.977 253.229 li
456.026 253.649 li
458.127 255.226 li
461.577 257.956 li
466.676 261.944 li
467.127 262.155 li
469.377 263.31 li
472.676 264.569 li
478.227 267.091 li
32.5767 244.726 mo
37.5269 235.694 li
38.127 234.331 li
43.8267 224.669 li
49.377 215.534 li
54.9268 206.61 li
60.4766 198.419 li
66.0269 190.335 li
71.5767 182.565 li
77.127 175.53 li
82.8267 168.601 li
88.377 161.985 li
93.9268 155.896 li
99.4766 149.7 li
105.027 144.45 li
110.577 139.41 li
116.127 134.265 li
121.677 129.225 li
127.377 124.605 li
132.927 119.46 li
137.727 115.155 li
138.477 114.525 li
144.027 110.745 li
149.577 106.335 li
155.127 102.345 li
160.677 98.145 li
166.377 93.9453 li
171.927 90.48 li
177.477 86.9102 li
182.127 83.8647 li
183.027 83.4453 li
188.577 81.8701 li
191.277 80.3999 li
194.127 78.6147 li
199.077 75.2549 li
199.677 74.9399 li
205.227 73.1548 li
210.927 70.9502 li
216.477 68.9551 li
222.027 66.75 li
227.577 65.1748 li
233.127 64.335 li
238.677 62.8647 li
244.227 62.0249 li
249.927 61.1851 li
255.477 60.1353 li
261.026 59.9248 li
266.577 59.2949 li
272.127 59.3999 li
277.676 59.2949 li
283.227 59.7148 li
288.776 60.4502 li
294.477 60.8701 li
300.026 61.9199 li
305.577 62.8647 li
311.127 64.02 li
316.676 65.5952 li
322.227 66.96 li
327.776 68.6401 li
333.477 70.4248 li
339.026 72.5249 li
344.577 74.52 li
350.127 77.04 li
355.676 79.665 li
361.227 82.395 li
366.776 85.23 li
372.477 88.1699 li
378.026 91.4248 li
383.577 94.7852 li
389.127 98.145 li
394.676 101.715 li
400.227 105.39 li
405.776 109.38 li
411.327 113.475 li
417.026 117.255 li
422.577 121.35 li
428.127 125.445 li
433.676 129.435 li
439.227 133.74 li
444.776 137.625 li
450.327 141.72 li
456.026 146.34 li
461.577 150.54 li
467.127 154.425 li
472.676 158.415 li
478.227 162.825 li
483.776 167.341 li
489.327 171.12 li
494.877 174.374 li
500.577 178.364 li
506.127 182.146 li
507.327 266.04 mo
478.227 266.04 li
472.676 264.569 li
467.127 262.155 li
461.577 257.956 li
456.026 253.649 li
450.327 251.655 li
444.776 249.239 li
439.227 245.774 li
433.676 243.044 li
428.127 240.315 li
422.577 238.005 li
417.026 236.114 li
411.327 234.12 li
405.776 231.181 li
400.227 228.976 li
394.676 226.665 li
389.127 223.306 li
383.577 220.995 li
378.026 219.315 li
372.477 216.479 li
366.776 213.96 li
361.227 212.806 li
355.676 210.81 li
350.127 206.819 li
344.577 203.354 li
339.026 201.044 li
333.477 199.364 li
327.776 195.794 li
322.227 191.909 li
316.676 188.864 li
311.127 185.61 li
305.577 183.511 li
300.026 180.255 li
294.477 176.685 li
288.776 173.534 li
283.227 170.28 li
277.676 167.024 li
272.127 163.771 li
266.577 160.306 li
261.026 156.735 li
255.477 153.585 li
249.927 150.225 li
244.227 146.865 li
238.677 143.61 li
233.127 141.195 li
227.577 139.095 li
222.027 136.785 li
216.477 134.685 li
210.927 132.9 li
205.227 131.535 li
199.677 130.17 li
194.127 129.96 li
188.577 129.75 li
183.027 129.54 li
177.477 129.855 li
171.927 131.01 li
166.377 132.69 li
160.677 134.895 li
155.127 137.415 li
149.577 140.355 li
144.027 144.03 li
138.477 147.706 li
132.927 152.22 li
127.377 157.261 li
121.677 162.614 li
116.127 168.601 li
110.577 174.899 li
105.027 181.62 li
99.4766 188.864 li
93.9268 196.425 li
88.377 204.931 li
82.8267 213.854 li
77.127 222.989 li
71.5767 233.069 li
66.0269 243.78 li
60.4766 254.489 li
54.9268 266.04 li
32.7266 266.04 li
32.7266 244.726 li
32.7266 244.726 li
38.127 234.331 li
43.8267 224.669 li
49.377 215.534 li
54.9268 206.61 li
60.4766 198.419 li
66.0269 190.335 li
71.5767 182.565 li
77.127 175.53 li
82.8267 168.601 li
88.377 161.985 li
93.9268 155.896 li
99.4766 149.7 li
105.027 144.45 li
110.577 139.41 li
116.127 134.265 li
121.677 129.225 li
127.377 124.605 li
132.927 119.46 li
138.477 114.525 li
144.027 110.745 li
149.577 106.335 li
155.127 102.345 li
160.677 98.145 li
166.377 93.9453 li
171.927 90.48 li
177.477 86.9102 li
183.027 83.4453 li
188.577 81.8701 li
194.127 78.6147 li
199.677 74.9399 li
205.227 73.1548 li
210.927 70.9502 li
216.477 68.9551 li
222.027 66.75 li
227.577 65.1748 li
233.127 64.335 li
238.677 62.8647 li
244.227 62.0249 li
249.927 61.1851 li
255.477 60.1353 li
261.026 59.9248 li
266.577 59.2949 li
272.127 59.3999 li
277.676 59.2949 li
283.227 59.7148 li
288.776 60.4502 li
294.477 60.8701 li
300.026 61.9199 li
305.577 62.8647 li
311.127 64.02 li
316.676 65.5952 li
322.227 66.96 li
327.776 68.6401 li
333.477 70.4248 li
339.026 72.5249 li
344.577 74.52 li
350.127 77.04 li
355.676 79.665 li
361.227 82.395 li
366.776 85.23 li
372.477 88.1699 li
378.026 91.4248 li
383.577 94.7852 li
389.127 98.145 li
394.676 101.715 li
400.227 105.39 li
405.776 109.38 li
411.327 113.475 li
417.026 117.255 li
422.577 121.35 li
428.127 125.445 li
433.676 129.435 li
439.227 133.74 li
444.776 137.625 li
450.327 141.72 li
456.026 146.34 li
461.577 150.54 li
467.127 154.425 li
472.676 158.415 li
478.227 162.825 li
483.776 167.341 li
489.327 171.12 li
494.877 174.374 li
500.577 178.364 li
506.127 182.146 li
511.676 185.61 li
@
grestore
32.7266 264.044 mo
37.6768 266.04 li
32.7266 260.265 mo
46.8267 266.04 li
32.7266 256.591 mo
55.0767 265.62 li
32.7266 252.915 mo
56.7266 262.575 li
32.7266 249.136 mo
58.2266 259.53 li
32.7266 245.46 mo
59.877 256.38 li
33.627 242.101 mo
61.377 253.335 li
35.2769 239.056 mo
63.0269 250.29 li
36.9268 236.011 mo
64.6768 247.245 li
38.7266 233.069 mo
66.1768 244.2 li
40.5269 230.13 mo
67.8267 241.155 li
42.3267 227.085 mo
69.627 238.11 li
44.2769 224.146 mo
71.2769 235.065 li
46.2266 221.206 mo
73.0767 232.021 li
48.1768 218.37 mo
74.877 229.081 li
50.127 215.431 mo
76.5269 226.14 li
52.2266 212.489 mo
78.4766 223.095 li
54.1768 209.655 mo
80.2769 220.155 li
56.2769 206.716 mo
82.0767 217.216 li
58.2266 203.88 mo
84.0269 214.274 li
60.3267 200.94 mo
85.9766 211.335 li
62.5767 198.104 mo
87.9268 208.396 li
64.6768 195.271 mo
90.0269 205.56 li
66.9268 192.54 mo
92.127 202.726 li
69.1768 189.706 mo
94.2266 199.784 li
71.5767 186.976 mo
96.3267 196.95 li
73.9766 184.245 mo
98.5767 194.114 li
76.377 181.515 mo
100.827 191.386 li
78.9268 178.784 mo
103.077 188.55 li
81.3267 176.056 mo
105.327 185.716 li
83.877 173.431 mo
107.727 182.985 li
86.4268 170.7 mo
110.127 180.255 li
89.127 168.075 mo
112.677 177.63 li
91.8267 165.45 mo
115.377 175.005 li
94.6768 162.931 mo
117.927 172.38 li
97.6768 160.409 mo
120.777 169.755 li
100.677 157.89 mo
123.627 167.13 li
103.677 155.37 mo
126.477 164.61 li
106.527 152.851 mo
129.627 162.194 li
109.527 150.331 mo
132.777 159.78 li
112.527 147.81 mo
136.227 157.47 li
115.527 145.395 mo
139.677 155.159 li
118.527 142.875 mo
143.427 152.956 li
121.527 140.355 mo
147.327 150.75 li
124.527 137.835 mo
151.377 148.755 li
127.677 135.42 mo
155.727 146.76 li
429.477 253.755 mo
459.926 266.04 li
130.827 133.005 mo
160.377 144.975 li
379.077 229.604 mo
469.077 266.04 li
364.676 223.831 mo
368.426 225.3 li
133.977 130.59 mo
166.227 143.61 li
316.077 200.415 mo
478.227 266.04 li
299.276 193.694 mo
306.926 196.739 li
137.427 128.28 mo
173.127 142.665 li
281.426 182.774 mo
487.526 266.04 li
140.727 125.865 mo
180.327 141.825 li
258.627 169.755 mo
496.676 266.04 li
143.877 123.45 mo
191.277 142.665 li
229.677 154.425 mo
505.827 266.04 li
147.327 121.14 mo
216.027 148.86 li
150.777 118.83 mo
507.026 262.784 li
154.227 116.415 mo
507.026 259.005 li
157.227 114 mo
507.026 255.331 li
160.227 111.48 mo
507.026 251.655 li
163.677 109.17 mo
507.026 247.874 li
167.427 106.965 mo
507.026 244.2 li
171.327 104.865 mo
507.026 240.524 li
175.077 102.66 mo
507.026 236.745 li
178.977 100.56 mo
507.026 233.069 li
183.177 98.46 mo
507.026 229.396 li
186.927 96.2549 mo
507.026 225.614 li
190.677 94.1548 mo
507.026 221.94 li
194.727 92.0547 mo
507.026 218.265 li
198.627 89.8501 mo
507.026 214.485 li
202.827 87.96 mo
507.026 210.81 li
207.477 86.0703 mo
507.026 207.136 li
212.277 84.2852 mo
507.026 203.354 li
217.677 82.71 mo
507.026 199.681 li
222.927 81.2397 mo
507.026 196.005 li
228.327 79.665 mo
494.877 187.396 li
234.027 78.1953 mo
486.627 180.36 li
238.827 76.4102 mo
475.676 172.169 li
245.427 75.4648 mo
464.577 163.979 li
254.427 75.3599 mo
450.327 154.53 li
262.977 75.1499 mo
440.727 146.97 li
271.227 74.73 mo
429.776 138.78 li
281.276 75.0449 mo
416.727 129.855 li
293.127 76.2002 mo
405.176 121.455 li
305.426 77.46 mo
389.877 111.585 li
323.276 80.9248 mo
367.827 98.8799 li
1 0 0 rgb
@
gsave
32.7266 266.04 mo
32.7266 .600098 li
507.026 .600098 li
507.026 266.04 li
32.7266 266.04 li
cp
clp
.75 lw
54.9268 266.249 mo
60.4766 255.226 li
65.127 246.194 li
66.0269 244.409 li
70.2266 236.851 li
71.5767 234.435 li
77.127 225.091 li
81.7769 217.636 li
82.8267 216.165 li
87.3267 209.444 li
88.377 207.976 li
93.9268 200.206 li
99.4766 192.96 li
104.127 187.081 li
105.027 186.03 li
109.677 180.78 li
110.577 179.835 li
116.127 174.06 li
121.077 169.44 li
121.677 168.81 li
127.377 163.979 li
132.927 159.675 li
138.477 155.896 li
144.027 152.534 li
149.577 149.595 li
155.127 146.97 li
159.477 145.29 li
160.677 144.87 li
165.027 143.82 li
166.377 143.61 li
171.927 142.77 li
177.477 142.035 li
182.427 141.72 li
183.027 141.72 li
187.527 142.035 li
188.577 142.14 li
194.127 143.085 li
199.227 143.82 li
199.677 143.924 li
205.227 145.605 li
210.927 147.075 li
216.477 149.07 li
222.027 151.065 li
226.527 152.64 li
227.577 153.06 li
233.127 156.63 li
237.177 158.729 li
238.677 159.466 li
243.027 160.935 li
244.227 161.46 li
249.927 165.03 li
255.477 167.97 li
261.026 171.226 li
266.577 174.374 li
272.127 177.524 li
277.676 180.569 li
283.227 183.825 li
288.776 186.659 li
293.577 189.39 li
294.477 189.915 li
300.026 194.22 li
302.127 195.271 li
305.577 196.425 li
309.477 197.265 li
311.127 197.79 li
316.676 200.729 li
322.227 203.669 li
327.776 207.03 li
333.477 210.495 li
336.327 211.649 li
339.026 212.595 li
344.577 215.011 li
350.127 217.636 li
355.676 220.155 li
361.227 222.255 li
366.776 224.774 li
372.477 226.665 li
376.827 228.45 li
378.026 228.976 li
383.577 232.124 li
389.127 235.065 li
393.176 236.851 li
394.676 237.374 li
397.227 238.005 li
399.477 238.425 li
400.227 238.739 li
402.926 240.104 li
405.776 241.89 li
411.327 246.3 li
413.426 247.14 li
417.026 248.294 li
422.127 249.87 li
422.577 250.081 li
426.176 251.864 li
428.127 252.915 li
433.676 256.169 li
438.477 258.374 li
439.227 258.69 li
444.776 260.999 li
450.327 264.149 li
456.026 267.405 li
32.5767 243.78 mo
37.2266 235.694 li
38.127 233.909 li
42.7769 226.456 li
43.8267 224.88 li
49.377 216.585 li
54.9268 208.604 li
60.4766 200.729 li
66.0269 193.591 li
71.5767 186.87 li
77.127 180.569 li
82.8267 174.479 li
88.377 168.706 li
93.9268 163.665 li
99.4766 158.94 li
105.027 154.216 li
110.577 149.385 li
116.127 144.87 li
121.677 140.145 li
127.377 135.63 li
132.927 131.43 li
138.477 127.44 li
144.027 123.345 li
149.577 119.67 li
155.127 115.785 li
160.677 111.06 li
165.327 108.12 li
166.377 107.595 li
171.927 104.655 li
177.477 101.19 li
183.027 98.5649 li
188.577 95.2051 li
194.127 92.3701 li
199.677 89.2202 li
205.227 86.9102 li
210.927 84.7051 li
216.477 83.1299 li
222.027 81.4502 li
227.577 79.875 li
233.127 78.6147 li
238.677 76.5151 li
242.727 75.4648 li
244.227 75.2549 li
249.927 75.9897 li
255.477 75.2549 li
261.026 75.2549 li
266.577 74.835 li
272.127 74.73 li
277.676 74.73 li
283.227 75.3599 li
288.776 75.9897 li
294.477 76.3047 li
300.026 77.04 li
305.577 77.46 li
311.127 78.4048 li
316.676 79.665 li
322.227 80.6099 li
327.776 82.29 li
333.477 84.3901 li
339.026 86.2798 li
344.577 88.4849 li
350.127 90.6899 li
355.676 93.21 li
361.227 95.73 li
366.776 98.355 li
372.477 101.4 li
378.026 104.55 li
383.577 107.595 li
389.127 111.06 li
394.676 114.735 li
400.227 118.2 li
405.776 121.875 li
411.327 126.075 li
417.026 129.96 li
422.577 133.425 li
428.127 137.415 li
433.676 141.93 li
439.227 145.815 li
444.776 149.91 li
450.327 154.53 li
456.026 158.415 li
461.577 161.88 li
467.127 165.765 li
472.676 169.966 li
478.227 174.06 li
483.776 177.944 li
489.327 182.565 li
494.877 187.499 li
498.477 189.706 li
500.577 190.86 li
506.127 194.011 li
509.327 196.491 li
507.327 266.04 mo
456.026 266.04 li
450.327 264.149 li
444.776 260.999 li
439.227 258.69 li
433.676 256.169 li
428.127 252.915 li
422.577 250.081 li
417.026 248.294 li
411.327 246.3 li
405.776 241.89 li
400.227 238.739 li
394.676 237.374 li
389.127 235.065 li
383.577 232.124 li
378.026 228.976 li
372.477 226.665 li
366.776 224.774 li
361.227 222.255 li
355.676 220.155 li
350.127 217.636 li
344.577 215.011 li
339.026 212.595 li
333.477 210.495 li
327.776 207.03 li
322.227 203.669 li
316.676 200.729 li
311.127 197.79 li
305.577 196.425 li
300.026 194.22 li
294.477 189.915 li
288.776 186.659 li
283.227 183.825 li
277.676 180.569 li
272.127 177.524 li
266.577 174.374 li
261.026 171.226 li
255.477 167.97 li
249.927 165.03 li
244.227 161.46 li
238.677 159.466 li
233.127 156.63 li
227.577 153.06 li
222.027 151.065 li
216.477 149.07 li
210.927 147.075 li
205.227 145.605 li
199.677 143.924 li
194.127 143.085 li
188.577 142.14 li
183.027 141.72 li
177.477 142.035 li
171.927 142.77 li
166.377 143.61 li
160.677 144.87 li
155.127 146.97 li
149.577 149.595 li
144.027 152.534 li
138.477 155.896 li
132.927 159.675 li
127.377 163.979 li
121.677 168.81 li
116.127 174.06 li
110.577 179.835 li
105.027 186.03 li
99.4766 192.96 li
93.9268 200.206 li
88.377 207.976 li
82.8267 216.165 li
77.127 225.091 li
71.5767 234.435 li
66.0269 244.409 li
60.4766 255.226 li
54.9268 266.04 li
32.7266 266.04 li
32.7266 243.78 li
32.7266 243.78 li
38.127 233.909 li
43.8267 224.88 li
49.377 216.585 li
54.9268 208.604 li
60.4766 200.729 li
66.0269 193.591 li
71.5767 186.87 li
77.127 180.569 li
82.8267 174.479 li
88.377 168.706 li
93.9268 163.665 li
99.4766 158.94 li
105.027 154.216 li
110.577 149.385 li
116.127 144.87 li
121.677 140.145 li
127.377 135.63 li
132.927 131.43 li
138.477 127.44 li
144.027 123.345 li
149.577 119.67 li
155.127 115.785 li
160.677 111.06 li
166.377 107.595 li
171.927 104.655 li
177.477 101.19 li
183.027 98.5649 li
188.577 95.2051 li
194.127 92.3701 li
199.677 89.2202 li
205.227 86.9102 li
210.927 84.7051 li
216.477 83.1299 li
222.027 81.4502 li
227.577 79.875 li
233.127 78.6147 li
238.677 76.5151 li
244.227 75.2549 li
249.927 75.9897 li
255.477 75.2549 li
261.026 75.2549 li
266.577 74.835 li
272.127 74.73 li
277.676 74.73 li
283.227 75.3599 li
288.776 75.9897 li
294.477 76.3047 li
300.026 77.04 li
305.577 77.46 li
311.127 78.4048 li
316.676 79.665 li
322.227 80.6099 li
327.776 82.29 li
333.477 84.3901 li
339.026 86.2798 li
344.577 88.4849 li
350.127 90.6899 li
355.676 93.21 li
361.227 95.73 li
366.776 98.355 li
372.477 101.4 li
378.026 104.55 li
383.577 107.595 li
389.127 111.06 li
394.676 114.735 li
400.227 118.2 li
405.776 121.875 li
411.327 126.075 li
417.026 129.96 li
422.577 133.425 li
428.127 137.415 li
433.676 141.93 li
439.227 145.815 li
444.776 149.91 li
450.327 154.53 li
456.026 158.415 li
461.577 161.88 li
467.127 165.765 li
472.676 169.966 li
478.227 174.06 li
483.776 177.944 li
489.327 182.565 li
494.877 187.499 li
500.577 190.86 li
506.127 194.011 li
@
grestore
1.2 lw
507.026 196.005 mo
507.026 266.04 li
32.7266 266.04 li
32.7266 .600098 li
507.026 .600098 li
507.026 196.005 li
0 0 0 rgb
@
%ADOBeginSubsetFont: SymbolMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /SymbolMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 45 /minus put
dup 49 /one put
dup 50 /two put
dup 60 /less put
dup 113 /theta put
def
/FontBBox {0 -220 1113 1005} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
8 dict dup begin
/.notdef <1C60D8A8C9B7C3C9ED920C533BFCEF627DC3963E487931C80D1235
BDD70699E096A6312D> |-
/parenleft <1C60D8A8C9B81F2C3AD88BE944FF80318D8AF8350026B5EFE87F
E687640AF4A47547388792B22F6DB8B11FE56DE72D1A141C3CCB5CDB12F640DE
FF9A6D3F1A686471C682D0F16FF3566BA8C987CE4F15A3A503FF4814FD7B> |-
/parenright <1C60D8A8C9B81F2C3AA92CC6997C003EEB299D29C718A8A6BCF
0E8A765C1B5FF867F31B4D88A3D7B6BCFF578B7D351C94320922B2E7FDB62075
4441B20B2299DD3C52447CAF34E7470ADA555A3FE58BD72E3FC77877CB8C5B6> |-
/minus <1C60D8A8C9B796769E4EE708DB1CE07AC2C248C3CCF0> |-
/one <1C60D8A8C9B7A73DB9355E2314A0D153A2A0B7EAA36BAAA81642A79738
D20E5102B0A2BE66813A45FFBD65B2172A78D83AC8731A17AD81FA5A64CDEEF8
5BCAC3E901AA4913094D9C2AB03C5C3C1886CE44CD2584457FDA385851D5E33A
C9F3C60FB980A3369EA841> |-
/two <1C60D8A8C9B7A73DB6F680023A3F8436EEF5620F750308DE1F37A7AC62
61B2AD224C23A5D479BBCA628D29391BDD7EB61640397C0BEE9A53230A0996DD
5EFD568725FB41905428A3181E66EA593E71E2B3F382070F0DF99B017EF0C263
F8A793D83409B9AB4293671896AC41DA0471B92046F8E7E3D66A6B43C161C86B
3F01BDE3B6C2CB7AC39DBC> |-
/less <1C60D8A8C9B79676ABC25A62EDA3D4C3C6570EDAC9888109B5E9CEC4C
2AFB53DDEC515> |-
/theta <1C60D8A8C9B7B2028D4737513764ECC7CFAE55E9EC00FFC4AFF6F26C
2E95EB0C14EBAC3AB5A6BE88FB49EE94C57B1016680D4124565FA444F884F152
F893C9834D6128B3A3C36FC7C6B53F68898E9C54410A02D317C20275204D9CC7
2EA672E5837E3B404119BFCC480B28845211915F62873C85F24F154472462A1E
FFF0BE17D6A2B129E1D27596F3C7AEC188DE3DD3C3A389BB6FCDEB32412A4289
1D559459890010C0B7E1D77210FC51F248C555CEB229E25F3FC3B07B7A2801> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/TEICDA+SymbolMT /SymbolMT findfont ct_VMDictPut
/TEICDA+SymbolMT*1 
[40{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /minus 3{/.notdef}rp /one /two 
9{/.notdef}rp /less 52{/.notdef}rp /theta 142{/.notdef}rp]
TEICDA+SymbolMT nf
TEICDA+SymbolMT*1 [8.4 0 0 -8.4 0 0 ]msf
489.13 286.793 mo
(\()sh
%ADOBeginSubsetFont: Times AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
TEICCZ+Times dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B896187A> |-
/G <1C60D8A8C9B67B1690716FF04D0147EA5B51F2B65610FAF2358C724A65CE
4A5C15BD93B6E6EA59AFCC3415F16C5AEB5B662300673D7883DCA60663F28B13
74AECADD3956841307F73A4A3284F6D8D8ABF9017548C3B89BDD9012EBEC97E3
91C348B649F9A4B9E9FBB9333C1B69DB13F722AB4C9DC35502510C64773DA8C4
CCB3ABFBFDCCB6F676B3960993837C4B63CC7BA56876924A0E6E> |-
/V <1C60D8A8C9B7EDAFD30F79AA728C73B6F9D7243B3F3111E28F2A88FF9E55
31C99B386BBCEA887616E38278755F3D624761739CBCFEBE737FE4F5859C10B4
BE5F104A9AEB342180A78D72C5F4> |-
/c <1C60D8A8C9B77BBBDC3D412E2B7EBD8CBDF62190574B4C19E078AA689FA2
FFC09475477E38DCB550BA1AA5A18654FB8DDAFB59A9181F1FEB7A73D1617516
88C7A68080F7D24A2B5B0D440BBED307714DAC49> |-
/e <1C60D8A8C9B7A66F84858C3E824B05AE733E797B86F03ECE479C9E8943E0
520DA4FD6A41513FD73C97A180A438823DE9180C2F1A372BA3F18054A3CF3C89
8CE064C0EA94F7B5AD3F149E032FD3214701687A9BA5ADEC5537A12E2389ED03
42F8C8368A054EB58BD4CB> |-
/m <1C60D8A8C9B6B7700392E60257FC106462D2DFCBC2A10C44EFEDC74AE4DA
23DDA2D9D4E78E5DFA35F442401F635CE4EC97BD658256486DCB8163E60ADA38
8D3E9044541A005C6E5B7F4EC121E40C2B88BAA769FC6EF300CB8AD41FDEB5E5
25C4189998ADB493581DF67B5FAF1E8DC2A518467237130BCC5792F2610CBA89
DCD4D678D679D01A1CE159E1CA934573EC871A4950949EA8A75E4A8D35E514> |-
/o <1C60D8A8C9B7967683396363C51B2F197875CA3B9BAE51F24B8F763B4773
BD161349CB9EF727644F0D8FA55366DA05AEEB9C2690FCE0BEECA73ADF069AEC
95A3991FD0C9D683C0956A78316283D14EA2BEE9> |-
/r <1C60D8A8C9B825FA276057E42F8B6B56BF320465C4F3A91E893212636140
7945114FBC26E280CD7F54022CB19333FE438535A6D278359C6611E3D94737C7
F3588003F9E3F146E43EF74E9A3C813A9917C6F7FF4D3A6A354EEEE2> |-
/s <1C60D8A8C9B70FAD6EE3D53355E38764B7A0FBCF459EDA73A6BB6F37951F
516ACF19A74C7FAFEB932D8542625C8D96B0436D7A1F0AE18294B63D5DC8AC8B
FDB72B0CB92AB2402ACEA1AE5389E7870683F32388D43FD5492E364F1AC532EA
615BCE0E416AA11027B45297F7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TEICCZ+Times /Encoding get
dup 32 /space put
dup 71 /G put
dup 86 /V put
dup 99 /c put
dup 101 /e put
dup 109 /m put
dup 111 /o put
dup 114 /r put
dup 115 /s put
pop
%ADOEndSubsetFont
/TEICCZ+Times*1 
[32{/.notdef}rp /space 12{/.notdef}rp /hyphen 2{/.notdef}rp /zero /one /two 
/three 19{/.notdef}rp /G 14{/.notdef}rp /V 12{/.notdef}rp /c /.notdef 
/e 7{/.notdef}rp /m /.notdef /o 2{/.notdef}rp /r /s 
140{/.notdef}rp]
TEICCZ+Times nf
TEICCZ+Times*1 [8.4 0 0 -8.4 0 0 ]msf
491.52 286.793 mo
(GeV)
[5.42676 4.20801 0 ]xsh
TEICDA+SymbolMT*1 [8.4 0 0 -8.4 0 0 ]msf
505.84 286.793 mo
(\))sh
TEICDA+SymbolMT*1 [0 -8.4 -8.4 0 0 0 ]msf
9.47754 70.4302 mo
(\()sh
TEICCZ+Times*1 [0 -8.4 -8.4 0 0 0 ]msf
9.47754 67.4395 mo
(GeV)
[-5.42627 -4.2085 0 ]ysh
TEICDA+SymbolMT*1 [0 -5.85 -5.85 0 0 0 ]msf
5.27441 51.3203 mo
(2)sh
TEICCZ+Times*1 [0 -8.4 -8.4 0 0 0 ]msf
9.47754 48.3193 mo
( s)
[-1.78076 0 ]ysh
TEICDA+SymbolMT*1 [0 -5.85 -5.85 0 0 0 ]msf
5.27441 43.208 mo
(-1)
[-3.21045 0 ]ysh
TEICCZ+Times*1 [0 -8.4 -8.4 0 0 0 ]msf
9.47754 38.4121 mo
( sr)
[-1.78076 -3.32617 0 ]ysh
TEICDA+SymbolMT*1 [0 -5.85 -5.85 0 0 0 ]msf
5.27441 30.5566 mo
(-1)
[-3.21045 0 ]ysh
TEICCZ+Times*1 [0 -8.4 -8.4 0 0 0 ]msf
9.47754 25.7725 mo
( cm)
[-1.78076 -3.76318 0 ]ysh
TEICDA+SymbolMT*1 [0 -5.85 -5.85 0 0 0 ]msf
5.27441 11.4082 mo
(-2)
[-3.21045 0 ]ysh
TEICDA+SymbolMT*1 [0 -8.4 -8.4 0 0 0 ]msf
9.47754 4.21289 mo
(\))sh
TEICDA+SymbolMT*1 [8.4 0 0 -8.4 0 0 ]msf
71.7979 26.8774 mo
(-1)
[4.61035 0 ]xsh
80.4658 26.8774 mo
(<)sh
TEICCZ+Times*1 [8.4 0 0 -8.4 0 0 ]msf
85.4717 26.8774 mo
( cos )
[1.78076 3.76318 4.61133 3.32666 0 ]xsh
TEICDA+SymbolMT*1 [8.4 0 0 -8.4 0 0 ]msf
100.738 26.8774 mo
(q)sh
107.245 26.8774 mo
(<)sh
114.032 26.8774 mo
(1)sh
91.7544 35.5771 mo
91.7544 35.4941 91.6875 35.4272 91.6045 35.4272 cv
91.522 35.4272 91.4546 35.4941 91.4546 35.5771 cv
91.4546 35.6597 91.522 35.7271 91.6045 35.7271 cv
91.6875 35.7271 91.7544 35.6597 91.7544 35.5771 cv
1 1 1 rgb
ef
91.7544 35.5771 mo
91.7544 35.4941 91.6875 35.4272 91.6045 35.4272 cv
91.522 35.4272 91.4546 35.4941 91.4546 35.5771 cv
91.4546 35.6597 91.522 35.7271 91.6045 35.7271 cv
91.6875 35.7271 91.7544 35.6597 91.7544 35.5771 cv
ef
91.6074 35.5771 mo
91.6074 35.5361 91.5737 35.502 91.5327 35.502 cv
91.4912 35.502 91.4575 35.5361 91.4575 35.5771 cv
91.4575 35.6182 91.4912 35.6523 91.5327 35.6523 cv
91.5737 35.6523 91.6074 35.6182 91.6074 35.5771 cv
ef
0 0 0 rgb
%ADOBeginSubsetFont: SymbolMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
TEICDA+SymbolMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/nu <1C60D8A8C9B7B202AA476224BB4940547E160E53FFE762F51339CC24492
B51C116F77A993CB5C8CE169895676DFA68F7414CA1FF364218D98572CCD2DF1
03F070EC7C42BE85970A69B4DB91C2B227D18FA4B7DCADA7ED11344806C08215
2750302D8C85BEF78E2929C654DEDDBC87E7165F273A5BFAA793EF261636237C
403B27A151C9E72> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TEICDA+SymbolMT /Encoding get
dup 110 /nu put
pop
%ADOEndSubsetFont
/TEICDA+SymbolMT*1 
[40{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /minus 3{/.notdef}rp /one /two 
9{/.notdef}rp /less 49{/.notdef}rp /nu 2{/.notdef}rp /theta 142{/.notdef}rp]
TEICDA+SymbolMT nf
TEICDA+SymbolMT*1 [8.4 0 0 -8.4 0 0 ]msf
98.3477 38.2778 mo
(n)sh
TEICCZ+Times*1 [5.85 0 0 -5.85 0 0 ]msf
103.017 41.1299 mo
(e)sh
91.7544 46.8809 mo
91.7544 46.7983 91.6875 46.731 91.6045 46.731 cv
91.522 46.731 91.4546 46.7983 91.4546 46.8809 cv
91.4546 46.9639 91.522 47.0313 91.6045 47.0313 cv
91.6875 47.0313 91.7544 46.9639 91.7544 46.8809 cv
1 1 1 rgb
ef
91.7544 46.8809 mo
91.7544 46.7983 91.6875 46.731 91.6045 46.731 cv
91.522 46.731 91.4546 46.7983 91.4546 46.8809 cv
91.4546 46.9639 91.522 47.0313 91.6045 47.0313 cv
91.6875 47.0313 91.7544 46.9639 91.7544 46.8809 cv
ef
91.6074 46.8091 mo
91.6074 46.7676 91.5737 46.7339 91.5327 46.7339 cv
91.4912 46.7339 91.4575 46.7676 91.4575 46.8091 cv
91.4575 46.8506 91.4912 46.8838 91.5327 46.8838 cv
91.5737 46.8838 91.6074 46.8506 91.6074 46.8091 cv
ef
0 0 0 rgb
TEICDA+SymbolMT*1 [8.4 0 0 -8.4 0 0 ]msf
98.3477 49.6753 mo
(n)sh
TEICCZ+Times*1 [5.85 0 0 -5.85 0 0 ]msf
103.017 52.5298 mo
(e)sh
91.3228 43.5693 mo
91.3228 43.4863 91.2554 43.4189 91.1724 43.4189 cv
91.0898 43.4189 91.0225 43.4863 91.0225 43.5693 cv
91.0225 43.6519 91.0898 43.7188 91.1724 43.7188 cv
91.2554 43.7188 91.3228 43.6519 91.3228 43.5693 cv
1 1 1 rgb
ef
91.3228 43.5693 mo
91.3228 43.4863 91.2554 43.4189 91.1724 43.4189 cv
91.0898 43.4189 91.0225 43.4863 91.0225 43.5693 cv
91.0225 43.6519 91.0898 43.7188 91.1724 43.7188 cv
91.2554 43.7188 91.3228 43.6519 91.3228 43.5693 cv
ef
91.1753 43.4971 mo
91.1753 43.4556 91.1421 43.4224 91.1006 43.4224 cv
91.0591 43.4224 91.0254 43.4556 91.0254 43.4971 cv
91.0254 43.5386 91.0591 43.5723 91.1006 43.5723 cv
91.1421 43.5723 91.1753 43.5386 91.1753 43.4971 cv
ef
0 0 0 rgb
TEICDA+SymbolMT*1 [8.4 0 0 -8.4 0 0 ]msf
97.8984 46.2271 mo
(-)sh
91.7544 58.2568 mo
91.7544 58.1743 91.6875 58.1069 91.6045 58.1069 cv
91.522 58.1069 91.4546 58.1743 91.4546 58.2568 cv
91.4546 58.3398 91.522 58.4072 91.6045 58.4072 cv
91.6875 58.4072 91.7544 58.3398 91.7544 58.2568 cv
1 1 1 rgb
ef
91.7544 58.2568 mo
91.7544 58.1743 91.6875 58.1069 91.6045 58.1069 cv
91.522 58.1069 91.4546 58.1743 91.4546 58.2568 cv
91.4546 58.3398 91.522 58.4072 91.6045 58.4072 cv
91.6875 58.4072 91.7544 58.3398 91.7544 58.2568 cv
ef
91.6074 58.1851 mo
91.6074 58.1436 91.5737 58.1099 91.5327 58.1099 cv
91.4912 58.1099 91.4575 58.1436 91.4575 58.1851 cv
91.4575 58.2266 91.4912 58.2598 91.5327 58.2598 cv
91.5737 58.2598 91.6074 58.2266 91.6074 58.1851 cv
ef
0 0 0 rgb
%ADOBeginSubsetFont: SymbolMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
TEICDA+SymbolMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/mu <1C60D8A8C9B7FBE1CEF90ADFEE69DD2DD9D352B10CB42426EE82DC52C52
D4F8699E0A310464D7FB1FA805D8CC4DAB824E1C70115C99A4D0C4724CCCD002
46EE5727B763DCCC1EF93F4F836F440B68CBB4BA9924DABB089DDC3F318794A0
4D0CC8D5CBFA71E33ABDD1062939BBB2EF2A57DB0B26627DF9F16DB477D13BA9
B64308D9B28E9254BFC154A0BCA92D3CE9FAF30F5A21030ED7A722CD4D7FF3F8
0EC6836885BE3B1F2C1291EADA749447A3397B77736C040716B308AF7942AB81
3E31A36FB9E2F49D3817C6B7D80057676EF942208B0DC64D84FF73D34BE1D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TEICDA+SymbolMT /Encoding get
dup 109 /mu put
pop
%ADOEndSubsetFont
/TEICDA+SymbolMT*1 
[40{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /minus 3{/.notdef}rp /one /two 
9{/.notdef}rp /less 48{/.notdef}rp /mu /nu 2{/.notdef}rp /theta 142{/.notdef}rp]
TEICDA+SymbolMT nf
TEICDA+SymbolMT*1 [8.4 0 0 -8.4 0 0 ]msf
98.3477 61.0752 mo
(n)sh
TEICDA+SymbolMT*1 [5.85 0 0 -5.85 0 0 ]msf
103.017 63.9253 mo
(m)sh
91.7544 69.6328 mo
91.7544 69.5503 91.6875 69.4829 91.6045 69.4829 cv
91.522 69.4829 91.4546 69.5503 91.4546 69.6328 cv
91.4546 69.7158 91.522 69.7832 91.6045 69.7832 cv
91.6875 69.7832 91.7544 69.7158 91.7544 69.6328 cv
1 1 1 rgb
ef
91.7544 69.6328 mo
91.7544 69.5503 91.6875 69.4829 91.6045 69.4829 cv
91.522 69.4829 91.4546 69.5503 91.4546 69.6328 cv
91.4546 69.7158 91.522 69.7832 91.6045 69.7832 cv
91.6875 69.7832 91.7544 69.7158 91.7544 69.6328 cv
ef
91.6074 69.5615 mo
91.6074 69.5195 91.5737 69.4858 91.5327 69.4858 cv
91.4912 69.4858 91.4575 69.5195 91.4575 69.5615 cv
91.4575 69.6025 91.4912 69.6362 91.5327 69.6362 cv
91.5737 69.6362 91.6074 69.6025 91.6074 69.5615 cv
ef
0 0 0 rgb
TEICDA+SymbolMT*1 [8.4 0 0 -8.4 0 0 ]msf
98.3477 72.4771 mo
(n)sh
TEICDA+SymbolMT*1 [5.85 0 0 -5.85 0 0 ]msf
103.017 75.3325 mo
(m)sh
91.3228 66.1772 mo
91.3228 66.0942 91.2554 66.0273 91.1724 66.0273 cv
91.0898 66.0273 91.0225 66.0942 91.0225 66.1772 cv
91.0225 66.2598 91.0898 66.3271 91.1724 66.3271 cv
91.2554 66.3271 91.3228 66.2598 91.3228 66.1772 cv
1 1 1 rgb
ef
91.3228 66.1772 mo
91.3228 66.0942 91.2554 66.0273 91.1724 66.0273 cv
91.0898 66.0273 91.0225 66.0942 91.0225 66.1772 cv
91.0225 66.2598 91.0898 66.3271 91.1724 66.3271 cv
91.2554 66.3271 91.3228 66.2598 91.3228 66.1772 cv
ef
91.1753 66.1772 mo
91.1753 66.1357 91.1421 66.1021 91.1006 66.1021 cv
91.0591 66.1021 91.0254 66.1357 91.0254 66.1772 cv
91.0254 66.2188 91.0591 66.252 91.1006 66.252 cv
91.1421 66.252 91.1753 66.2188 91.1753 66.1772 cv
ef
0 0 0 rgb
TEICDA+SymbolMT*1 [8.4 0 0 -8.4 0 0 ]msf
97.8984 69.0278 mo
(-)sh
.5 lw
71.9487 39.0273 mo
72.5483 39.4771 li
71.9487 34.6772 mo
76.7485 39.4771 li
75.0986 33.4771 mo
81.0986 39.4771 li
79.4487 33.4771 mo
85.4487 39.4771 li
83.7983 33.4771 mo
89.7983 39.4771 li
87.9985 33.4771 mo
91.5986 36.9272 li
74.7983 33.4771 mo
71.9487 36.1772 li
78.9985 33.4771 mo
72.9985 39.4771 li
83.3486 33.4771 mo
77.3486 39.4771 li
87.6987 33.4771 mo
81.6987 39.4771 li
91.5986 33.9272 mo
86.0483 39.4771 li
91.5986 38.2773 mo
90.2485 39.4771 li
0 1 0 rgb
@
0 lw
71.9487 39.4771 mo
71.9487 33.4771 li
91.5986 33.4771 li
91.5986 39.4771 li
71.9487 39.4771 li
cp
@
.5 lw
71.9487 49.9771 mo
73.4487 50.877 li
72.0986 44.877 mo
82.5986 50.877 li
81.3984 44.877 mo
91.5986 50.7271 li
90.5483 44.877 mo
91.5986 45.4771 li
1 0 0 rgb
@
0 lw
71.9487 50.877 mo
71.9487 44.877 li
91.5986 44.877 li
91.5986 50.877 li
71.9487 50.877 li
cp
@
.5 lw
77.7983 56.127 mo
71.9487 59.5771 li
86.9487 56.127 mo
76.4487 62.2773 li
91.5986 58.8271 mo
85.5986 62.2773 li
0 0 1 rgb
@
0 lw
71.9487 62.2773 mo
71.9487 56.127 li
91.5986 56.127 li
91.5986 62.2773 li
71.9487 62.2773 li
cp
@
.5 lw
71.9487 73.5273 mo
71.9487 73.6772 li
71.9487 71.4272 mo
74.1987 73.6772 li
71.9487 69.1772 mo
76.2983 73.6772 li
72.3984 67.5273 mo
78.5483 73.6772 li
74.6484 67.5273 mo
80.6484 73.6772 li
76.7485 67.5273 mo
82.7485 73.6772 li
78.8486 67.5273 mo
84.9985 73.6772 li
81.0986 67.5273 mo
87.0986 73.6772 li
83.1987 67.5273 mo
89.3486 73.6772 li
85.4487 67.5273 mo
91.4487 73.6772 li
87.5483 67.5273 mo
91.5986 71.5771 li
89.7983 67.5273 mo
91.5986 69.4771 li
73.1484 67.5273 mo
71.9487 68.7271 li
75.2485 67.5273 mo
71.9487 70.8271 li
77.3486 67.5273 mo
71.9487 73.0771 li
79.5986 67.5273 mo
73.4487 73.6772 li
81.6987 67.5273 mo
75.6987 73.6772 li
83.9487 67.5273 mo
77.7983 73.6772 li
86.0483 67.5273 mo
80.0483 73.6772 li
88.2983 67.5273 mo
82.1484 73.6772 li
90.3984 67.5273 mo
84.3984 73.6772 li
91.5986 68.5771 mo
86.4985 73.6772 li
91.5986 70.6772 mo
88.5986 73.6772 li
91.5986 72.7773 mo
90.8486 73.6772 li
1 1 0 rgb
@
0 lw
71.9487 73.6772 mo
71.9487 67.5273 li
91.5986 67.5273 li
91.5986 73.6772 li
71.9487 73.6772 li
cp
@
0 0 0 rgb
%ADOBeginSubsetFont: Times-Italic Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /Times-Italic def
/FontInfo 7 dict dup begin
/Notice (Copyright (c) 2000 Adobe Systems Incorporated. All Rights Reserved. U.S. Patent Des. pending.Myriad is a registered trademark of Adobe Systems Incorporated.) def
/Weight (Regular) def
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 69 /E put
def
/UniqueID 44757 def
/FontBBox {-46 -250 1126 881} def
end
systemdict begin
dup /Private
15 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def
/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def
/FamilyBlues [-11 -0 674 686 484 495 650 661 710 721 241 248] def
/FamilyOtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def
/BlueScale 0.0604583 def
/StdHW [67] def
/StdVW [88] def
/StemSnapH [67] def
/StemSnapV [88 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/space <1C60D8A8C9B896187A> |-
/E <1C60D8A8C9B7AFA9BC4F00998616708AD319D689B216B721CBB286284877
352BA785E1B053DF2EC2B77B2A321D6047CBD4FD467F6DD70A1B400CD3EB> |-
/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364C
BBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0
D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917
B17192> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/TEICDB+Times-Italic /Times-Italic findfont ct_VMDictPut
/TEICDB+Times-Italic*1 
[32{/.notdef}rp /space 36{/.notdef}rp /E 186{/.notdef}rp]
TEICDB+Times-Italic nf
TEICDB+Times-Italic*1 [8.55 0 0 -8.55 0 0 ]msf
479.28 286.942 mo
(E)sh
%ADOBeginSubsetFont: SymbolMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
systemdict begin
TEICDA+SymbolMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/comma <1C60D8A8C9B8707CDCEBD720EFC872F6202427E0DC160E0D9FF84BE9
43BEE0ADD9580AD115B54E6C20AAADE171AF100EC7A995D9087D9516034494C1
A71E011ADD190087F158B2F06247840DBFE499A4B3B80E943E820BAA4B527160
4045355454CD6938B6906B1461F3370995EE50814A23> |-
/three <1C60D8A8C9B7A73D81065CAE5DDB63861358849BB415402E13264904
C81531CDF197E739B614F1DFFB6B9599A352EC63CD2B855BEE4888D63C102E23
84340096EE2EFD75E342060F78911858F114BA894476A4726383F574EBC21956
A58365FD9A782B6B9D947658E55A15D9D841E20A936BC25289812748D22FEA75
417D9E3B5FCB4097803E08C8C1C9E7EDAF5748A911F73942C70B5A21A7AD97F6
86D87DF4BBB8CB83BF69E4E1C55B9889AED39E6D75389E9FC084453A7E927722
4EBB08EC26B08A59322AC2FA43803853EF8E42FA80D4E2CA736FC8F407DB8697
06> |-
/Phi <1C60D8A8C9B6EEDBB31AD850BD814EB7A6767F7431B1EA7330FEEDBEB2
A578254DFE1E9E35495ECDD0CFF5A2638F73181120F229DB5D29C5D03215E7EF
2569F9C2AB110C7099BB5AC877047EC96F44DA02CA4D00F701E7FD36CAB11FD6
FC144DB7C2E8A8C4D30B90BAB1980A9BACB4EA4E360FB2CD75C20A0EA452B918
FB936B4EC47D64993A61A7E16CE37C112AB8F6B3A9FB7504369C3A87A3A7B69F
45F9CF25D074C581B412A6AD61263EAA014343D53F24BCFF677D50AE98AEA4D5
9E20789CBDB40317597F39E163A9F5EA6C2BA33C885E67D4957FB2248EC8A628
F25E3B0B4259AFEE7DBECD49F1416D155BB9EA990C86C78561A0795C29F455A7
AF5A7523BDA12592> |-
systemdict /gcheck known {setglobal} if end {end} if
end
TEICDA+SymbolMT /Encoding get
dup 44 /comma put
dup 51 /three put
dup 70 /Phi put
pop
%ADOEndSubsetFont
/TEICDA+SymbolMT*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /minus 3{/.notdef}rp /one 
/two /three 8{/.notdef}rp /less 9{/.notdef}rp /Phi 38{/.notdef}rp /mu 
/nu 2{/.notdef}rp /theta 142{/.notdef}rp]
TEICDA+SymbolMT nf
TEICDA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
483.481 289.793 mo
(n)sh
TEICDB+Times-Italic*1 [0 -8.55 -8.55 0 0 0 ]msf
9.62695 120.481 mo
(E)sh
TEICDA+SymbolMT*1 [0 -6 -6 0 0 0 ]msf
5.28027 114.483 mo
(3)sh
TEICDA+SymbolMT*1 [0 -8.55 -8.55 0 0 0 ]msf
9.62695 107.783 mo
(F)sh
9.62695 100.011 mo
(\()sh
TEICDB+Times-Italic*1 [0 -8.55 -8.55 0 0 0 ]msf
9.62695 97.5791 mo
(E  )
[-4.20654 -1.8125 0 ]ysh
TEICDA+SymbolMT*1 [0 -8.55 -8.55 0 0 0 ]msf
9.62695 89.751 mo
(,q\))
[-2.1377 -4.4541 0 ]ysh
TEICDA+SymbolMT*1 [0 -5.85 -5.85 0 0 0 ]msf
12.4756 115.377 mo
(nn)
[-21.7036 0 ]ysh
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/TEICDB+Times-Italic*1 uf
/TEICDB+Times-Italic uf
/Times-Italic uf
/TEICCZ+Times*1 uf
/TEICCZ+Times uf
/Times uf
/TEICDA+SymbolMT*1 uf
/TEICDA+SymbolMT uf
/SymbolMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 13.0.0
%%For: (Vadim Naumov) ()
%%Title: (dF_dEdcosT_E_Honda11.eps)
%%CreationDate: 1/25/2013 1:49 PM
%AI9_DataStream
%Gb"-6Bic7qZ7,R_fCFEQgCkDK.VgY1gPEtXYmiU_D1Mi2BY]ephEE%<Dgr@e&XecXAEZ5?Y'8I/^%T-fE%0t/N-VpUCMe/Om.?$&
%CSUn\2q#&FB5&U6P"(c"f7(>SlZ)AfG>`5*<4U/V@C&L'"g-fs;&'gfadQe,Vq>otFDs/%%]?MMUP%uFZ9IQ7`foN(qQKUsnY1F7
%^U+q%])DWlYJsb\I;gD-ClO0JBY3kOYWqEffYsHu)S<[KG9[#kHnoR5HO$k6cIqGr^XqlNGPf:<7qZ=6p2]1-Q9XV/)m.D!^\b.j
%rNk7>^U9YD%FpCVOVuG_1];GW3Z>J'O+1$=W1cQFoSG[J^emA/*82^tnXfCMB9VSi4WTMr^iLD89TJ'cA!jG.rB*)Xit]EJV-Xjr
%!TSU_lLhbnU[b!?D.HB40enT54+YAeQ/UWmrQ4Q%J(EkuJfF$!o\q7pQf=M6a%gh>KfS)HoTnAs>*IRQgkbV&k!$KC*qf/sHDBGc
%H#*gX?ma^oT!llS0Go`Ns-pptg#sKcch^SHRYGS]Ino/GB#EB$pgp1HjY2hFs,6)jk$P-q+8C>D$NH`62Z"<i*B0-NC?Bg7C'3XT
%9nPQCU`'(M;[509!IgHcMo7F,m1)ngm:fWdVBj<R=X0n$r3-!eS&4"FAu][I35Tf-nE-ITO]ACV;FY4R.B88O\7aFlZe,.k\ad2a
%mW?Kkf<+RbVtXP;Vn%[(72=;72eW*Wq!G;@O2cRJb[nF(Fh3!BRFHYcho=uI#GhAm/U#n/U[AiR:]Cjl@N!b;^V)`K4E(8bN[Hqs
%okjT545:jidgKGTP-Rq!.Gdp,lK'n_>gECPW@5_+nqbp=47fZ[?I(-P_sMI4W&IuDFVWdTNI)ZNS423]c%#B>S#,o[(&rbe,&DKb
%m1+Ed.fQmU_Mo6ubniH$lfPFX4rWA$CE0Yb!'UP<muNLm=8*7()[p_0HL81;f7$AmV4VCqBm0V'p:H;6?NTTaB,;(eC%H.'C8`Bj
%/b[q_ma<969lF^ZG4s0>^nn`n8Iq\*lElV4\mtS$nGCX"D[^#nf^JfPl*NOD*fnSnm9sXAkFasZ%@<+#H@7r"^O%qGg>6YE1c&Y%
%#8g8:%7b_,[8Z@fr"&DJrY^*S/p2r?p>gIt44+"?g?Wso9CUFmh*HAr=FOs^S()O$FdG.aBcg/?YG&7:ksMB#*Q*mbNMX`G+<,RP
%l-dE$Gha;\r.9FZ9Ddbs8U%]%#1ut%\]!m%%S!A2BZtJZYWM%XHUI"'`(P(K]n:KX31;H?s#N=2%[Y0R%me7]d\)#=bCX5X93O@[
%S-qL+-;2h&7[#Vf[,,K/1d)n(]CoV!K<o99BlF9;1Ki/`3X9X(H8NEt]md^*,E7G\#:sQ8SfF9nonpm)J,FTC*^_%Io=3U@1iq$a
%8OHMJ;G4n0%+R*h[`!$kbk\^6mT[2PV:OeW3\=cS;g2U&e=C$4:!nC<p3U7P4Y]kt&T+,l2Oi1UV3cKp(hVNEfJXbY7>G`dVJY(+
%!-l,"gAeRf4m=1b]]BU924`W^c>RR'&*Cpgj3\^:V$dE@#bX(YC7C(7]UuXrh)83@m3$7o*:<1B!?Xh`FRP[G]<3pue[>@%VH(sL
%lA6s9[S7Qu@q[2/RH>`#dn"Qt;%q]fe,-J,+3\/`RBC17VDE-RB=?,>oCGp'`\7==mC1nGK*nr_hf^Atpm2pQ!K`*QBLK0e4;]6t
%?Z(7$IRl.^T9eiq-2Y#7m^jREktqG)nJI8AnQC)1f4jtt9WE@iB"hY6rR[5.C,#Maj@$r9eMo[_Q9HjF9s;,61Z:8p_(,McWQ#T)
%:\AYf[o`Maq!laVFE[LkGW<;.gRMle)R%lDA)M8+-VieCoZd<?@Cj8+kIj+UA$auQS\J]+F%s?i^^_d-fY=UFeF".p%r??7s$ue`
%\>VFai;VFjlV4um)<qr7amj=sBQcL%RiFA18#*e(,W26em,ikq0R`rP9O\rr-@d3<pC=po"r9I^*WXcBnH6P\M9b@4Q"be:)L(".
%qOd8,&+T[+$(qh$XbBgBs(&$pmI@r$*k\Ghh@TJLL42,Mj@=i$'VQI-a6ch'N%MM,bH%]d,TmZI"Dm;*RmR`Y8#P>Jlk^e3NP5&\
%oL_o[h]B5H%K1o">@XO3D8:<PCo+nW@5C<@&i2-m?A^Nho,C:IdpIMK%SP-&UVDQ[?]AW%fPgs,0"l'3\rD(+o1fhWVQTk\C2Dp[
%Npo7aEkVL,s*>$%rIAg92:BL&`htIeUN6lnHXg6nn%`%;;tmKoel[N6`BWXoIj0I8bN2BYioU%qI_i!K:9-WVMjeogVMW`N6s6L#
%N(?sZ?$#?#lp.,V"+@+e&`Q>7^RJ;Ai7X6*_9$'Os,D0QV0ICkn,EcVXtJSG!ZLuObq6t2qY+CY3=P3/bj:oqP7+fn6aE)ld@S4/
%h>4Ru+7NJ(T=k>3I!be7I$jg'!gpm36,SPf#T,X%j=a@rTiAo>Tk1h?$'+Ml5o)sJ$pr?(Jl,qR,]>6Il*gJK\^P`"6`m*&dMh&6
%`Z,6n-hL.'\&mlJ>&OZDb_3]]FM%/JehYi;m5=-48tQS_r@r`3O)&[@cDIAVRl3l*^&RBK7tj<GS-%C_2^U[qjn5aee`[UM#tQWE
%U\;4H3'b^h0-deT<7En77l&YZ/cH&ma(X8\DZf\n#YaUX)4aL0i&'j#B3INZ>13QbKjc"s=T?i8+`B3->ge<r#IjrJo!6iEGbnoc
%KVLcDj&6)c8RV4kd:&D%)3,2%@#i6h_6=``m/`$NVqo?Vnq<GP1Mb)V"qj&e(L<\*Htc%bk(&Z,jB7dZkM?f`fDY[d++"WG_f)/A
%:LUg6h$K*,RcVPoBF*7!#_K`%kE!Wr%KMh!]duq=o))?p\a2uDaq\18(hEBAm`[OghDN#Vd+AL]D1I:&D=@5q^$.1ol22`;E5qMC
%nE?s%"9`miC8']P?H^/uh!&t`fE8)$B^5WC,^j0\:f$]'BRaQ7UH[+`)c'!$X>]__e67ogDsaVjGuA5n0L\K1_-?0AmG"6K<qcO&
%F2.\QhUCQZp>XfkpsJ#Eq.P$Ol.5NSF*H2^mH3JArq>koIUdZrm@sn>dYH#l5Mpak3^,VR[Pm.^jXlap2kjuknRLVC??C8]rn$;g
%eWkKZPL[d]GR:6M^&S$,Qs2_EXrTZSrHr`6mI%(MrciCdd;7Z"R[NJek6"C[Ci%p2/j;IfDZ':8Q@<)Of,BU>:KgP;VT0&Tnf)4G
%)sPV\[3,?/HSE^a@J"Y+382WO3\9.$rq*b/]A@pZriEE]ns@mlPH?L=bEM'r@H64HZ`Uc.SO8c6T@_ZgDqenDLL9b4[Jjq@rUSq$
%nT=`>po(h=q0m\N5X#.X](5@9Sf%eL4^%f2oQ::dh>XtTV"<[Dg1'm<Anu&L`m?9rICjP)do8Qo((N55ZIa0`a6C)1/$3$tm=hs7
%pV&;^Y2=N:[GF'Yqr$;Z)oq[`%b`<*=)VO=nG0>W>")*O@beTkIC]+FBkOPtlf"DRn\XIqf(5He5B-esX7r5--SS8Ds4s$lf'qVC
%@,[._pQpcRk<F8]Yr"I7>2t5_C>i]+fc^kaSke.YaVB$2`Ej1"Q@%pjD7F-LifCXhHel)YnS2J*nDX2Feb(:?2tf/u<>i(q)c&ZZ
%2]`\!UTY%UmlI),j8Bp(oXGEd[pVi>o"-jM>!D%pq<K1FeUt8nq0\;)oNgX*UqYW/Z*Deb\\3-6iStcQamk.iH5,0<VMY"rJ!0)H
%/3MQgTtaY%2P6E2lh<<PS'g4+nIpH2pX-j1#FkJINJC#Rcp2r-XPE:BGkk@sVHkp8\%S*t1sg")WEm@W[feS_`uAjF:%c!^qV&qJ
%IG>dtahot8R/]-Zm;Di(fJm,^p2dRr^2n?IhgbO7H?JQPgXc)pg8g4NS_h]CT3mm]_7Z(_f_oCloOHbR\G8iN]N\%d\$ib(IdDJe
%n,:=omN2pV*Gqo#hGnNL&&&k!S'K)L=RQ),4DSdu^\_h_A%qQYS.;1!Gle6Qe'mIFKno-N5L#K8jCN]2rpKFQf'_#Og$Ij9LFZ,O
%0B<$+3Y/V#05,\Q=h2e<SQeVSpQ^LQdFRL27)Qj`pQ_iiJ<@J<(=kt*fD9pkLFY$E0>i=d_rJk,4t#-F4K>=*+18gG<>oaU(/F=J
%hjQWSendc*]-$)/RpT7@9)K@Ece_XWXh!2aoBXHmS!2*NkKPR`YOE#cN&7ing$BiSY/9KCgkO)0QsW'=hOG;S&)P$7'd)JLqE;K;
%gjeJrrqiJ8`I%J^kZY!Mm^%&sF*Cu5('*#MW&E4uIlIb:=#Ul]*doFHiULa(;>_hj0ag1o='P:"qY.HWZB+OmK1Fg]ST\4iI2s;F
%D/Nn'>/%NF:?.qCHMm3&SonQ-qruqE+4JMCXZq1lC@*(W^BnC4>He4"DVc>GN43[X(8"cK%Zg'D[kG5BnqH8IKKA9T%duO*@D/FG
%K+^-#]mn6C*G0QiAN/:G4o42%iqr0`qs!WWlg:g,M;R`ElcnjqIefbR\>$6tUC0&@CG:&QXfS);SbBKm*iV/Nl9E"ngQok]ZpgX*
%(%%W1cMd9ScV^:fY6`Kre)CWKf\Ms0:juc]s($-Uq"ru=[\h@HT3=>6T<?YH<U9PIb2`.A2#7+\nA4_NC[0s5\(8jXDX)]$N=i))
%Qbht^@/77A1AOb55--m%?69s%ZhBCBl1EG>oPAEL$307k7F+r2Ac@#PiK"?FHN*uZ[9)HKFgS#mi&%`RRsI8f4'Lg=5N&a@lBUU%
%h0B2\O;[G-$edak"+U:%0MSM9.8=:gLoo`'HCDZ>I13B.gZ.NiB7lL[eqC*QUVJ)G1hNY386jaDg5btuUZm3kBs;s_PjG.1ZT_`i
%dt.&5DE^2th4IHO=.n*uL[^p3/U<e2rjf55I#ok^`?CTnrHRKOO7K^?%Mu&5D_$4MJ+k^52rUWjY<V%<Ju)BB:Cm6!]G!$egcl7p
%B^ij;B,>REDQ\"3H4T-k*g2!Fre[kQn)bVZ\,\EN?@OU%jks_D]^u_\Ra?>JmHVUI'+qjr`kc`H!$ZS\BBTi-^2`@)'A>2=jbVN'
%2Z2fj2_0o$Aps]p]Gl'+rmdIt_]_a$3/l4JTpLVln/Y%reT:\^]>4]$pUDj[)L^o>c/o/)g"U_Ab^2HUs$sl'YD"lN%Sa]PS:*TY
%k.gPSE$JtuG<YmdiSE)Q]4]$`eN;SmO95u&8O'6+&?+d>o<%I74tLVX^Y;/^(3TA<9BH3iDZW/0EO*0"j6b6?n*@I5c%D4P[gd0f
%4@V5WFhY@1H'*eD/af:=k"@g_W>e?co+):+q!-!!B1MSVGq?P3qX2X6[=3Msk2XIfB0Y#/QI`cm>Ao68gT*DCa8<s5p/_LAT4UBI
%(<\A+rjS03mouR`Y=lXVIf_q/h<F(<^"oNmr*I#a6qaqrJ$dV:]D:*a>ag4iH<.S_+n"]<\LjU=a]X/lM?7bIh\mLR[V]W,pF12g
%*%ejKo=9P_6O!mBq<[-k7sMRrjJ!Njs/,:+"j)JO5msWL\2bd9HP5o$'.:V\rT<l0h8@uO-c@pVJ%DL;>^'.bW;k`]*a7E4M<j]p
%NG!&&*LL8aJ*lpoVn6`JDge$g<]PL&8/6]NP+mhgrWi8*k/NT,7GF@Q$6FG:F9Sf*j5OAEq/1!Fm5"`hGbt[7h+GtV3R!ULaRd%;
%*B[Nkk=;/OC]MpDnR-O>h<g1l-b$\Vc<d]IqVqST\i5%ZqYP_A/_j-/qVsb(7tt0W6ceCeCT"qY!8W]bWe35@\)Z#Jf..JHGOK_6
%]M?mJPQUHrP8ii.T<BocMSFRL&GX\,%6"k,XI["+!(#_s@;6n,1<L&5f1t<iY.Gc,bX]jI5sN5eHKn)Mq:aEBk3&T^V:bY@jmJ,1
%c/BO(chLNu-k1R[]=IR5/.S79?$lNboi4-S@ITGGHM6;ulh/GlG:8XG%spMR3p+iWW&QflIhb+2D>#&G[_(SReGMFEZi<fs%F\G#
%gfb_ZO5HhX0D6IP)=C!*msdh.E'67`et7c7[nkTsYGGlIOh1:1Eo"?_:L@>VrF_&^LY_T8Ze$t\g?-*!naB6qDr$u!QNHI+!s.Ul
%B*dS`c.:ITq<Q)2f49#8s6FWHn+FQbjl;&c*`0c>LB_sRX(PBPNu'aHNphEE8=P=&l^JDY;u;`kdB<2%j1KM=P=2OZ\a1Ui:/?0*
%1DVLWB+35Jk]"3ol/c+IYkSNlMTqdZ[3;`H%1qR6^(/)OT5gSHXZu.;-HiF%rXuKOr.eA&f!>meA+&oKB.l=cSO%CZ6#c79&Eb-)
%)s`Q'(uhn^])J@:'F%%][eE;#h#2]691S[Me^@X9q*r2n4%%8N^bfZKQZ(&#S):s:q?4u+]"\#^mH^8g@E0/[!!h[GDo#j]:QPc$
%D=0'*m.m02`o!DqLef;oq%5AY`SQO%*M8pmVSu05g"lS;^&JO$QMZJb%d,b](8B-WFKTp!W,SpsquP'7gfRj-q"FF$P<nZd>5%B4
%Zh=1_X/"78h1[G.2n'iV.Fq6nB.Oo;6X]mqg3E2Qq-E&HhWQ;:X&jI2b:e'XhqZo]G2r:ONC,\2[=3DmhT"$Tq)Q^j3%U`UMkaK(
%!#a>UpCD31*!^(MJZQSRCbFMf%jep,q`=\ap3$&ac0<_Qr>`!9k^#F@^4eo4>.30joR=Dn4aQ\`d0bkA8ZpY1^A)\m\D4^fq??A7
%pKCc?+!0;KD9cp`/\j4;^Pk@)^8TSo]>_sGqqJM*pUaeq:UJtqq;p$&hWDN!7g3Q];luU,lcZ'>o^3`9pVS2E)-FI)!S[,(fW[:F
%oCn<s?`q.j=9B,?I>k@Z!g`]G)n>._T7UpUTqWm(n/bcG[J_@i%o%;Icgq!pXe1YU2Yt`U`uri"I_B`Lj)F2YBYF0;bm`Mlh/3ZD
%4;ihQ8`'uohY-0k[!H`%UfuNrS'P.(YFS:oSCY,([lRisc4E@H[Yc`/QQ(_1pSH,qh<F=\O]F]dGBSNRq"g[A3o7T/LZX5JjeDB3
%5J-$pZ5u1AT^q$%4:+;FFjf"!D&(S?btifC3.*kT,&OOgXnV@FXnC83UTO4>UGn6Prh5pjWhkn[\4Q#SO4AHd:YK#')cO!]^rnZc
%?X;OS*j(a+j)8+d)45"lT"h>p$Xi5LnQ#<upcj7mPt1chK7sQLUW5oDIX\s0_;82o=EAP8.fS$",<p(L^,t+5'8&NjT:TmVhfKW8
%QXB_O&Y(r\B/fj=CUd-:)uFN&[UM'^X:9\$H<5'`^NA90qON\ZS&uCi]R@6Yq!2IrEGp>BF(P@5Xg\:m++C@%[NB%d5kFhr+D3&D
%2$7u.blQ6cDZLBX]<lRf3sKsa3ZNsRpgisWqkIA"f:T1*Dg\*n*0/%`!8LU?7uuf[3:qZ8rU=7TSe9.)a>"C-^,<"Df$3qRH;U3'
%*,drcE2s@o8!P%<mD6Dq'0GX\XgogM4VU.G,IVj3d9ZR*K#H>oP7apb.(MDu?Y8?qHb_0qqU+"tCC*Pl%o65-*h;)KO-7$upoC_H
%%PjL.qj9TmRr5[?`Fl@dAZ3C$\s6Uef<'9V8>L^lH9U+HaG)DA@WO_P??]SlcAO9aLC^RlUXnDZ3Rbe.5:b&!@h+m+k\0e263=N:
%p\+814]r<ll#+dn!*4"[:#S,$%U2g.E9fB3f(WkLi57P/=FGSnP8iBu+etACBR9;Z[BIi9b]594natj?EBldD^9%!ceXKaj+G4?f
%QAOVh)5<-MbDV-+A%PgAX*F/Z5$I:H:VYNBHi[r5Pj`PY7k8d/InrGok(d!Ph*mgQ%5dcHXZ*$<duA_/5<I(SSXeAEHh9d'F*mN:
%p\YCi3nMDVS)p-[FUmKqj#>;l3.:gGE;MOapHN]=+pGK.(P'7ZS,1!ARL9slqg4e?gNOFk%)4E$eF(-\G`U0g_UMf7d*sb/SUGF!
%V8"l@)>*c=46JgnI*4b+?Z&p%21\nT0_ng27#@iUGP0#3lhM&>_7X%<h,mu,?C+l5IHrQJJ2$ToC@V::ZW02X9[Ss9\2F#&n_Ld&
%4.+gl0&I_cY2@IHW?;$XB_G>6k_BCK+*F0_b5Kd65p8)]rV3u&(mr*9FT:j340BgfdG9d.dDO\*2<:Erj/8o#J/R7tg0-W@@,F!!
%m9C.@\X&3I8YD=;!ao[p"t!pC7;M)C.br:rh4ZceL=+7uZerO*b/NN3a=?=0+9VHsm&m04SPK1Pm?`$.nSnHsqXLK/mjNed^:Nkr
%q7?+_fuid7mTf48I+hWup?(Z=05lCd/RC(un\(P"JFl't!#[s_D8#1HHQGds^L*PU^]/`Bg!^(ss2Ncl:M%a;Z(aRFLP7jt7TfJ=
%T6HoF*3?VF2X^:)%VG3s79p[E=bQJ$F"V_1Z.T#(@uM&Rh:;C0U[S$)B[Xe4I]PG#TgOcGh-TlO[Fp*I^Y@Js3(grU^f=*1Kd+u&
%ftR&hF"o=oJE$"rDKI1`[l0R7SV,b[QXBL5[_@5O44`7!SL8UmIshOPlbe^iPDqXg2Er8LIgc`GJh))Y\CGnHI8"MrhRJC)G6*1W
%HE%RSq\?Y:h#P7i^,Wk*pY@cD5CP_>r+PgD#feJkl]Ze4g&?H3!1,TI0&D%_fO6))5-I,WemDCgO$8lAD\:ZNa7489b4+rWT3EgM
%#Et'Ahd4Z_[eY5eM@d%U^O=X8K#dc^ShK(*8QacZOcNj6I],]j3tH8))Yk40ik,^Ss8'^SQQOJ[>5N=Z-oaAgioA(=Xn'<KnDO,K
%j0dL@S,$5K)<OAmHeJe,]6!k8^2+dl:!^2X=+\6RcSr;pSun9[m:UY;cr$\G0Q^r2S'\i>]UQgHnXUR!QNMYa[^ifNs"Q]UN;_<(
%caJD(MXJ18G^B<BneCPrJU;[IF[sWH>E9kkgJ9^`4p%_R?g`?UGLY@&R+rG)&s0L%MR[m/WN3/o[3RJYN7#5r\$(RV36g%>F4KgF
%f]L>iZ]4pc\_ZRm`EmKWK74M"0GZm_"[9L$%p<CsI'<?B[?>OMlm@T#<mN[aDLB04L3gN&m4%&%KBs^db?#4CEk=b!0*Yd%%Ldo6
%[^WsT8En^8h#;PH5!&VMpgWL,kFWWdjJV5f*<DZ*jmG96cKdpOqY)drq4iXJ.SDtAIk&+#L!:DA'sQe85N$gYScN,aJ+rt*Y[4^p
%k;r5lAuF:UaIO!;he^>Y6!i^9a3M.emHJ`JgHV0N-VIN`C(5<E?YsV-1N&iSZO,GPm.J!S(AMXomiD>;6@U"6]KR85fc<jrm8r^G
%F6WJjX*2.Ma05/%^7b?lrlDtFefWjc5.JJ5[bgst5.5e:cj#^tn;Yh&_ate+5LV]Sce3cG[gqD9m>q8-^#taT`Q4?"7dZ4jc[*LS
%`>9<VpA1jB]ONVOm%\Rtf0A,mhg&h7(TeReT"j=o3kcF?7gI)pd@ff;(?_K%j)9(3flMJuJ`..VloDc-m,:%O_bb22D]^#q]$i7p
%h&9)h)N@OaG7UVOW8lTF3ZS\/;:d`D"oaR/mZ,rqqNAXTctF-g!P]TBCZ/<BDF]8)!I8j737!cui8EI#Y<0H"TX!*olX2j/Dbj(s
%KYK8-%*&;dF,CAPkjAp:Xg_)cdsKCRS`E,%0K96skIJ]Ap`'lY\#8'<j0QT$YheVPKsL)>gVZd5/:qZ_*IeG.nm6M^;bL@1T`q(_
%7EY`%+&5G'I#ljtfqgYEZ\%OgJN?lo"8pN6.q2-Nc!M2UMI%*;$2`7rFRa(7.H%%/i?ich]toX#pgeE![Vr`I=)Ft@@BD],8mBM0
%Jt\K3Bo7I0h(c&6j3G2*'?Su(fSfL6f+n)Ki\rN@:V?@Ap_5O->//hZ#V:FM@u5XfDs^Bhj_[/LE"T=A7JDNpHL=+G]5tEAA7.6a
%^;6ST_YDk*rH/jN@UA)t#^lIr<8gGt-iik*J%=b%,$<=YW=<L/gH>bRhS>fPl#F2[Tu9S;8p\t]laT#m9\P!Um-S3`Z2_K)7l6li
%,c&hZi/]K'M5/goNOKQa0`6-(qKW2C)P&`\Jc0Hd/)3#36ncFdHIV?l)nhs0f+<Vu?3;O_!t=/B)q,B/FO4msVU20eDY2\\h_0r+
%CLaBJ"2f.Tc45kS_,#gT0R?5V2jg#$jo^u5K2msBh1Bs:`nBha,DVcOEs;L&%`Z1\EJ54b#b7#H#(ROr!8uW[Z/LFn:CbWr0^ADE
%#IP?XJglXrfTLC3+:uO.2d0!R4OI,<a-.R>o:#'l&f9<`i[Dpn=$)b-6>c#*>UCYMNqgY.^PR`pSmKX+@CoIRh=+a3/g=!ADK=/e
%h$9T9\_q5-h7/A`E>M^?7H!I86&auU3nd)-dD11T?;&fcNa0LO!]<T_UIidLjmkBBI309E-I74Y3f;MS,[.qhMq6\7LpB\BN#]On
%ajFFFWG2>OD]I54@&a8K0,^()rEd8oFF"c\M7niR?LN$%G\r,4Wucq.IDJM!2@dJCH"*Z,77ZKYhR(&7mer>-h6(_Hs5Z&.SrT9F
%J<MT2a4Q3h#RB?i=YgQ8H#3=YY;8>=L1RBRj`q;r--%eH#SHd_C$bk7ClE^jiX6,XD!X0pK^1XsYN,O]hBG9VUg*).k=b?in7$]l
%clY1OUX$h/+*X0KnPSo;Ki=a2-!q@(2E>IF]6:PS)ub-1no_"^re5Y]e*(1!\aW.`d8Z:K+D;f*:7;j?$?94DI:O!ECBT7^klpB:
%"P0I!pMVG3BEDEcmk#e!T2(h9c0.UbC!tegn_"_\H.![UO+>"@o>9ljJ//WmUZ!MYqW^>hkSNPATcn"c`T1QIotb5gRLVW@]1>Bf
%T@7CH&K>V@Wo"1b%kU8K#8`5(]#Ea)'@8<lB7F89"<B.@e)S^jNoOr#E$98KXkL\Ok[O?_2nKbE*t0D1R=!]DBf>[rq`rhb-gENP
%cgC(9^\U(MpbP*p[i@5#NM_LXr9u6cbrXh)9;uuDQ8Q%#agBCdjOB"0(S1slVfou$FE+nZBa;t^5J6hB:-4f&C9GO`XI@,='X3@M
%g1K56gLW1QV")rDVl\)p*I98M<Z)^u4MA9'^6H,\TU6t+8\LX+f%UA=jc1+rg6[UhRSUuYh8]q.(MRDr9*r0G2Jc1_Hdb:X,4pJ(
%9qu^!T/r$d+)(8u'JoMhZs7E^RJhQXOaRO)*0$(6]^3;8jWU;@j3dY:(h1d)VF:l2Zu]=U=Co6qH3Kmm)IC?.BO]^:[Xfi6r2:$(
%euq^$k65_]Wi!IDs"_9VD@6so\b@!M(g\acM7ng)I(J-9UrBp0gHZ5.^8GC%B;M&BJbLG;`>)QP0@mW.NQ7Bbo).YIQeH7tHV=]-
%WNH(*Xkh.'d!0r+%ENHoa)gFJH)K]?dI>#nWu3Fg%)9:q@)<gH'XeAN1GPIe11>ea1d/D_5!o7jTVG.r"0S>;-Ff#2nR$6s%lC?u
%8`5ejCcImB0ZKuB_647:TPHQV*hT3=BlSL!B=T+GGXYZH>/iNqktO1N>nT59FYc&SPXpg@<1(nA&SE!Z,K$_2pTONRVcu+0I,k$!
%9A^k^c_R,<D1q0Ug.@PNrWgpH[BBIOG3ucNB/onq-R!:g\gY+^MJCfJMnE2YA_`*"W`^fZ$3oo;(3bS@4DFGkrO.@=^a.8X:!,$>
%hL79JD:>e*js;_ZZ718Z9pIYZ<A_mnn=%fRJ)DTpROX%R(+np_>#V8dBrief.=W#c.oio*b638ERSfnR^HI!$mI.d>`ud0^8%8S@
%oi]h(o27m/Zl-mj-F;SmeW'Qmq('q6Mefr.o_7kZSTeLc8n?^*RqVue:EnH9@baqBh*^B4=9JU'mXOK+VOALA`BH66*I%DWo/lp.
%!rtS$br9hGA!0!I>l/@SecWN<NA8IaN^X?4mfbV8Qd$e6nK:J4266)6NQl?UVPDpGh?4D2J/?1.,)aTo`';r-k:"M;kK+H_(O._1
%0WnPlal!5@jaj*'(3g5o1fBIY^%VB+#)JOZAkCt!/:[8\VGYdc,'\R2WVmTW2lTE<EM:$hB"nLM%C"a6ErQI#DmcF[E-Y=K&'a!H
%9bVc%9)5OMDdq8pdaAiYNTT(jZeqqTdaFq+-8ES6s5^$0cMn8Z>+-e_1/<bBrR,N&s+;sVrYmLB]&9E]7FA1ls/"Ce28H5RACP"K
%^BL2rVDKUg*i8fNGRbSs`N&L$S,MJ&,tmf@Pq/J/o!_e$VP32%<O:rj*R6Fj<-V1r_Q&s)<!4mYk!2Q!Af4&6!P+8?%m>W(!S@kO
%'g:p(cl<$WWmi;!oWTE)F(>8t8X]E<m)RHmGmqct^(:+G2FeA5FE,^*iF%k;"kes1"[U&Z3UFf?*$kSUU<bZ5An>#2`r+5&*5l=o
%3`[PG+b5ZCJ9f]&6=dF9s5u,ihg4SE/!"2%\BET'\rVF.M?+m`8I\/Fa1ui:!*mHSMB;J$BT=&\Glje^lX<#4js]5$2)C$dkkBnV
%d&,!E2I-B-Slq0R(g9`N#Ni64CC:4+RGPW0;>9Sf0H+"a1Ff]iT>B`-n,MjTD#d+j,Q_4L.IShD8,mgs$uo"TZ2GNLga#DN#=R20
%@6`=t0@FH9ef_eWX>MUD+qLuar>5O(U^CtH$?+Ir^<-nSk4depJN;.,St3cIoR!B2JM4Y)5gt.o!b`cFX?!e?"Ic[1rtdDAW<*3d
%l6hJ[@!$NdE44s0&Q\Di0nJ2V6OpjZlVM%Tet=9YjB6D;56en]KmcI&mErJ*[G_/[B$daY=DM.bAZ7gRpG).[Z7)qWpG&oK$m*1m
%JT;k2*Z<gWI6m:2]lAU>VZ5N.a"+g3$j=_Spo!Rt[eKfrpQic@.n?T8qsSC1kPp\=p35"*+ed*$'-M\cUouaRaI)oY)i$hK/1kX^
%qkE%dA"anW$hVr$Y-Cn7]!e2Jco.036//iF*K7XB9-'_li@>5@1cIB^.L8IQ:IF>8(A]<.fN0K3`^6*S)Z/56f3"u8>[q-5A/e0q
%P&22e.(LBcV;ust3[NB[k`]7]?_J_`4,oD:m&?4SA"chANI@Xd]c!eGEfGL,P(3""$/p4*=pW_^W$,DU?OpQa9-&\442)?E5B3ZV
%E'8S+KYMi4N,Uq-D1l[Ue.Lk,jr$%qAIm[5*O7N1i$(A]4]p\$20L'S9b(4_i:V%2!t/RlK@e"hoR!gF_/&C$qMgE[<f?HJ,>S@!
%pTP_AX(P^jf>E%/Ha'Xr!sh[qF'IYam"2>:/Vb,a]cL5Hp):Q(Z`CR0\(ANG$nR3'Dm+rnkV%agDQg>BkVk+]>:n1S.LY$\A,FYl
%bd+\/fR40u$Obb\U;TR*LD<&8nD`Kp+^,c5let%Q0$)2.?4ZeX?P(DR?=W`WDp0u8f@YND)cr`8<oL/aajY0E5C/<kcm]olO0aUT
%,u8eVihJ_#9.Slgm\A[,V%p2=qrftN6,dX+50i#]PubO=mUKY*/@'L`gdeQ'Pu_F*nZgZTR!m9>@t8Q0BuTDs50g=fMCe=m`5fY5
%Ne"qe$Pd#:ePPha9Jh\E-X"lJSH=(tMhWb\Vi1=-Zc6A("Hu\?UEVXE6s>tQ9];$pRUrPK/-`Y8p'PT`Vh65TO`-j'4`UO.idq.6
%dmjQmP@IO-@tZGrYCKP,CB67seTj=0".jt`_^iYuKq:)XC5;8(^t*O8Z&qI0$S%j*b//360Q'3.@N6=.5KuGKW9gC4d#gLn2(LH>
%PcTOi'@3CnB!XqWN"k*I.U`\F"*6Gi;L(oj(I=M:*%(2m6ST]3+L&gF$O=ta@`V4O$GdAh]If(Vllptmb1-/+Lk-a?H(9T7&\"8D
%&4\#Pk'Hh'P47#.R20lS(e^"1h?5rTGQLuN8o,pFqtf"*m6ujp+-=!k2B,cO,1$1^WR<,DC*#PWlkpcA1Tfl<;NU@$Zj-Yh`^EB$
%<5%p`__Ld\PtJqE#E4mIH-Fo4O-0RZPrO;FcZuMG6%I(ZI&gKb!>$!nm.14olgSG!aB/dc6r_ePJOA!n:4i%3j?!H3.*q'b+O=H@
%-rZp2ig3rd7T/+T%r3ksJqtr&@t+]i9ZQ>S0K@&rc>u>h$@52>#ilDZ@<l:WAs1a$=V</]en9LhM<IhF2Ut1H[.J9/i;m`7L)@qT
%$NK`5E)/ogL8P"SY=\n]!9_G-)H!S0o@TZZ26:]t=:*R:]3,-o$90_'B8R,KAC-;^[V8Sr@o_DTDE'R?:*@Acraj-kMT/DWWefJ-
%Q'Fs?'^#)PJ>+lGU%R>ben[dq5l#:-$/eL.Nfa[9JRM=s^71<Xl-6-)Z\]^D.AX\(i!f*\k'K#&6"QmB-:pL^*=1^d;3<[]D%pHP
%3j+.,)&YkaObgW^).;%N$/Z'\!WZn->u<jG&p]=-V'?:c.gGG#d#,-k$Nl&6Ek2Xbp,F?V2MO^9e#SHGcQeoX3"7@qIrgl?<\d+H
%"U.1'0GlZiW(+3T6WVR-`.Y5?1;dbhH2K)#)WMs;jV+rc=1!,rol[>9pI+29_/ebaWmlDa`*>9%MMatn9l^69_Pj3uC<UD2#5UL=
%El-uL![U2pn629%8qC:K)#;#p1c3htq8l07<,(e'GSV%cfr#S.4ohL28BI#.n`c;5n1;,/.iu/VZfAhI%@e[>ag`p#$p'U#d\WaK
%9N`QTj%_=cBjcUg_JgG/$,]>@8=FD2=<@c5;/)$mO:tL@119GR(cD$oCTVRE"-*'bhuc,5j,@\%,$;`'_rtZJTHu#oedFnN+F)Sj
%i=!pk1\Y4@6rBUU<l@`m-tq:*ABn-bX9cOkGRA2`==%Dd!&/d?R2u]')pR1aGRV_E]9'c_GQii*#_-#D086`3!jAE1_(-sBh'=jG
%$.5O!-R?cajLuNA)-PBJ!S3*0ng'U>iNq%Ic7CaG0Eq<mKH5'#3H13I`.>fY8]@O-69.V9-K.Sfb,"euZNcAA08rnWLi3\kJA[6o
%93a#saoKASR"eBl^/*"&H3@HGhjE78TE0McL_;Opie^\'J\jlIJ<@ae7kLLc=.cCFGtd1F`YE:.Ec[p'*0AP0_2BJI)pX.?0>OcE
%b:@/f.Z[i^Oh`^PVs),M8^)mcJ,oha9&ZKR6A1I/73_o@"4NMR`/EEu[Naao9@RLA]*(/b)aS4Nf:5h61k7Y;=^aWUK-LJJ18>%0
%,JfB&Gtr+hP$JDp1QHm"#TuN["TU\\c0_9/bWm/^E-FIF,_Uja'`;iL&)rU=^pk[:eK9WpqTKbp3N9h+cg$QJ1-BV6#`(fYC@HmC
%G2A%"R:LMmLb]9'pH=-:j,?r:83)mT(BS%tIc-:&A+P%G"b?f6GZl5UkE6U^7g@no=J<gO"Y9(A:GDkd?=6Cp;WZtm#CG%+9T<%D
%g(^4Wbk&iQ0Ib,S06Zt8M)=TN)^qFlKUq.jco[CW!AAGTOCh0895*@M5,,bs,?6+ps2<snX+>H7X891.`W)UI.cfQ;I-nDVCVL=T
%H2CK^!=Wakn?6DR+:\<=<*lhHK6^G3_A[rE5q/dQ;M>#(&A(WB8_=ZA>7uU"8]!`Cf[&J.,i47pa9l^X_!<3?*b[o0h,R3C!cjh]
%@jTUEDoBWE0ELr'@dK[2[PI#sqB/ZD&7"pkLIbRVMC_fV0/4Vm5Y54V#'IU)+Xq,F5VG\72^kO8-P%>)QlY-X82s"hClgc22Mpmf
%<D'&i7S<e`S_lCV?AN5l7W5"cVR.Va+UfHK)2NK0%-c:a'5%7FNtVng`W`\@WR7g2O"lR;(pcdqJs/,]#9H0sdlJ**1E4AiSANCs
%P"I7<-WS,YJs3*FJU@\SWA4_q5;G``+8LquAeqX*5OKY$K04un;M@r0CC!N&S<bE[M'S-ofaD<tb`^moSsd'Z^r[7fi!=4^a9.@Y
%89:bDnO`)5A@okc01f<!@KLq*=_F[06DYub*@^,j.qG$k*GNuBN<l8]`)$GR8>n(r1g,Kmn;tmb3-^(dOR/&i:j["l66SluN(C9#
%HDS#bqP0<I*(qC:Ui8Z!.HqkkE:?8[*.5_.7S<eR9Snmfdu'KV=LJJi/1jF2;%#T8,Z<SW8dPBH7-ks7E%Mt_`**ON)J)=\ZYPCr
%4*JYF<s`u"Q37nUZ!+5r42fapgPf$6'!SJ8[M8;GH:chUhb9iIJd;NQd[e3pBM!_Z)%r(@0M>"o,:MJ?PS+EiKC=X].U#^O+IQ1&
%4JO4AV1fhQ1XSZWUZ[XGWEBiPIH`Xi>1&L`;DK@F_sCig#J<C?J&%hI,pau0OT#e;,,8(eMrWu\]V6!KcmV6k$R!b,kF8AM%H`N)
%AJLX$MV'iYo$$,Z`J]j[?q+0L,3@?*MBelDlt['#=\o5tDHnp]Wli$kABAK7^$-):[Aj3<f!?bgk7`m\4;2c3Z()MrWX-;-jP#]"
%X,=jM"3@KGgZ*,d*f`<44r0AX8YgA3LsM\%q=^a!6PlP)ZBkXB'Vl`N$,/UAqIRekl(X;(7,64B"?rl>5;M`$2Cp#%Zs]1"50F6X
%/3p)TdW5Z)BkE$#&'0kA&e]?56!+TO_ZAV[;1X('BJijJ]7#Y-Q7Kf_mb&AseIa"2%pU:fM[G-Kc63X!7TC$IZ02?Og<<fW6UZHC
%q)TM<K%H6ar/m*\l?gXp_P'7tYZA_7KS^%BAst8c7@c!uh'1edjJaW&mYn;)&:KtWZ\VoQM&<WU#s]4SUDHQSJ8TrY8,/Cl$>MVi
%BsIk41N^R@=]2*`,=F)MVP,=m+]tte&%.M#DmEp%C(DUV23o4+W(_N>Y"fUDXiVf)J0jCROaV:%iCA#.^FdVQT_srh`&BA+JIF03
%kq(S?dM,n]/;&Nr=kdOk)3j?P]<Y*@IUr<8%+cV%.cN!2,D@4P=>'MR'%C%G$jBuifh4455;G<.)*Y+hOK>.@od(8c<==5kKDHZ_
%2nSJ&I'&\)qgnqDQGgGA\+j4="6"*#rnH_BqLVY47q[*n4QKbt\:;.9('C\/+E,_$'R9'aM$-lQ5R:fPCS_aCaGbb:B<4;*0-hVG
%MH32581k0L=_S4mAYZ)e]C7%<'NRQ<-^3!#>?MFX(ZT3[oiZp!r^cT'lDRjO1X9-Xp(/Mir(@@rV1ekH_LF#n^Qe4p9)*lN-(GPp
%#=5=F+Ie*RfV#;bQAU=cF&:9pb2bkQ4XfIu2$-)"5u>`9e40X!(I9'3:`C%sRfkT"6![/TCD54dKJc%]SP`4q'\#JR2-*$!<_s/>
%e<^=rCI&tG:g4aclNK.r6![nqWu0>NL,>/=Q"F.m):XfRor17%CJ[M?eE-u.^-N3J:mW0O3X>?,5tuN!k8i'4#PI:HNI+2T+4T;*
%p&.2"5gY5sZo/'S&jZmpd+/f9M?N;o5takt-53cC"RS<;MbqcD'XBItm87<8<RA`#["\bOAjHf/ck[G)g'-kj5tg-pc*2-2T<EgI
%EVuHS$s(PkKN+d=0l7T8'#6Nh-@Z0<%\dYmQn_;32p^Up'9Q\!+Uqto1eu'[0s*H2L^:3**9P$rdM\6.;#A?0Lj617eg!1,l0+eF
%Lu]2.'5KhQ=>4em4C(24\-adI(<:M-G5HeMURIgPkQ)f1O]+,BS(TIkM\Vr9(C#G:%c6CkGHM0/3Z!ms*F7XKIUdKmajnW)kXRok
%.-Lh1qb<kN=`*icZCbA$ES>?rq(C0C,R/F7O-97,=Um>D7j`W5$f3^&]%m$h&3UAQ0Q`AG2baN?ZY=[,lsUFK9$R[DS0P?Vo;BE>
%+J0mQa]tCCHM!!RE4pqp'KThcs!uK!)"+e1MnT2`O#YJ_*C**SE:*U1OWtDE=<`(.29sH$lc(5f'r2*%X"r.kJdf^6h`-WNKS6g<
%=moQH'ppsRFhV'9Ed*u!%ZEoTE?]%nUABJIfXU,.`oK77NEHV_)^e,45Z%OdB^j$)^p.O?iDFaXL^oOJFf$li+E@TORDQK$-`M)M
%$(adj)C5cF&qiSGlfS<cL`F>u&e4&%Ujfa3&N?Cg@&7=IRcIMa&r=egN<cTR_/'=jSGK+NMG^I,!R.@DlAEB/14qIhL)A@,QBk&8
%LG,`=@&>,3do+2)LrQ8!"ckWT"aqWGH!nY;r=h,RF,qe601LIP!SntJi.o@F'`k+\IRSXIkce]?cme2r-lT!Qha_Z".6#Q%H.\(D
%)Vr<.\;MY-R11kl(iI;8A5qpX!HNc0`GCo1`S?$b#h5V5,/^2>*mCBE%qZ[]Tc>Zr"hfDFgFQ_a&Vs>W"!1d3;tQH"ED%Sm&re]B
%Vso9ud.aOIm$I[eFQ;"6c`sM$DbSB_DTi`P@%I5JO3%0-,-)c+@mQkXA#EVZ6CMUn8/Ghj=s[W:E`dh8NC<hLmDL`b-EY8Q+X7gL
%BQ,7i)=$Ad92aPk/at-!</6g-(u0d,I)/*\3_W7#aKeka9M$KO!Q]5lITRMo=#>;5!^_!n84e%nBE<8bB,,FHb(c.bR#(aWBaklV
%*+)^27N&7RjGn?u5ruB!``^Z@nNB(mN-h@#%2YqT20_`N@b;5NclB<dS.n6),%$$6[2bF1G`LFF+Ee1ZA'cicJ&F(=7HB2i_>,(B
%LH'fuNttnmA!DR[:HW'pIuQ>LKQK<mooN]"8[R'<b.+60j5GPk\0)#U:ZgFlaU-PhPXbr*137CG;m[?!AeM$o+/X&?V2:!9;@Q+#
%ND)`4(ieS&@"F\fISjo<NW\=^:*\rMYLLRJ,c1gflP]G)W6TE6JF47$UZBEQmNZ4)!Jka4\^[-oXPE=!hEjLm-2.tE)9?O=n>V[r
%n5dbcKuQRCc@q[F9^BM#XtoPT[d8h*.d@.1O3G3,3`/&Xaq5i9Kq9AEcH6#(EJC//d'u^6Z*gZ`N\EACW.>Edcoii\(Z'brFG&)0
%"%CS_3?_81.!%W9$7:PT?I-tcPG<\KpGWdEO(KWcU66Ti@:Mcg'U+Is=Zr=6NQM!Y_!NgJ9<D)7Z<Bs]8&d3Y0IjYbd?[V9V_Wea
%c,'8ELk6Id%p"$B%o#g`.[V<n`]49afcV_.>ZGe/."]%YMQ2Cc-DjUo1K<_!NM2!CTP9Emhh!OQg;o7'VgrLF_1B6IO&-*p/>KX)
%FiVKA7H/p'K^P.-Y@BNa-"D<-,Jfat(OMsgJ"0]YV_8pqOGjKU-6O;$m*/rj#0P:dh1HG4(ffPcVBD4%E+?!feW#tJk,Gb_lkj2M
%J,pNs`e8?M\!:-<VHnVl-6a>\W*!m0j*=?mS3EIq0c3sG#EA>fG+9jm"E\1eU>o4s_WI8.T;Mi]FCc<S)0:jlY:Q$!(Ze@Aq8s>N
%MEm@g?!2'i<-F:R?Q&Ja1/=7Q_QC%ej/*35@'FIj-q,GSBd*:0=qIeOHZ52R7]Fb&(,?('WNeaJd(#aIW72Z-$Jeg'GdMclOF_).
%U[t4IYtAa'\9:1-NQsAeJj^L`E@7o:4G7?4B:@M0IoHdhLmF2c1iQH^crJBVPAm0K2J1F7>>W1L$MR\"Qk;jCTVY$Zf$K#9Q9gRj
%1`/u5NSYiOoFaiCXW:^AL`'J[CCG)(j"q1EYj<hdoZ11J'@BB4^HbB14jA`jN-=$-O!!SFoTlqCJX.!/=>Ho\NU++gOOHhSG$&A3
%K.0_2=j)HP.VBfRLE#>-GDUT$!+A4-K63?*(.p+N!OKd\CZjBU@n8"RXUBVMFIm.Y@["`CKMdc(8E8-;7g!7s+C2I^XrBHWH;`+2
%APtGM`iLm1g@?7O3":jKQ!pKn-CkO$R^)Od^rAsb!*gDRR;U5b*X51smb6kBB]P]U=%U4P=V4lOpPpDGKENe=p5P%d`5l1s16X'n
%M4Xf$`5EP61)=\(80f"3qBc;LCh)%U=lBFAKsJml\@0]3n>Q\YUobsjS6RZpB(c[$!_^h5_sA?7W9Qc'-G^7?E)$]J<i0,4WDog1
%orPF(/#t#93*j,G<6>EP+</'!8;VG?BJ#tqQ!3o4?;R&/^2(s#5dBc(Vt'I9DU8gi7$&k[Yfr'T8q^iMoZ<Nk4<)Ac(u"cK@su=,
%Lckt7$nQ1JAk73\aB[nn5=7!^pLshT-GfV%*1WG&>"'eso%@I^P/]m/'K7U"LB+liS:aGiq64sq0mF;6^4'^+:AM$>6<U?6JS,b1
%*"&(eeK.FNEH,YM[EoRK>6Gq#aeFg:4]8[VUMA;aj_0(L@)G9gg<#Em/]THR;G1o/);_m"9O'l/PtH3B;+BEhK1Gi1]Fu_Eb0>tE
%Cm<JQZGJ!Lh..cNZL$5#:$FBZP8/(+(lqdtaI`HLfm2Q9@9KTEnVrn\+p<^J3>d.Eh+3Wa:k$gq]\YEc.fX1`D[h!9kS[9B1q@+(
%D:j2ggraGn((i$R4sMdpADlBN)r$50$5Giql-g90X]/.j/;'lGi^G4pktZmf4X:>L;cmI#j&/2OS'8ei\$/&RI!D%#b8plBH'5[Z
%Y>Pk%\hZHPSGAG+0Fs-N,^8Zim%:2rc"gKh#pU=Y#]d>/3sIGt9-fKqa9N:\OFnosVY1g#n\l?Ibuk\)a]1\U_Lf'P3&BWhPo"g!
%Qs1a)PGL[(A/WT"lndbJTIL1sEqq"/H\kE_#B0+]A5Jq/.BUp!Cm@ATl,Edt*1(22bYs_WWb!HsmCOa)]GP'p3A*Bm"Hq\NMAl)&
%J=*X9^l=@8GlPu\jarrW%.$REc[\S'aI0-6.6D&QT<)XH6&ok!(0*M]'ou+0q?`UFb8M?MV(%O3H;OfQ0sV3fAf,P0S8o*I\sRep
%Y!hLjaJ0t)C#RF18X,]pmb5Hul5=0.5hfP/qcR6ip3sD?"nO[=F]aJuXp=!7\Fd'U(*2qL`d$@URESWaN+^6<V6'GSfSQ_Z*X0.U
%U41*PK=04CPX2Qr=`<*Z&c#tf7jjT0l(5mhhWR5j>^A)G=j$OYfn=u;NBGbhJN;+mK$j,],Yt[g2_FC3QCW+J7Ok"6f=B63.iio=
%@h!s*b9A&'&-kXX94Pc[$#tTd,k4a-2/NX"3F*ku*bo8b&:I"LqQpU7p1?.f`7O3)4/'khk`Jbm1[*DI>N(,@pXGVh+Hp47:C_3,
%9emT`j'g3H)a0fb0.jiCjV/I@qKHYNa>rc'b[9BR&C#1`L79B1[q`6'PjFh%UKX+\+CN]nKFd<%>"&;,)JS<#:?H5PXemoc*]'K(
%H)RGr*dctXoM32CJV_2+T<\Z!L_;*J:iRn5?r"(\^rDdmgq^_f.*JKTpR,4Qbm@0c;)5M*UN=^N(!!t73;ojH5a0._p[8sufF!uS
%$uqEAK,;`N-?l3GQS[D9VO`Q"T/FPd=>h7g)kC85CWpF]dB\[D[_NktUg:8?3"s#$3O!P%0'I.8CD7>U4KaYR-Q6,*;5XUkBQVOa
%NO_q2'?&mg5B4fUQEjmNYducW#bZ/-2Ytu;7e`]k`O]joDp%?8N]I`<PR8S_MWLoj^b!EGQ_#=<%OFsl-`(EX/O.^OI^Z>K@@Mb:
%Zer0oMGOUj99q$1MScouf@=,^eSIi=G/&njcGdjW%m2m%ne75f,>[)b.90p/0s<!;qk6h;`ECL-(R<B3b#8VE>=7l3<%l#I'Mj6O
%au\:\QmIoP@5qgTcB)&6P^o/#<$/eS65gh^CNoW3da38"A\B%0%Uk)4_XX5#Mm@+Qi<(e76jo35NL]MN.1>/Mnq@r30Nfb@CMPs7
%G7!Fb`>1(jU9_WYlB8JP&Ls+@C*Sgn.Q'sWp20P'L:$T3$UlO\=@5lAKFkHM189qshbL3kVm1<>(!9Cr`6Kn>Vn*ef,]BK/jO#E7
%)NLDN(T5Lt?IS7=nuddF)la:eXgB9i$<\RHGsrc,27\C1SifbgVid9+m#3_ITd>=2bpnY6@Jq&c]*JniN%.\c9,b*><`@-IAs7=J
%es!lV^5,`]?hK*=<afIk;Y,!LMO5V532\A^^#GkM=5,4fTZqSUJ1VPkZD4bB,`X\+op!c:HVc`c!^gR`P2]LF^aN$84HD<f`&I"@
%6l:Z@Z6?5#f;lQ'iL:]>-n:*6WE^_5LJ,1<*$R2Rb%@\HN6RiH0+s9G9l(/EOU*V&a[)&!+Z-0W<<PgP..OFaR*6d2W$8AfV47gN
%c#ISAg;=mG'S>Q8SL@GS3('i(ZOCoVkoJWEYgrmU_XY"TN5Hec\YlCJdMVBVL5VoM#ZVZ)`B!&<Op6)?/.ERhL^:*W($>_WBE4)k
%:-M2?&;(^N'o\%<;-HmTJ0uU?,7@sG!5k[KMYfA+Gn+CgGbh!E5q'1P3=p\/,_X%d7O:(81I]_GN>ThmFMc^&V(l&Sc)#h?:,2lo
%e9R1WRmT<P)elAoq^HX<Am3AV>+=ujB$Q)n+]8b4F=n<kp1)E?EA#,uWj)1DcTOs(*6<8ZXC,`2BA8F/JegHIb'A__`\bH8RPB>d
%lOnJM<A*C@oUQZh7.e;B?]iDZl92=5ku5VtdKfoUOq`n6RH$]-+`cOtB5?MJkSLl-R-d7<10_Bo4mW=Bd%$[F5.-g^cP^c#A;gtY
%'WsBhL[m,)Hdc)0*?33FSN;\I=5[5R>(!nA&Uc;E\T7>YjjfD!(]GPj;=ggM4VVlV!H!%aQg=2';4$;b[28AWl92Qj+da0L2N=\L
%lm:7Qa<iuWAFi*5:;DJ'75uU>MJ0H('N09Xe$:.\Ol9AEMW;6$B:7*.+uIuce1piA],nMBGB@oEY(qHqILjbqKY/0P?<-"Ui6)9$
%_G*#OP`FDKqDV%hEoC5u/YAoF,Q"'j3_(^ReJFA6_/+qj"u!X1[%g&]?4ZD+l?V'@;G#r8@.-%`l5e3-^Re$P3'\';C?&9(N'L[,
%TtT%dB:h7MD&IpJN5=Qc^p[>'DW!rC<8pTXKO"Tc'>j#l`c09C#Ff<FF>'-h]H@[B]j[K$V"9*QrfP\CTd.N"=i4g^pS(;?Y&q_Z
%!t]\F`&98n-&I"l-Mk_.ClM5&*kV-RF3p?E@i'<;0D)-e2Pr$L8eK^6lk*QUBbI`V1pUAo(Gh:85!3MdpHk%#\m#aO91g4Yk`JK`
%<O1=7H4W+N0=4?OHIrd9Y[N\(nQu!VOL3KhC*/ribR4h0l31FW8Ee>7Csf$Mgh]sPg^'9#n\Wuek@BGk@^K-J@MXs:n1V)E7rGAD
%4SBujKJT+*#[86.>AZfi=GA]'Ds-fQ$?O7.VGZX.dErC!7h)<dj?uku>*LRFP*W8U?itMfD)Q17K="@UO,"r"dNUSa>2t@>4;4&$
%jqLDS#$NK4[^4UW[odXW<FRpmWB@.hB96]E3b.b*qP"=?+fQZpHJ:F=W)Rm2WHlkqc%DHl14]Hu)P)L=5NF!3nA(727/^`mJ2P[D
%"u=B;Nps.@)m^JL!+Q4mD)q[S`!@)90\A!+A3n[9G"hO%.2<4I8*U^qfN#1$AM"f%/R?r5iu3[t'i:/WA$+.[On#KL!^^r#H0J@J
%@t4'>h:.W+F"qF?mHRsf>FNV(iO<sI/4A,j0e#R!RlZU+oRn],Xt1e,0tI^LQo?knfX9A<kOe=)Ko16nb^)UtkG%!@'(TonSZlRE
%def$73WOJ6Pr6NkQFI+OBS\KWn'bqscl$teMW*4m>9rRrLZ&_Wm0.%;nV4;#5$Qc/KX$XsVIUNaR/]:PE3uh`9NZ+M8J8SRdP-bd
%:j*$VUm:!YR[>!,EqO-/CSO.m2;=mp8Ob><._-UXA6P5#CGMGOO!K%M_DsdfI1mJ)ElU>I%""SH1cjC8n,fO;UrK_Z1UKI/FaaF@
%Se_,?Mn2Mo=")`A_KH)Ub\E:Hg>7X'3VQ"Ect_C-X',Z<1b;&]SB3CJ>/+"!#IAMPM4"eaG(T=uMpV`E4ZSoN7/B<2.iEM"Q3-1'
%3NW[(`N`QkAJ9s2eQ`&ha3c4[a,(Roc-;q^mHd8r54p3\As[f80s(c>W;<t31TUM[8q;%$()7n;-\46\kppS@%[Dgi<T78G=m:Uh
%L)c+7bre%%=>/a&P]9gQQX"?k9jhGV-*!L!_.l\KKYXD1E"EdfL[3`q[k7!G)/.B0_koh3.17/0XhUltR7t.DX\@#Wm0N>--oil7
%+@&5X4IU#e\#n"fTpJ/BD7'^:\)lNT/5>.k?r8:i</8?PhHK>7rflVN#&I'!\b0IDVM]e_lMdRBjd)0r;iX3M[#%$*265#&Zm.=Z
%cLW0$jZumUFcR<+f6X*QSI?*eM3&\_A00NJ8N&:@m;\_1W*)r"n/S\b`f(bjqXVT_Fq&TcML2Rj">RLI3U3;q=D0m0SNDVSTE3d7
%UMaiWC?a-EC`UQLUkQq*XCfP>6:hdp8A`;`[If\H0QQ8i(eKLQ-*5.;<)oVn@`UnHXoE!X&Q=C4+X+<R1]erXQj]4IEatf_$*3]h
%0$YAJ6`tr*Mh+=-1W)^F]F00UYGWT&HYLbOYB]_8pS]+:P$("0Wq=KO"CRpdUHQooX><"A#pqtH[H$$;F-),`Vu#@sR)ikKo(8Db
%q8g*$lZ3Y,k-JB2ZlX\6U')R4aY]FMJ8)e+DTbJ;&5-2>/(lnWH;UWNk47Vi,rHaED)BPZ0Hl'S&a>"^n^(6R:`K8E&RM^:Y3+b4
%efC7%e#D.8hq<\kB.gR?;t-]*r_8Ye)"r]FZe-Q6Fe23jF6&3ob[6kh[Mq47"!T@ehG%lFjdJ@WlrlKto3,b!-"V!;Pj@#g"(UXi
%E`NeI,>L7UXU$^Q%&?4-:hKK]%9]O0'o3^J3XF!'-_4:/Do'ED>GO$\TS-7Wjd'J7$gTa>c7#Mu'.G$h*io?14AkTs1I&(-.;ko-
%E^i7<%Qc@8__+V\YCs4r6=\UG`d-ea2FCU[k3"Ic(E;4Pnm&-hop>n/m.=4&-E(Tc*-SF49AO#(eq*Ok0p3u3A(LEXj&"`gd4eWU
%)]4VV>L'Pr4QP9#3)A?q]^$JO'l0Gr133cc#3K3THc0aa;k-5aWf_FeN\euDkd,Qu:S9])+"+\)2V=Hk9ruTU3oOIX%G1AS@uf4T
%3JZU]d##0u%BbP><PCO('qETT"g3ZpPL>W'l:%Sh3f[PX?W`a3V\]8s9G\;]m(1!cnHS.#=m$_9IqK6GN]CHVAgrfl/*2Q\dH]C`
%#TYBF?G0h?kt)o#W]3X]C?mV6A"`!Blgtf?2K`L@&J5^N8u^H;7\o;l)frh3&DL.ekIJ="hZTKuD!do%g(cO^f%aA=I.k_6fgMbs
%*s9?W=Gs9?>_(Ct(mFZ6%j?A@MU;jP-'OqN6+&B$U*Z@*\?\_e39J@u^=Z-B@NDXFL\u9M/F"D.f')cme?$%NKfJ58j9I`8X[`"Z
%$6'05TG=e[eqt;S*AkY)\J9!f]sBt[G8t2>o9ckg`&dRESg0^r`&!l;HsiV/mPd!=A8dLH+a`OAV)Vcg*?H4)La/BE26h0?!h_O[
%^]$)BM")B.Uk&Ot1M7buF@"c83*Rk:Lij4\j=%;enf4[hP(o^$3.bV`=Vp@['NA)<Ve%-$MO51UR2o7,\@5EkS1:]4kbjl:Xc,3#
%d,gTPVq#!aXO:Vk)G'')R;mG0mtc[)[].:ZPJsVf8\Jf<be.oWgjoJWF(0T@G$5GeH;"fRn:K;:hq-6WOL$TFB(Ksa9[S=&4=aCO
%;*Z?r$R0!+IP[0&81phlfd2OVCgb&32P&MH`Ag@jn1D3kBa>mEA!T`!<L$6KEb05<!XD_W9P,+g<Edal8_XeC./1KCa[_W?HEh40
%?m(-J55(L^9D7FYc1=1%LMmMr-0%a';pk^PWZ>hd$"_RKZ/0jNJHK[K$RdVF]&C)c%<c^,\H:m'=SFdUp^[dP:s%#2VB3/RdO#R>
%g<?9Y<KRq;g1#qCU)R*O+\Bs@1bdiuYUVC37I=q,bS+Hc!:l[X-%"Zm8k!Y.jp=&od_LA>AT%*e]Mr;]7;U?p6APY9ADK&6-WGeJ
%)9O_6fRjs(bi!,6`-b"rU-jSKRn?H<5XC.$,R@dOLlLYPigF&KWo3`TE2ed&<>kC[Pg'Jm_ro64U-fu'GV'Y[oSi\tkJA8+k:eT?
%7<VGP[V4J`C"gF563Jk1kbMIUEqO^tkE%d/ab%3h[9C\chjbp!d)JG/8"%S2Z*oUW<F/l@1WZl_Cr,(-R%73$%9^GKbSEsTU]W":
%Fq?[6Er2/3RoDsn]-$-?QY*\]5,6b@eJT2p,(EQF0rA%,KUpa,Lo:YQ4JV4a<K,l<3SbcD')=fh3C#AqmZ(O'A`?$!1*DX(ZW_c\
%PqdX$3?bAW3EZd4E'?00j'W`W\3#d[k@[_ieaqg0-]in14\@S9cCueP2T/k2od7qO0gtV6blnUu`bAG@(%bLt4."Bk%QPEA+QTXR
%bFQdYnF><9d,3><1$@:5(t^&Tl-s3,;ta!V7\%:gVaAgkB72:0b-<iKi@b8*R1g%72'n/Q=nq.&V]Jfna%L@kE=Y+(aPjOs3Rp+[
%fY!GIht,q?%,@<36uKF'rGtr,3='"u[`V^aj6)>$C$I=C7;7EZ6SQp[;i@!Y3"100S-V_u9I>k9PsHA+Q.UB`B:P_=/L.[iNlkm6
%M=nQg%X9m,^fsXRl%r?>gI4Xl&:k^+C\dBt_E9O(fcCu$2dh3\YWsTCF#][`H=28n8i"@A.R99'8cTUM'qZ&DfVk4AZe.jp+K;I+
%MpK8OK\'[p#T?u4E+$KgBd*B?1_)!D4H<H8VMOpT@:H`MC06b*a#0;#/biG'p;.K\'BY.YZCCg5.p=o%)lNA8O818Hl\_Jt(D-Gd
%B6=tOiTLR>L1D.,Y7C6G2?-7%IR.Sp0!#2&ck[8?.NR91O]n)jI!)fMGa:">mINlMo-(h/g4JmC=(>jI0dth'fWu4,%jm[GoJI1U
%']#[;On1]&YQs!&A.rLuL.Z`lk7B%81re/q[@n-8Z5RmL.E=!)%f)n?.u*%f;8\,CX+O4sA*B>;$00t^_KDLV;7i&\=u;SD22aV`
%MD7&J-4OSK',"C[?*?`97l"S7iD^dq1)'UUN>3t4(n_)qm@.K#FJ9OuK48[K)B;^e)#/bOi3@H]0[*[<$a_'2`KFYYg=@ec;-?_<
%JS6rp,LM3<C++kTSe7XJ;]ai1#s9f%?Fs]K`+L5Y<=/%LV)UD-]o0.kgbtu`0RX*4I0n"jM)Gmo_kSYh&bb,snq\[c]qGOZ#]u!7
%LH,_B4s2fHM'Q',"hi]#(\OjD=7!hX^)<(*,j)>T=K7OK;LEt^Fl8Ys4nVi/TJ+SH$FM$7-:V3r6jAmV5sQM>C;Cs'Pm&&Oj;a9^
%_78Eb+UV7;-b?U4]odh4+?'KI@SS>G/K@pTcQRg9Va-stI_[Z1LcFm)k7=<78Q1L!HM&s"lp0NB"H.nJZ=4K$D=HaIAsU5o)Ohb@
%;kH^gJ3dWKF^Z.OMBGERA[2rA$G1CAN=oQAB!XFp390Ki$KcMkC!EWp"u08>0QC:U1A,lhE1F!5ELQu#eBQ]\;\`G[_YOsDb&,D#
%Fac3'P9LB,b1_7U&"4(aXea%H-):B?qkIWK]V5(naR`5.I%]s6`l_._>?NJ61QU"b8j:bQaZ_ISJC#^jKJZS2'2",X+I=d<1[,JK
%k;EbOU0)KGB\]_87TME<5!p?^3H.Ho3ep.?ZhrAX6YHk&,ZNE^6@heRea!B^<]7ZVEK=:cJjat'\?mUu6NlZe'^93D7ffC%-FY=j
%M?*c!SEL)e!fGK*N%3eje&Z-Xnqs-[[5;ck+AukEb;ism3.(;"'F>`&*YjGC]*o!<OcYOY3(!POM71c#R.D@J>T\%+7?NX+>U4=?
%A>rN_PMo$.QUF>\0t2^"g(`3N2sS7[9l`4V\?p0jX=EXGDA*]!f5fnl"uVgk67Gg'URP'AOqO0#3+3%Qe1ubZV#A+4/V43[$O5n;
%Q??#ohb>K;W-jJ"&uTDOF<G:LY$D]9L1^OP3`&-Z'HHpCQhJ-$o[#NYFh)IUoT^up<>10d>D%Wk74LD".rD.""/gceIM*amhDc%>
%Gsdtk4=:EC!P0-CR/<%OaZ4*43QSddM"J5=&"IugV;d^hZ$W,UaZ2C27P,a[A<&EDmZg8;1-i$B\,)7:3dR"Q2AFiWk9Q2LC14<J
%Ej%</Ad:,$g6>H'`;o0Yn2P`I%"h36;3VPKFd=[qCBd'"_m(`rH)DceEo7j6,;T<\:-"J<'V#s`[JBBtXZ78i1Z%<>>_7sR>/;6T
%6BZ/aR`raE.)2%)8@O>fYc=oEhmJG[DJg2O%#-B;FZks_;SpO?A/_f&AJ'#Y$i=*WAsH3'im=@BfFh%6:762u(d2/'?uKOmC#1QO
%au/f=;qOL+@J=?938m6lRNedF;bQ]n:cD9F59t=I7$Op<@p[La2bI(u@"n^21?"I*JnL>DNYjZeP4I.m!Z%`oR$nqto$a!%-c*8Q
%n<409PR=QBQ:Wuk9.Q/Q0f_aoB/><t\hEU\\$S#mA2q>RC<06`a&Ok3jX$ae.EH=S"u6FWYF6S'XskPk_c9[sE/"ZZ"<!B%fLfV&
%/cF5>5Mn*Pg*_hp/*>%e&%MM8D,6R?WWPtHkr<.op!neXd+kRuIDQ:,X'2)&QX[/*$"'*:UVh'0DT6:3o(s/&$BZ2rL$$oCbtR8S
%JYq0[HY)J@BUK)[-LnJhL/+XK$XAld'$:=u4nA_.#".N%32@f-#(#?qkM24`Jq9feF=_Fqg$$(hI"FANKTa[$29d_&:hKVW$G@:Z
%^h[,BCp@)Xa'D@!Y8=kn9iAWe'MFfb[a)h5<3!SBZH8eYE]K&rN$EJ`3IL`e`1`Hh2^2hC.Z$;V-g#7-::0mTfeI%Jj^]-bBtn@+
%`lqB2dLs0hWE$bjLS2>N?+(?5G;q'#X_Pi4U7!:$Y.^lI<0VcFOhkkMUPOlI2:-I!C_.p+D\:mX:RpRN7bW*,c1]*;-pOUO('<L4
%U,E]ApsJg'Mm\@Za4Gdp]Ct!@SJ/2)hQg:'--L),MC&N4fT[4XD\H&G&ZKu>3AG97g^d[":TT,F\AWN_]V);5MFm9XWp2'iZ8nh4
%/R13Z<@&B7:fkCG_l.BsD_>cK+tR"o<"VO_Wi$3a\Z<%d8kHRNX;IR!ZA#@8.U3irPueQ(kj$!A_EP,C/:/9,YD!A9\8&ApF+LAr
%/,XNpKj,/`k%`k4CdG4=Y/nfuXLR4=nVZ>TY%FlYd,_5(MAih;;@9R9Y]'Yc[=s=pTrUL2')]@f`PQcH<AkWLW3-?1n:5Z3P(e[p
%X/deAG?kAaiH"7!29V;oWj?Y:G4hIr^jmpWm<u?!!M!B&X[k%eG2(HqU7j)X/\KJ:3GdC)(=!]=F="B/O)"AN>hO"7*j3;fW(cPM
%J]gC@[V.X,+PFG6H#XEq-45mI$5p!W3G']bpD?ue>XTLA1?]o';A;fKWC93hFm$m/r!5_#@o9Bl[;P]4Y^9o5gft/1;0,MIMcVer
%?^-i%h*eCG]s;6:;5ugd\B9(YTVjBp#gr!QQ6a\G.V1gWXlqX?KN9Bs.AQ$eesVW[$>QF=_!#9%!ZLKYQpOS3S/E&sVk6qFOlV+/
%0iYtc$HL)N4E)1WE'dH@<Yae^N[uDZ;%>ZuGS?hViQuu5[1Z(`<g(l;Bg#mm&.+V"1p[R`D`f!h5SU'lj_7H7?ZRuGFm'?1<<__A
%FEYdYhlXtlk0=,rMp*I?"Ebo86K.X>]fVc>36LPSUM`IVc!E5i!i>r5,UDVt^`sJ=3&!u4C\+0@^[XQj4pMJVU?8.r%`2)j4WJQQ
%+Ous.@cAuOa!ac8HaXR#bW#rVW'F=!G=Vg%-tSpdkQP+%63Ri2M1YI3AYCpueWF($>"[o'+DTWpffFf.+ZpCFg41H*KQTa7,)I(@
%A%WYFrj%@9<b[aC!+YIW9:7(A2YKt1'jGoU&g.V_A4Ontm#cmsffYXbpt<TWP"aTr62aVR[A:)dQ&_Z\2D_M3gbs=^dWke%jUqa$
%;t4\pC<9o:1_#TaZ$@T?f4%ZI8H-Wp?J:o*Z-<A]Gp]`V9J$LkLY5')P%1i/(aO$4;q4Dk;"!01M`-'Gj=G/RJA0r-D6fnMi)X]r
%I:)KOGfB%CCcPlBV;<$$1-u6k#0U$$b$BG3J(n)j^>RKQ4IKQ`4M?_'mL/I?(8C+&3Peb=lO/Ondg4]%A7Z:87>:sYcEn/uek0Q9
%)17l%61ShY]tTSj1**D\A$Rp;EIa=dCa%<BPgBC[f_`P-EZBqfQVnnq_s*45*su7aUi&QJR61uY-'/(ha+)4k^Z=olo(Xk`r4egc
%U5Bk3j<hW2.]K2)77/875dCh*^d1OP/5leMn"?0l''Ot2Io&WHe0Y=k%RCOm:mVdDH3Emc5tssJk7Z:i"SF_tNDEA0'\4H3oh@`s
%<)A>be92#g@R1H,:tHK4ap%H^5tt]_-Q(>S#5*p@NFYk0):EP[e=g<aBi)\ceAVX"[R'k0:_Ohu)$dRm5s9<d@ia'9#IWJUI<eYq
%*n8#][.Q_uIb4]5ZkW_G$:4PVcr(I_B`tO[5s%ZbU(XiH"KaLHHVVrY'=8>TX[s\J;p[iG[UfWE?:"Hjd#o0O\HT*V5s&E"iYSs2
%c<(\Uefaf-#ZtSS^@?X_c''a*:8uL&8fK-&qQDeRd_FaJ^[PT+iNF=4^oV(SCjc'l2*0@Ik;Ugc=t8Q'JJQIo.Z-kVmuH!Z[8)ui
%Ra%:)fj$(ST^Rk[:U#NUC-<cU#DVh>``45CPS=q[JZ2bM[To+p194(1aGgSU5SOJ`GLK+0d[5(C;Z=?#)P]BKZ5Ia7p-S6WjJ$X+
%T$5!c-T+q2jFOdZjDW[N*r/R;<HJJEKeKtX8gK$Y<`?2nb;9Ie^gqPW.mB\Do=>W@*nW.:cC>cB$ONK,6LH$)>[r`Bas_UV6jOn!
%Rs&'GXrcV:aSfBlW\Q8.afo!sQnk8u``+>fh,%#4bTIh9C7&^(RA=Wd/Zph7Mn3n?h"jb=5!OWnoZ.%*(r$D`-cBu*BtZWmkhle;
%@_s.,2X%=+S/5I@jNP]],V:HfA$$ZPBUi7m%Fcts#DMNAnnV9_*ej8/6*+or*S3YZ>S"Vgm)P:S6i\--<>b(F\hD3(>Ef>Jn_o/(
%.EfsZlaE$j(S/N5^)tb4_C0/?L'?\Af*m`kW9>.0hHFr<dUYSi,Nl@12BkNr?V%<j?CDO3Jc9"3)G6V-kP#TAi^hWX6,D/'@]aGq
%Q@^>,f_&(=Q7tJ7lE<#JV2dt\pPM**ON_Kb8)@!oMe+>;!g,A=C^C2JpK0$rTpc&Hq9QdB3j"*]n$*:haV$'1O2;G)ggSb7F/OJD
%<iQVHrph%*K0<,TKSZW-ilKHLL,E<N1Io_#>:G=F,1i9nP"8QfKlX,,#*:saCb5aIZ"O@s'iik2^5]UiX^Y,-WCd>*W/N;tUTcDJ
%/S0I8R&)<=:@"VJO4#/;,=aZ1>YM6[]@(DWolglX)]6<8m"gQ=;e&8OPKoUli?C091Et/^pKk=.7Kt%#MHY<r>hk]:V_"sk*j`bm
%Ap'&BFXH/B[;J>b;7g'G<6"86MWFkTKf!#*"sm^K:t>sG%:UrlFGt&]#"Lqf.Fl)=Cc#VkH?+#-Qdd7R)^K'h<g9j*4cIinP`DkY
%@m`6]-@N3$4"bC:c!c5h?$'H=_@5FlU2$Z!-WB5B_]ks/jq2)-AF*Uc$`[tO$Q>_]S'YLVo+n-/Ip-D9Y-KNOZI#W2[<jV1V@#XY
%Kai"pN1AL_MDB:Kf=7SQ>/RH;<n9\&[MaWETF14R:e,Bnd%X9mF2:m3Dc+M\+Or6X:XQA6F&c6L(OfXaUfo+u]85lDTJUQgjT4QD
%D@%(J)V[s--"X3E3Zd+EPD5hs32\\e3=6V`PPq`c[,AmNR-:WEKV\k(>iTK$)SMf^g+p`2.4CIq%>0adK+bTFBkc%o+f7*CNgV4e
%5MdisBf\3YK'kpF9e@d8-2tpb@WI<$$K<rtLa8tY/hQ3(&LXioRWNA2^*g!(:jHa\d[\e3ZV7/VA:u$&&20i<k$kU\EQL528PV[E
%!(J8R>>B[b'%k!5#cM-D/fg@fe8*"1asOO480`cMZ;M;E'RWW8As%lN#II0Y#Qg_E4W0e87bi$9fIUIB*!o06U-V``#Vika%*k94
%CQX6+"nCkK-oa4"!W_a8aUBu&WsKXM2n-op1dl(VL:W)_\rWaI%04+N6@&>cbQ/=I_JM;,+6[0Eo12eHEo^GX]<]O27!1XJcC:@Y
%GCoWP`Q>"dO!:E[c+L4\;]rZIAGlNT8^`Ssk#T-^=C&:el[Ml]I#2<M,t=Yi`H"PeCW;$iS=R32N/C[cM"<<VKLSO,a,+f*ob%fA
%K/'DuD-$%k?90hjJk<hG5cPK/1g'pEU=l1m/j_,X4\iQc7-p)6a2G)-g8it:8#pFBpbeO)RCO,u4]=SQK#T;IWIer8I880@(#3su
%MY!iX)B[73c.VMZmeg8UT8YB1*[W8u77NTQO)2hL4QW#sW@mL38]2iO6)*UJJ?NG$&XUc[QitYJg$GOI80c\'!kR?0@$ETl>%A$M
%GAKsq&`#4_*""h4k$(=37f2MpNCI.e"V]g8lHkDt7r#"?P0,,bbAEM-e6GsEWOX/Q_2/Z)UA>@i"WYKU8m6a6i,cXgGf;-,=co\1
%Lo^Z'l-lN*Z>.P)-',/P:0N1iQRnZc8_KO>2N_ijU[c#3*`OF6k<._G-J<?pQT:`A&"g)?2mM'3Sba=Ys'1j_WY/jkm\VV-E675U
%XH*rrN\)[seSoQmJPk*!dZ&>qF""bLb#t=J$IK$X!\nSmT&GI"#Z7Ru.&s\t>_kdRH\G"KVC4hVBMLgL)951c+c`TkonlKq0[RX4
%)BM6!1_]\g[p4aSimnZ@GZ?pP8u\L?HBYM1%.!23^0]l"c#$pX;K>G\+r_Eb-_cdHAlG;Ai1]5Um>5SW2C1FKI172R]$4t5Ju/mt
%;A;;//gl2g4JJ!Pq(^R00Qt$n]@8.sL^GYN]3lI/>_d(gj93Sl$%XQkg>qUVkN_l_Q(g[:.#W-PZC<&%$4O%Od>nVFOgD]5W>f-m
%Whmo]S3R(t)b)0qdu@[+%aiiJ_U2"/'TFQ/3%[s(X2^%=&o;eC#G\g`.qSEAUSfB*,=g(MKZj1mA,8WW)bSIhj*eUl;m4+VZT4C]
%R;3OIb%Ho!L)G>`-o&cFC@bn_FAMAf8m,O9()8sJAC&2jB;V+/NLl4X%Rhht8@sDc81'2"AVnWH_Ou-KTs!_KQDOkl9M!5bXCRuF
%_/]'[Oqibh"c73V9Q=ZU:3+?7VrXNs2Fb;6I+giTn1!5"P5.dJW%WGLX>Fo#bL,s\Hj-rQR3i",92<`^G@1,sMN5Y6ld'E;&^7@N
%ORCAD8['V*"**0"On&KN+?@t#l=UN[OU8mAP&Bmt.;OdF3;&p*Fq*l9GkBMHR\8%CgXNm`3HlT\/aBap3JAI\OrUi'fqqTV+`ure
%6'QI<G48$F8"!.)B>B&;C_<Zqf<&%ce%cPgn!GFNj_P!gm)RGnTJa>.B=H'NNh.)FP5tqC`5b:!cSJe,_rYgX@]>5NKL)TT?)i"j
%R6cA`AO&PV"Q_aikQJ5acrHntgn*fVE;m4"(?o-b,70h3.ou_ai#H1(;W(aIEQK)"8m*DKMjTU"?e"jGW%*%o0Kdmii3_UE"Qb:V
%p5NHO/LuSa-\g7h,'%u-0_[t9Wu-E]%<f=%WC8g%XIkBtA`DjpIKWY"B2o\j;6$!\6No>Kd>TYmT;&u0Fk$Yr_D>itEVfN"a:6-p
%7U*`NRqtBt7BY-TWO4jMONjD#9@(OQ<Aq1Ln/<G$MF#L1;)r('Z;0JX:tYVYSnY";i-]-l@V0\^ffH$%o<_,^#qVRT1$gg$<K%Bc
%V[sR^3<8)cX85_uE^ugNY!,5^4fagUW%a?A9o0@aXreomen_[_>TG,Tip%hC/NNJ8GsO1u#!AgVo>`Vp<DA^7=lgdQS7`RY1)nbc
%A#359_i3:h$'+"&"Zf&k)TVW5jYhM,=oHc&hi\W\[D>G$k<Z2=e4PJI#b<\&QQ@@D%)#dq[hWr2\uLjbl(0J0BM=LZZH/8g*dOVt
%(V[%42,hjGSZQ>(X120DFGHUJ9T9D*`1B#(Q>1Zt.NXEuIH4Q#dsA-rP4Qhk6+m3@Xf*H,-o``Rc?*BnL5iKU;Nj$Nc'qD0!mQ)K
%%Z-fb#g:uTneSZUYB6^6I#G4!)eOs_LV*_n?qnas-oa4A(*=$s2.6)+>D%On2kgm^,Ct1$bkem5[ZV2j'TJMF+HKs-.&p8lYU<W]
%6S]DmJ',9c&SFm0S"Ht,f,)Aj<-2#[g1jjq4],$VYdJ4*SVHj%50jPSX8BbK@p93Vcb>\\+\llk6E7=H0_TtU7cWUh_!4FuBL>PJ
%oZ],T8!?KXON91YFPt:d"/@Y2$qO@?N(LH?;8IAl3,b/WiA/DE-./hCbMoNOUc)p:bCA<7AN_[)3Y7`S;fL$kCl>kRZ":GH2A+>a
%<n0fJ`U%7e1j(kBC.VG`nJqMM;RRj.."n8BL)QO^.WWn`<1H!1.r@o&Ul=!&KK]LH,a`&u=*-pi&plVpoN9lmo!LcgidC`-VO.bM
%YqmZ22n;R/NSM7M*Dpgu;ai<mg)/pRqH1B!kf0m.EV9@?pT;,Th:A"O%Hp$H0*)\nm-qTs3V+\f[K?UM[#!6u56M8A'?)]g*6XG/
%[$b8cI+F:8qrP(6-(;DT-a97fM<*filhW0E.cG@ZAhLE_l5T48W`!U^>gUr@amE[8B#$cK1*0),"h::K)/<!8mEuEH!u_B+0s\c$
%I)0'^V,8p(V&`Lqbq*l.??4qK,lL[f+5p4]-IKo?E5:,0H'YaJJ67M8a]kK+JbhEce12PCV;CI&3:.h;Bj-m^Lrmmlb-SF[b_/22
%m^I:/pSB\*bg!^<oVq*<1gL)QO:%Yq\e[nAO$dbKL^)=%2?r9V,)'7T#\WFSkI)'?k[uKKg.6@W,geljYLOaGKq"gb.n'C^Dl9>P
%24(I?nlk7*LoWshkF#]@U?lZM(dAV^;pa#/(VQSTjT)fi@Tcom(-)/4f<V*\4(.YtRd0QJ21oIa0]h+Ie`A[ia^I7<17r/a;-A"k
%<(kLCh8K^_s601\Hkg[ZlSn0\<_GZ:I3CNOOuck1rm38Z9=\mLK1/gHJj.Xna_)(uFU!E%,$oC=RZ^+I&s'[m=<\fMla!b@oFQ6K
%X!X'-+B*tFf#"H>"4#RSF)2+cEE]#W<IZ7Oh=\+B;oJ0qK83)%ik-kebRfpOZ*o#B1WumCgFBe1*u]fQ!N@]o%>J9M)0SPO^gF;;
%0/fhO-5t=W!Lq22q?*\-`2"B=GnZZ7'G61en6<SrkT$OQ@1!5MmH61I'?e0j3%Fdq\.bG56e6Hf_da`@b-%5h03NiJJI3_ZKr&1e
%!&i`/J5]k]^[.%3To'FannNW'(4ZM!Zu_h0T\J.i17\cVHQ0fNpYmm*)Fq7J9^,uCH_N7((uK<M'Z!rdH@V:M\OoOkXm"G;fRREI
%VZG1])i/H%S:KPg/']d\<cs2@YIK:jT`rF>/W-8dQ7?5qD.?J&5o^/a`%64t<mGDK=*\amY6H<VALSV2@RZo1m7YflZY(#tY[M4[
%`2f'H9`\m.h\SYDQZ&+FX6m=OH)a=\-nu.N$C.1Tm(oqLXVOKqMPU&%0sJ!YKEKck_GO)g?ne]_nF.0/[:G1eU](B"[N38fZJR5d
%D,nt%*kSdc-MDO^XA^+bI!M]CcGa0\(%;\P<qph+8LC(Vq/@I`l-u*5igm:7$WZ/B:Tsp&R]`UCA@$5gj]UED%Kj,.)glf+PPuuE
%3UX_\JF_j]GV1L_R,uEeTPp\SH@VI+Xfu6?MV">2NWh>L39d0<MO8L$K&W=8jt]@9Q06]flI\-n_WlHILu0c-+n:)C0C!tiWhL?h
%>#.,j>hW/?Mn<s$2`>sTSZJ$u1.H6,1i<FF:8DpDi376JLIKTo:b(n;kWfQa;ZV%`rGb]E:=j=bc\AL&6egb,L;Sq<#(qn,G.?4.
%OZ/gmLnRus`N"R,jqZ?I%k1`5E-dm1LugUHL<D`o%,U?p=VIf=NYDmFa*M0]>9^3N4eG%,8'j,XWB!-gg(RdL$;e67mHI6)Z9clD
%gJ!a-#md3h$['/6%J3f^?m#46#q"bJ&/3dhVNJ&1<.nUWKP!!`3&Ke->j:5uiD/&9J(1b-\<(.bpareM_Z0((;]DN/KuMq`O*:#b
%?'5;;BCd1t;tN#8niO?V?/d5i0$'N%j7je=Rs`]aLVn$o("ThODT7TqaeK7'o,k2U5HccK^d(S'P;!(H+b]De%5eo;W([0KU(X.K
%f,t6T?\CaL02mdNKEY_!<Yc<^^*aFDGg`SC/]uM%j+E91KQ0:RQUPe<]q32fi`8&BSD9i)EAsjUTZ)oMiD@`.M_N+EWrA_.Ms:BI
%b``SkTD%+<jbk><iaBn*;Y2UX0l'VF%kb:+c^VL6=qiUbONKFhn[e5gY5EHF@'@D^5<*-o=Fq_d4pr,1(D8"+_q^KhL!Kg^]oCB*
%Pt;--hNAZ(D!^&s',j(CP_Ni_`BJ,^e`=7mO15@#PB3-W.2uHI_u-ddD(i+rO>g\e>tL"[pN!6eNE[Hq#8^bXd9C$$//6ouqcg89
%);YkA"c8&,Jadok,_gJsbQH[qabMFWhJ%OQ(qt&qR^R*%/Z*ana)p/U'*Q,8!@M-&e&>$h!<a3-,q9%K;[Q:(!\cFl\3U&/jn6-8
%"5u4qDIl-\\--me<5Bl3S+$fc1E`FSbAk7_#3c*u;>%^Zn-9pQ%K&&MM!S#4)5%+-Nq*H;ak&3r+<7ApCSFtAo.k;=a>bbr&lTDL
%k5.?91hMc).2BFI#SWcHKqg5IR:=&QieM_1;eV8:]i(F:;:0,K1C,XHJi*fe(Z&^O,tM,kLYQ90Ejs5&_N^9s=jcC$C,K#4S-\mU
%Z7!U88#uRI:eKNS:7.3D)Oej'Ut`a`3g^OO2s.T"2`j^#&sr:<_3?nZ0nUpK=$qcJ;h@jp.%.o9\?r4KVSiS*fK%((0PKU*EX@E^
%fn0B[63>mjFfD2"H*3:Yd4ZkS/Nh2s1$%pY@s9UQ1C_$M.EN@a4)ZNiia2%.Fei>]4c`,h@7hkILP%$9$kCCqPk97eg$MK']CBp&
%KA0@](;'+_jIQC+.A<9mQWM+Q+oQ`iY67QECG7("+6[&co=FF0SU"<37r]tlfHofRiZD@q8+BB\\[D4Q]9'5l"iAFnI:AO>rgol9
%X95=Ua^]P\$glUZY_[%>\b/;[/<3lJ4YL>(CX4lSeu[Jk__*qr_`+hnZ75_mG"H)V,L>.j%%ei;`'C[<]0u7OHd:'3Xbg>8fp4La
%fHltkqS?[.!#%[#S0rIdV,LC$0#]GoAkCsi%(cYi1,mi3C7BM<fHj(=P-3F`C=%4pfHoUN(b_9Pn8OUcnKq$+^]tN8I!CC&-pH1Y
%#rBq6/"^3Y:Su&B(C2Z9.!-DKrSXnQYl-EDj>IkR_-r\gNR:!a__1IQn.uSn;P-Gp<*AgQ(JOb&IX3dL6_;N&H1jJQ4*p,V)!@sk
%*fm??QB,eL`fi&n;D9N45CRp5IsQj!HA6oqL4<UWn/!$P<g<-K".oTu>>]Vu2"/D![5j:J;@V5a3o>ea>BrG;\qld2FK[=L.MfHB
%Ln1\XX45e%5IQH4X\.^)O__CCs->8URB>mhX6&U2q1CBBRg7LnM72]F^#CJE>T8u9<E)&n<AKSEHC=0N?Kk;TZK^thf:$RLCKjN'
%]t44/>=ICLjgS5"DUjPIL#Z2k\Q*+UW^M5fVQjL"@]omiC.l$^eXZnfVlJS=FLTu]SXOf(:YoiX[lWfV2B/oNHn-M$qq3L;[qbN:
%Jpj\Wh^\"VQAS.o4e_K!IKDN%Y(44-i7(nM%M`3#K>tgh8h4@1g7'U9L(/=L,J-K$[,nDqKH(pKD^S\FJA#(h^7-*;3h7;"7[]h;
%Ao$MMqRie=h=D29O_AN*.dBk?L^>r7D66Z>]@GKL[C(^*X_'Zdg=?bC1Y?OrHT`j@/]aO6=R:WF0Z[We'G-b);%ZXZ!qdARQXt)u
%N/F257Td;Wp(kn$?o,<YC/L"'B+UW2e+9$roK*UTOW^oiLS`g$F7"<!O:lJq"Ui4ee=oES_?I'DrXZM>3)g@dO5_*aZD(J&$"cMT
%8b?/t5kmNhS=G8:LXjY7&cf6P&/aqf67sNin_t*4Z!kec.ulH?F_KDP*9u:;K+:VMP``p0.)_k>XS(%-]ZhZC4M`Iu-TN>7\h+0\
%e@@!Do=t^6q`YS@bieJI98"<0(aGSO&!)ZR.W7g`_JPe(a(XU4?*f)!e_@%QVVs6Zl9'BY(MGJB$>5(V-OBf&S-?f#5@*3K,l1)q
%VF,B]jX*Ifn0tq%0hM[KeD>jdg'pgY8#D025Vl&Xj:rU`.0:d29(ctLg^ETTLGMIPmD4qACZ3@-MSA[bdK_"#jHKXY(Q,_ZWl^"/
%*mH-`M0>Cq1.-GXnK5e/]FCB\R]\e0^^&ij2^?lNdD#3$CTp?`_p0RJE5e,2N'268G_l6>DUs3f;8[9&5XVg'Q4V&OXBefgD9Qb0
%%MpSQSThIGaRE^i@_T#HVlbCKpe3t@$cY5@/<Ho04Q*&`6_c1%[+B'r+<gh=R%4d.,^c;TK9_?44Dmn'@TauO@N;o4.)YBlO^hJ6
%.u3?nk#ud4*JQ9I"ihFa>c"1d,6Oq=*K]llYs/Mp%glsCW]Gs@IDo&?1]d)p(4c2`Z?/2dkhUgM+o]J\"%-O9fDAntcoBhYOb47,
%*RaTuB@qo!cQi##+GF(`_+esCTC\>%f.l<[6'QLh_%p8[mqQ.SSY$QaR%,t`LB-*U6:YK%(+^_#cO.gp+`3.s)O%cY&VH/&(C2fc
%!J[hpSo\9qSr<b?5`J/;-$(QS;%WPH6$!\&6\3PcG@V)^aIN-G`$kh)/6qOI@j&?KjNeqa%1lG=>9\8nk'*!d%$[_pUDcglSHfF?
%6`N"Fe3fuB-PU2U"Z=G3+Jc).2H[2C`7)f\#sPs\iY3ZHA\sGH;nZ^C#W%BI1$l)`?*J*T;nmd8psA/U(=!-[MguV#!m*X=h',bD
%a'r-_)X26-O=TVW$Vj`N>`YaPGX9<1pl_R5>j0.(1eQ^\=\3'lUi8(/(T`3V9OnZf%+fgA^(#8;?l:Mtg<Cq3o@+^.$8pCd^T!>#
%g:Tge6+XKIXK)9LCWr\E7p)]^12'kpKCJk/^m,;Z8Lb&JD*i30TE,_c\;Vfp3kWnY&lJ5@$b)$rN=*nJoAF+!'_i7P!Teoii8Q2[
%+`JQ/6dk,8)_YTc;s0[RmR?-qi8NQ6ekMCeA-1a)FT7_.V4o%198A1EZ02^T^^s>22*<)Hc9\J?;o9ggPU7r$0,hGF.Y(!=&e[t`
%VT@nf*V5k'LlP!^+&V&<HmmI&61A:d()7B<WR-T\#RX&OH-m^:kF+5@_-uf=;nk^%+sMZ,%>f,`<lW-oP6:%f&V].^!>e,a!hXAK
%o1\r1YXT%S\VZMV-nCSrpEiIM*)[T;b7ZaQE0QRY`W?0q1n^=GL*PWbS8R[3ec=(].(_!EF:pEC.oPck[pLdO5T%golr56!Cgi;]
%;HX_h")\;L$]X.#KUnBq!V*F%GfisoD!2jgp?8q37).d!i\lct6851k!^YYSES&NE1I\a)f6u*RTHK:9?<O`FD_T3W#(Y),cgEI7
%M_"bB,1*+>b2>7M=R,kK]=Irsl-c.U]R]aP:P.!O]7p[r+('Bb]WWmcYiktNj'9bt_Z;m]h>&5ka?QYKH)H_9WLhlMVW)=l>>2.8
%=D'qb2>%gY;=Th/-Rn>i=1HpUHds+EVk.a(i^%*QLj`4r5p<B^kYqsOKT)ls`84SWS7s*OSqX/ES2\75FQ0f'aOsOLHEF"-:;'QS
%<3O+&(N#ipDTC4Ab&Po-\iY(MLsp)-``'V\#\qnWRsNe^_b][.K6Em0EJN.&e`\<I5L!0;:Paq.R0O@Wg`KIMn'#b""@-]68QKQF
%K$fT2qD9_PDBZjF!9*M&:.rQ'9eeYF)Gp++Qb+/#S>k#>,_V<*M`/g/)?p#r%56c@cmbD1)B`_cM_PHA1;T&83*VK`)F$3^&U8X3
%8Mg7,"(a8U'P-<K8o6Fgq:'oC\E/nE:,A7Fje#R18AsoTq1:+]?6)k5.=BkBO@plkW];jC!iJEVDG@1+[r%Q31#SM^6YViYYK&Ie
%-\ec6(hOD7^gZqN1S/nG.^Qh*HfVj#13=GZC!LjGg<T1L_>:$_(q@_'AMm\tk)ajjXNnq(/C$FbR4!9)k02Qu`VK#IftgTGU`O/'
%GBkX8_*(ua#\TTuH$#PgJ(b:ehk,>NqKFdbS>Z(il'rP`0lP?_/do^Ac>./;EP?^Ak;_)+A7uF1J=mB;0'VN2+.R7U<1DHD",+;>
%_O,+FZ3u&_lN@Qe)disGb!=:TU5;26VHW]-H02qd,:;sFRHK*AVIpse5*Jr)-ThOp7Wm<]ICi:PD2n^e1;TSF3;/b7gWh2KX8DQH
%j8)S>\"3C>JgC#!ZPu6iGF#j/On+iC#C;&Lc+.!Kb^*t>)&+!8("nl8^&=s`K$pHLe".']7D4B!T!'PCrapno?U$4>W#'A:1Yi-5
%qjNRlE<.mL3_81a4tDq?F-`=V2]ZbtgiRfhB?nbiK62Fe/OW7M)%;F8HI98E9eX)Q)pmd?U@XCYk!c3A1sZS<P):U#2D7,SZ8TD[
%E%oH]+15P:H_(D!WLdYLM[h3R9mgeaFO3mlCEh'O2t^sS??Eu9eXXkG7AlOh4M->2CFM?iMb]I-GS\Y=R\*o.m_hdP3d8$0(EGaS
%daa6c\<cgQ70i.:CsV?7#GLt5MpD.@9J8HD]"Jrm]q<[DU'("WjQkqsVjK4MNq%nAE1B7,ZZgT4ksadki67)henNA7D-h=?72E5Z
%oV)ElO0D^7Mp=K8du/*[7C.6.(Ys2j?7^u&fO[+k!Ua2$PLG?uC:4HD1>UNFiBS6Eob26/p+iXGFY'#nJc,.Drr;LlL9?Q=c2:@d
%H:#C('7)')k=hlQe%>J*]DC!gqOd^leO5I5R!GmU[T<>:m]=<V\\/Du8G_MOY\PpmF@F9_]U+mnRE6kuXLZ!4?I[g=jb=c:'Qnbj
%?;lHl^nLg#H^2BIH*C:)'[=Nn:Xbd#[1lW#`oFce(]LP"A#g)"'QFNucgn_ePpnesb>pd4<TIsr5$R-q:5q*:<fBs4m_?KMfoEP/
%TXWk@ZFk-\-.Z,Q[8i/3"k['ZBKNn2Nb[-he[K;(Sc5c/ntbUK<r9AV'5f[b>M\=78_KUMJ7]DHX#RT2cr4p)@3eAoB<\=4:RO-i
%>nu.2YDM*#Cj4UhSJlaV0A\.D[i4J4Y'R/!c>$((?_J;bp.FkWqRgL&e.V.OLdh2Y#ptce=g%_:np[LuhjOYUL4cUbiD_o;bW`Wt
%:i&iD>GK6a4L-i?Cb78Ddu<CTE`o".QCY,eBP/k?PYn_9bu\FoC+=3AV9B1Xkb>V(iHt/rO_h;Tb`]5?DuA=Xaf;/tnX85-<jq$b
%,MgQr^GjST>''baBlqAO`j`>[T#)r7`7lR)Cl)Akj2O.Eba>;((pWa8(R++`Gfh[f4S_(RoNPtga7h:A^:tQ\imUT0hA<A(Ch=A<
%0P97`OGe\L?H,3Z6\YMu5Q;=FHoZ&m0E-h-mEKi3n6ugiQbWFW09?/0qVcq<\/R5L#QNWMRbiHBN7s1SOG3ZDs1S1leDf4qTD\&"
%R)8#sLq\6+5ihr6J)3EejQF8uPQ0Y"l(]p2pTmY%N1Q#?iPPWcqe)N@\iQ<(_T?[HnN4b#)r%bI&+7D<O0?9_ObIdEleSK!%f!8:
%`R'&Q9E"6crB>IVLfk)R>f4h]Xqa1PgAU#ZLPFZ6MJgk;e.Y>C6P=^sfUf8AK@uW]/jdt85%JJ7nHZHRXd?t2$kBY^0DC:[IsBS&
%Q^&N<_mo(t)_t+.=LrU7#N\<BRK!&Jl]R%prKg8prpA;iPjmEN#(6HeYmZY:)@hQdN#@B20SFP.3)UZ^LKs8=j'<\r?uAceV!c-t
%]i"2.r2Ktg"F>Stg1<D,'nElJLS=0g(J0&%nAZ!!q"[OWHpmngL8XK,lVJ66%H;6'PmMm**=uuK&k<e%^c`Ne+e;F_)M95aJC+tf
%.$4dsIR##d$a)@S3c;O:PFABHf-$Ts:c!`84mik7'om`8/aRO'4a//>"XYNec'?;n&&sKM'=,6ucQ5I553Be:A'CF$%"<Nd;Fk;H
%rD:DJI2q61cf3jtFZq2b#.2c5O>=h_[O?e=m#*Um13Ok7ecFmS0knsjQGFWgMU4te9aK]#6Bk%L=>=\Be94A18X]BWLkQWsPRL:I
%i%qDB,KNt;7H`.hYm:3`lKMO[B9T1dZksu%C5HSC[)1_G1`;D-gJ'9R[[Z[_ch#p0mChp*gAcfYJ,al8C4<O:B)MBE([2TW%6S>l
%c-'Apo1LLpEj':n;YOVKhRi1oP4$u)f^>"M.<_>e[$4Krm[BE\GE(&;Y+_MsEEh($"%'EecNb#gEG`q3"s=bfQ?h)4d)LY-G7F%8
%L?LM`)L0r%g?2`DIH.u6k[IDP]5%raGEfJi2&@/g%gupi`@dYMRp^L-Z2n#(O?/]N"uJ_=g/uI0RgFJq`6Kh!rFH'LSdN)G5_''b
%/fQ,3b=64FZE]:5fhg.3hDOs$e<de%qUj90CG:W0[[l53+B05Ygbg4NFPQ]*<Em3LOt=;A;1+D[2%b`3P36,gJVlCoB\S!#]-\[n
%]mRUq,8EGk9iK&+;sRe=di^h`0ODpsK+-?hVr^t4d\Q<KVS/mF)Pkb"+pNW)F((D]4a9NiFnG%H,.)d]4EhB-aO;QHh]SJ"CBYhp
%NMh//*+V].3#[`e:_;^5]!ZnM.0[V@<\l5arQe.SkEiW&4&VLM4q!TTcPOa/FDdu&q#Th%IHg*RDU6TS;XTtHF;.'?4Z^G?"Kkm!
%Ba8NH3XM&V.H0+0T6#jZ%m?rQ3%(H>ZW??4"q1Pb<frV66jUe+#`XG6je>;FnB?*fh/JlWjEf0t!n-+jrm74WSZ[&fToV^<6MsY&
%AilONGFr5d1qqcX%@SeCBkqfh['T>!\+>P>5N$oTl^c8`UW92!)=LOtPo)GhZ/9RHp@0oJ,%m5lU%1)Z*#O0]Cacql`m`'P3lg=<
%;8VD8]fS;o2Q/3AI?2Z`!e*Bf]V6Ru"[,&g'2aN!M0hF>,-0>_#nn5I>-bH@7Q\m0l0]Yli;U)W^U&#"VFphKfck-8-TFZhia`,D
%SGhtN\JD0P*m'I`M^%7)NqE3UUK[6oTT*+C:ul!BpGk[cO;A4(m@:QHSd*Gc-#q./(?367`@%fcfMHA&;[hE-Y>HObH>)5a&AZ9R
%+[mbf)t.GGe?5S;Km&C_J:?Npd$%_@:el;!)nkneND7ZF71M\>,RWnVoM1%f"(d9i65^Dm<[:U+4l*MeZ-j:A%V4K"V3Q',KhnNi
%Jf!_-FbG#L8T7Ihb!PHg0Af<@LoDJ/,>((OT;+L@SnBqriT\F4$OS3<E[+)Q?"RCoT/CE'Z*mZB`@Ah:)*+,9(.pf3Z&1rfU4OV9
%^(<+#L"fCg.*1Yh'R7)eR].4-[3-4)SU42<e,i]6E=WWbAj+jGj'g>mFE%ks'eU8u*c4$._X+bk^!(T$9<lQ%-:Fj*6%lOq<C@W5
%Sa#I[rYsW^Wo-;_-;BY@PjbXj^8^n4m\8(NLT8%M$LGhZ6+l[E/epSt_qIXL*ksr7dY1ie)#FA9jOfk?4?86)OjN,*'6fR#mA&CT
%70#pbZmBV,_)_,_/<$e5g0h?cC@DSljAH+PKLkMJERL+=otV'thXJL1_>B2)!al+N.]JuBhUjkrI#ut^mRQmWAn=eb_XsVlj2#d>
%Uf7h,lNn/"8Rn$qV'E:9!BH-'#[^YrXL+JX_uL.DMl>[(DR.(tN%Ya]PR0a?Gr\f;^)6EeSWS+f'Zsg!V=C(=<hrBAmSfNM1??lk
%Lb#)1B9pR3*Q]#i]Rn0Q!\21u!kFoLnE=qYm@(*t-s`n8gmH_::bV\j[Nj\cm[/@4;C!V;!pes]-7Hc%+XXF5LrF8*d+%VkB7:,"
%B&On+(N7dYe;tB)[gE-EJT@9GpIXA(3>MU$!heV\S6D%?,q?g/S5bH=:YM3_<*:T)j%@^Al7)R=#AZ/pW<5p2<phBK1NU^I:*oNX
%RhO*ZN^AeIr?'fm!kZZ\[E\A=S^1<9dX5_MN@/m&-H\;qF&)1J'?q?j;YW3t[H,.*'!5U2gc6#2BV",[5TN]2;Jt0b,DF9dS^:-g
%U^9RiKX1j[8fkP,64Tr5FZPO8g^[:b4DUK*U0N'.R0EW-g7WL.PUpHbCcC5?A$XhL4Qlu@H0&O,$l.(08sLVW,sf4:RjSLmU)[5H
%NB/)O_T/!s)%825hI4)P[i*6Ke(G9)jGBiqX0`q!:(FR.SpXn)DH9tuqp"F(/RRNfW9j!O?sP;^&7=HY-F;n,!sWtKplPas^ZWZd
%(10*B[#a8Is7-eNL(=MT]gQi#\<f9M6&mkuluD;G/q%398PP\11?;J+\UPr_KCc>`4!J[bXsp-m#IU9=A&gV%:!mglI$#gTd5kmY
%[-uSo1;HcS++E#*DKqO%j&T>YJNMUAWJ6OR[oDcs-OE^"g3jacI'G*uZDNSdNa%>cOnklol%nXAM'<\:@oggnUFe&"jDc+hqBc-6
%SI`N(#15?!;ZQm#<PjqAT^-7.$1U-CXHl5n)`KLXUJ[@,k.FT48B)H?,$4t_MY)eY.\6@K6"u2!%/DVn`A>[cc7!L1loZ6X^`+Sg
%WGj!n3^*69+@7QKq`4LCKUhmd-j%(gj)Tn!<M&QsPT'>=:8(I8eB>DP[8b9DOI!2VT&?L0K5c4%MRB#'XWqi)+Xlpe8K#-:K(1K\
%6>?g@SbR?!W59'nAW@VYTje,*Of,N@[gf;6,Wd!t0_63>l\4pe%eThnO-PJ?`S1ER^f_*A#<Ms:GU,#b:EguZ8?2aXpfWiK4+EZO
%*"Z$.97Rui,G@)g9K?OQ]'!hePdYn5Ylhb1=!YR`$c5I:O]&,a@UJ8o(e&*M-.?[\;pI^$\SFVYOp%R*Jq/R:7J)hk>%fk%ZZbbA
%,aB'aR<LjQkE0b=$DVamU(mRiohbW>Go!W)i0JqZ7hK%aqd$t9l,@K0i@.U?%tWY;`#$8gm"7Ecb4i:MIBQ/S!)C5X_`r$h>96jJ
%S<"Ti0OsG&;e$OA\1P\`eQSCSML<c8DBQ6JC,U5*7Wi&PMLXEI@QGQGBc5k*W;d^TNAlnZ<[8m1dr:l2gW9QGIc6,@MLX.-@SnJr
%R[TJhb4;JE&P</WeB(URqk?pbUV7GK^2$Bb!8mUN(I5*gHnLI@5!T*Or_Wo?gc"R,0B<r;T6]^):iYA+c^s<p:/_?E<.!+&@<!=N
%nu.1C@QEQi%LV0V09egDO;;:U-/,C0!dR2gZOR<kNL"2t;0GfC=anpfWB&49>m\]\mS!)V:+b"+53qjW'$BdH;nimKAhQ&b^%T*:
%%c)5u=LER'fQjc+SI[e13OS&mG+/4o(`.MNBm#<57e!X76?-]<@>F.mkth8qNm0rR;ZEu)7![Fabndm?f_LmS`?'3f0Pkh(Yg]7E
%9<SjfNP,oS_@J`Q:hfN,=+YqQI3EpeR1SA*eTn#lPN.JZ78(h):=5Hl\\.2D)SPE8q.S/^FW/Um3\u'3Bgmo.oQhuO`iEDo>jcjG
%lg`F]J+0Xf3D6pC9F(]dk_ZhRI[!Ct(_X_7K91/B"M&S&(2bQ9:ZB#l6Umd<8]=70KqATc.RMVG58[Dnja(Klk%M,qFaWe'qlu0N
%>XYN'[G/$*7+-`$-"J%+aM`p_@$IB1:Z52&So&=9$1pA"\'W3:iS-qCj]Oc;'WG`YZ=7l7g=/1!Vk8+!2^,tjB^"N)pHsa9iq!P?
%@K`<1Wb^PND4;Vr.=FEu*;J*(<-___j<-4G^CtRdh/fDb=h%@:N7gq_PYpXs$WdZZS=u7G9(C%UUF]ZL04s7lQBhPX\FC["\;=?W
%a')`YEHIhs"30u]J.Bnb.qR\ZQXWf>9UddEI;n/b6%mKqBrZak>eWanKcBd*CcpG"1;J*Tj$9(c\ZadJiLX;bEPsoTnT(qga>*qV
%_1be)Zlr0g]XK4HNX6%93H"b2b^hG&3"daCgc,B)F&+;TH"ojlV524kT-pD!9O8^,nXO<YG]=9Do"fQjU=>]m(H6s/`KsK@4*!ug
%\metc+*>Lkk/G`OUO(3)?*CrCPa%=[oo'`qIHJL_W^M9T]K"i=d^1V>091<B6?^"$eu"86Oa6Iq&:G=#qued!/h8T($6[^4M_@K[
%`R/:U$S-Zui_O('dGGSJA&Tn#7W'_,NhJCp!/20."I0`C0<UOn)>D+;)^bu06=mf*!Q/9SE=1u,flQ2\^?+^Q)o'gg)b4H>O;g--
%MS&'4`r2HKF"72>DZ&eYdFkCV-*!ea"lC,jbhhq!OY7W+E/2BBC'uQ&4$-2f1/<De1QaX)@>p=R"lHA5MiH_+GpsXg<2KfGb^c'p
%B.#G.K#57BP\T8%b.)rtUe!r&8MA'(*KDPT_l<o2BHO%Em.\H7&"r!N\7;=]"T^MpRYH(>#>7)3,X*#R4Ch-@2HDV4!dsh.K/e5!
%lq?=9g3r6Lo&%9oV2@r:P`fP]q$I^k9QW@2>`6]CK%p`UW??.HR\I"uWE@Hg.hiP<:R#,E>S!RI`dPn?8\LAPC.esE"q'NEUR&jY
%jua!3L>r-M6@O$f3mfV5gYg;F46M/YF6AF63+EZ%8<Vk.N-mdE;@dpmM+<Z):,SGq"#4pCM8>gVS]K1hlt$fS.hP1+3qYmYI9_qE
%n1W5_.^]7!JDXM;'l]-sH$.,!<d&1CFq[]h;>PtJV3t@p@_gCNiIsZ)"$e#\SQ5N+EZ4=Gq`28k\_+_n*)3$86%EGH3A[2];:NK,
%;/D.@G/+*n/_)sH,Nsbk<[;<qh^s.:WU#[g>Xk+c+\uk4g-^'&9bj]p)Z(_0P%$@GN$AL4^9R%aY>I+%ENQMZ#Q%d7;N4^>3tlu%
%oclj7\d;ii/&h-[7[%WX3Nl1?6[O[rLne9oLb2TrpOJg$DMY(Y2BDZk%TMcV3^QmO>rS<IATES3JN^S>p06_J*k$%q4/sZQkjo$.
%"!!rX`#`^S_rmgd7>Z2.`@*eU?];8]TalBSpS^TS%$oDH9'Z]Na-3!*mot9Q;!`hk2,'6+I+Z,!+'Z0h#N&dI.ujIMV^MQQ]Ubq<
%Tp/!cn\nUTnP'mT5.JZnaS>poae^FM(]K=\=_&LZ9`&]Z/H`Z,G!Ei`PNW*h07AuMcrimR;hUkG"Y\UZAWcAG@SnLHRkb>!E09NQ
%`*ll=8h$S/MaU]Y4($4OUFe&"I(*qD#*2nH9A>]u!*"M2BT_[cj\27EBP[C$(c6ntZrQ840PP1#::-eQM9UcD4$^+53b>ZLK+M0Y
%V)Eq/D0_rd*qCN1+oPISLK&Tm#i2VT::LBCCn>e\(@D1s'gm2^*T^.ZFUE=b=G/bCMM4-,.<d/p2+`V8#^>JKKV'^$U$K*l..j;f
%_AssigLoK*-;2<L'(,sXngAbB%Qh"g`<ga1ACT_*QsIKW)P<hB>q>8W\HmBgBNX@uKtE&;_B%>mqC:<0(S#%5&EsZFAi#lJG8M#6
%<u:*2@rF2IOmXnjV'[SG.:nY0HngrTRUeCIJm8uHlUAD&R[g'(dN'+59Q?>n]*jUp4&fhf?)0Q@M-VT1]#16VrTNoZIMD%LjdAq\
%&gKh;4ho>fpn]Fp&c-=i::P*/Bekg'ANM0*UUS$L]10kbc,k.M%,@b>_m1;=#j@b`*@Op@,F7_]ZH.4'(s@)q^kHUIG1q^?[\L!k
%l=;sb#XZoQmP#*DgD=#&;rT"V;0G*>NJ'Bd%?cpa$$QjRGN'F7_Hg)a+qsB05o@o^mZb!_GJ9G,,(n<=-emU,7p/8BoVrHmWM5q9
%a(3;re=kX>Z><%M8o_-W2-$Z?mI7qQ,qYGMW*@.9Z><$:(EScO4/FL6SM/!g*@O@n2-@;^kt=t1C=4iA7Z2*''@E@eLVBfjVTO'V
%<c6''%;pd^FOJu2CLU]u/D_CQ2.nDJ;)W<ZNBCbXBi>:;@d3Q)iZ0Fl4K!E/aQ].*BF0N>K:';nLYkTq::aBH,2N'(/DV<L72h_=
%V\%Hd](<UE_%"9gZl:!=*plD1"7\@@G]sGC_%c?g5TT%_=M-^@S*^pYYS9NXBir#`J\=AcnI@&iqWXe9b!RdVqaM`1[RJ!\RrK%p
%p;Dc[a`KnGd"3_)iKgETEWR;B'iI(F!aZOJf.#[0'$otk4R2Du<\33,qKC86Y_5Lo<('?En<C4LGeP"fG]Z*7js3&cc?Zn*Lkh"U
%e=DEI/<%DN*V&@bc=(1jgmtoMd74o@a?3[W[u;0-`s\%!#1V!-_?lo:XhdKrk3&QTfp.nYN'cFnk%>7M.Uu1QH;E?%M;ZV(9-NW2
%27/D4@Wqb`N]XT>Y`@IoPf1rXgdJ-<9KTa]]\.]^(=0FtUkEmG6;t>oCZbu_CN#giMDr.#`TD-:Rt;a?43d1A)7uc>'aqVcT.`Uj
%.BA3\WXJ?*fB.j\gR7Jl!ds<-onYgmh4nP.AB?_8Xr<mUa^[sRmm+P.K.R[Od9.=N99O1E!%[!8.-EgTj(:`i>tk0W'[g?BGc?g5
%5c2PLi@)XPYiJ$om,#2#LeW];%Nti:\<I4^!Hgo`h1$TGbnoN,SNI:$!8#53-IR%4H+`5te'`qp.85kL2q(ZYGV-"L@INian-sfT
%RQMfQr.FG\R?Mg#Uq@KmFR%bT/bO#E;Z$<pCmlBlIH.c\62XbBoTQ7I/%U@T&!>Z<3YX.2150lE&VV0q-sVjr4Y7>9Zk4gY%P:qQ
%GaWt:Ek;3o0QAPcZfrgbrdEUe_(%#=\fpq4Dqf@I8X?"m3("fN&S*YhGX%hSm+GJnPq=K(b]h%fXReAHgu(4l5mG*TOQ-^IeQUfj
%%\kt9bbld\gKQ1"9?Y!7M6f:QD>M?]FG8T!p)>bh3.r(TgW:@-=0OcnIMO+>'-G2)ZE-Ndk7f?Ea)-fTWR4t,)U(dKG$D]^`%#SC
%4>BtLFZPe4.@`RPa/(2GTJf6L-Zn7LjU7:'d`=^L'>"t?7DBV'2dn.mk[,ZC$>5n:?W`BBDY!E7=_m64\&8W5j]_$K!^9JVntFEO
%hfQH<L"gXCn<:'jSSNRtDNTbQWM7?R&:6RCKm.TiLFV3*p?5T6m8n^Nf"t:@2bOg%-9?u"qFtCDQ`aOgLmrMiEl6-i'3rLgZc6L!
%#SKqtAm`jf4!o^jR%p/<)D:+Za1"6Q&+a\bqTZJ)JZeM0D5[EJ<g$lC(YbN@S)8\dgE#?7^l*`gT9'Zoeqh!Aq01c:hmD;]aZob%
%mE:9gmdJ/d<:>o6mO/4X!pASSKX:Yci4pKC5nf>M7h<c`"Cf^;h+1OD+$<%[UVI*V`5\Hjd&30t'F&P5!`8,"$2H(`+cf"l+tk@L
%!:0]M;E@[<TH"OuFtT("phWbr'1=8LG$?AInS;0&M)6QR!%*CJ'MT#Dr-gpL]h;Ok$n=[3^cfMf&*l8)B0*R6$'L3DUa"o.n>42m
%9b[YpaqW\Ojb#HK'oH/Z<mTRKg8+Bd&d4l&eASM;$^'psM#sG::R8@eA:Q\EMMI!K1QbMncn4WGl!A'TP`>gG>$3dX4!HLfC;SPK
%cG[OBi1&8u)'Hq&nq@?k]ZM2Y'Mph%V>A<*n=X`tLe8Sdb`lAB_tgCH^'X!>M3j&U<g8jW+gs4!:`FsP+B1h@kN#q@osGW52OFOg
%*TT,0cO8&X_fm]N,8]Z1]p$+o/E%4=$@3V-6`NkB2hL]i"(9cIPO2^6(M@DBl0I%#)[+9-5e]]:Pf=q,2Scrr.Qh#.#BRA.>DR`9
%3$J#:9YB80K\)(td#N*o^s.u2q/aK&nf_N??juq$=L!d[3A!%Qr)a[.S.Q&3NJ^[iXYJc;c;7!G&slF>[L01P,bjsqi$m?Q]-,E3
%ir.[$Z0gYY@oNNVl4Ni/O<(SN_8O>ZEjOo"Q5Pe8PA96_PC^(`aVKH,Z=+,oG'<7QL0>J%'*H:.`04Ei#Wo:_j59SnO%88Sa=r/b
%EfKXWG#jN&2<t;i<#uA@VSXOBJIhrpQc-VHPh2iI8024c)\EQ<cW@2??kNl^2=el*Dn<&@T7@h35>`Xj.@GR?e=b:7i`$C$hV%!@
%_;O\%dKs)%R!tJ_l<'(:Glkj?iotKK"Fr,O`_(=+J-/H)+ihgZh?[Nn_*M4f7j2Is^iiU([^$KrEX3H.&%UqZmGR>:8E9b1ei3.4
%;)C'[&/?3;%!'1LE^%#HK2a()2^R,tjEE`n3GTockscmWUfO([ftO"W[j4!;(Kr(sHnjsH,^".(*ci@sB[O!@DN0Q\c>=pV9K`48
%4LI"]`LUhJ7;j,nT#+7Cp8X+$9D#GjVr?YYg0;?C__D2!RMa&7E:Z>.]ZfOf^W3W-flIa1#Z>Kd?a'jq@LGM3J.(53qO=rP)l9YF
%;GLYCW>2Wk$*hL?ak+&>,UOs"2+5<8A"[Q$E1qn#W@OAWZagQ+!78Lfq<p*H`MA>6/A967GX$c<csGu&N<rMFH"<EUSF"<5>71Sb
%p).f-"I!8Wd<<<oU0ltq4pVkD!5`slo:.$#c1=Qa>Xfr&LZVckTfnrXq%P"$_re&V.0<(Q*@=*(bCHbuAX:023-dLk9Xdt:g2j+l
%hJSo:;8@dF@\Jf[L;?29`C\JHM07ec,1'Y370p:t38Y8f%_bjiDl??%N,nA,[+Er&9_d=ZYN]tsrIU<,AKo%\'LDrc4clt63)YW[
%A(S^P;[PV1#+82*@j(4/3^*3ZK?ka3`;4q.OOfjZfO;^.ePlZ6N-pffhe.4t:4esb+"$<Nk!s#.$+BI.TM#6%@D+-<H9_])$5o-B
%gki@ld_Na74E6KsKZAV5ZA@R1Y!I(^*<aMF#XZZXf)\7%5iN`(DcNH"6(hofar3,8ac+R!.Autm6LHi.%5_brL0HSKA9VPO];2eT
%1<dRm;=r%^h=?5nihN8[r_hgLW=ee"i0kSYQ?W]&?KQ5t3+-+saB_+GEA3G6#pF"7Tcnt]i^!Q.!eb_:^;C0u3NMj,^nHSF-#1!a
%j;%rY@h!,bKQ2r^.7;c[W=d:HO]g\?:J8D6d"6(d+m(M'=ln*Q/Bf@rF^OeeMX!Y]#W1S<Js@fA=<Joc'F-ViO5<s:>r$+s+R/L;
%@5rMm\.-J(n4o_5R'R@4<p!P&T`ZlR=SjSV8$6tmDMW>++=D3fWM%2Z2nOQ\;<#r]CH5?tS<KL:q7Rq)<23;O'Q>1[npqE46n@'g
%Fh=!i'I[.Yi[*,0_q11V0++Km7ju6oGZla77OYeW%KMMd'Hip@+qZ44[]m+Z'6GK(E%@[R!.e8!b+,R3(3Uf]'(Wb\8kG+hri<i7
%d[*Yp1CCr5oannrlum>Nk\oI%V8!C_:cT(RU)44ujEONPhVh#;Php`ug6%hQ.&%K_fb4^:(<=(FkE;&m%%9\M*a7*2g+q+Y1e@7D
%niCn[84sAoapZ707H!\9'1T$\a;FD8OI0jpDt\kIcJWAm$pb-HA1-(ajLuM<co@Y#.5GaooZRk5A8ZH<b5!+g,2Ei"qu\#^\JF/k
%''F_bmKi/8A\M1Mr&Y:'&/GZaE[4b9(JW1_'LH+r]B&C6XiXGQO;8=4,!O2Wmg^\,fqk4UpLAhW:3@?I<Tos*j'K$haF`oi<RD>1
%ghCElr.,E5lab<?E.X30TiUfJBIoL#7N4%=a"Rc(F%irJW*?7bOrkqt;HFP'h_`k?(fEsM$.:9?eU<t_MWq4"_j1GT"O.Qjs$>Xp
%,"K:Gh8khBN44:L]`b;?%W\XUITHhuo<a.#3^tVWn0'j'&uuGF2.G-pS^M^\p>72`L$lMT-WP,L[#_HWg7_#k:(M3db.E.n&Di.!
%Ye\T6%RLe/rON[^oq&E2S-t+U-]56XoG=(F6nh'B5rn/ub8-kd%:4Y%LW2?K4/u+8*>/2VV5Po-N[:n_C,mb*CY-Y5^CauY^nGEW
%Jerm%Arsq6YE1S61G;Nt4Se=4boBO%fUN3>[j"Q)+:La=S:eC#%]e*b%^ZQO3%AD/<Uh_13s<VfhR<]$jH(A3_I&SR+/>V82)E-G
%]cl1]/6U!t+f2:26Ve7K"tf"'DgUn-#22@#1'G0#G]h[udgEp!h5(m>BsF9g5*`26<Q'0k+JT*'P,V8]SC,eaEe["+N,>L3JdN2M
%T#6b7,a@4[A)&_akHC%e0"T,VQPeRGrQ)hd7m(pe[E(U1=<9j^K6@IU)T:8?JY5u#WlTk/lZJ`f=:4Sa"+dV9!iOhtKG8Qe;8Nh>
%IY[\)c,;%O6?ibAOSACV0MJmWA\o=]K9RRT+L*3D)@qWfjlFu')SqJd5lTR^;!KP//brJDP0tQ;`T"C=8tf!oj9dGFr;2S6BolNZ
%1?2N5m_hFA`%8P+#"92m-\##RXd(QXC`j":%pp0JPM6ODC6@&-^>DI\+n7QK4;!m>Um.AeF.?#SU>RbB8n%^hG/do`GSu<s>\K7F
%@1ebkAm1'#p4.:G\-*!f;#\#r)<ko*)gRc(%c0Cr&p0D18.5NY>``]_!.t]pjAZos`@sq:UQH5m!_sR<R>%l0nWLb8VHeCT`s/;%
%QZXSh/WTf>M,oVV(+E9mcq:$+9t6H4&ND:DJ_N&CrWr(b?d@=<DhSrOZ)dW\3+<B6^\QoG:Q^^3*_-ct<Rg'-"FhCs+[1o/!(kb%
%,Q8m<@WiaU+8I&LENG>"?B:l\p;bRGiT!Hlk&1L,7@$`!*,5GWm)DOi]C#tDg?r[Fa[4;u[O02cF<'gLn-//<dS.)/O!=p!p)6`"
%&H$NiKg[DkaLT^\EMRc!>E0rB:V#N\4OV&+dl`]`[RP`dd6@%?r6^.mcktf\duM8^/]SIL*b/U2BnR`3)hFSMdaI]lo4]JA0ZW93
%Jmjg2VK2t3JV6Tj#jGS(@nk0PfjP#79Jh&48NGPJEYt)(:EFSRa%FOfB`9i?=\\<<P!L[qGo4BR"Q;j(VsM=gZMt?XeLuFFk3_&S
%FoV09f3c:?o9[)h$<eCTnB9_%HMMOSo3Zq&mll7!k4P4QGJAV*VltUMmG3]Phu)L%^S'5WE1DB_h"+TsGUiq@d61Y#2d_"/7kOLW
%MPV9lqo.AE^NfY<X09:Nqt[FFrN#hm5<]#.p"PhsUm.t<dDK>+If&j3UD3WEpuC$T>mL?+f7WRncg1'!rp/H+J,,F4Da+,A&:X=K
%0>Do-im#ZM*aZO*p;rZY^ART']9clSNGlQ-B)L-6QZ$2YqtB]P=*NR$nb'YJJkB)&=207`YHNELq8:+B^4#n@jXBl8nV+S^^4#\:
%nZ/i`'6dftH@,DOhd>2Td;T'[o(QX9UY,BJ`W#c#LY$H.IiP("-'.LEq=ZK!]`.KHbA[CTQZmlS*[CH_!Y;L6r9>Fgh9=2op@nU^
%&'mH8^I`f?L&~>
%AI9_PrivateDataEnd
